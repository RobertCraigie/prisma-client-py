name: Test
on:
  push:
    branches:
      - main
    paths-ignore:
      - "*.md"
      - ".vscode/**"
      - "docs/**"
      - "LICENSE"
      - "mkdocs.yml"
  pull_request:
    branches:
      - main
    paths-ignore:
      - "*.md"
      - ".vscode/**"
      - "docs/**"
      - "LICENSE"
      - "mkdocs.yml"
jobs:
  test:
    name: test
    runs-on: ubuntu-latest
    strategy:
      # TODO: test more python versions
      matrix:
        include:
          - python-version: 3.6
            tox-env: py36
          - python-version: 3.7
            tox-env: py37
          - python-version: 3.8
            tox-env: py38
          - python-version: 3.9
            tox-env: py39
          - python-version: "3.10"
            tox-env: py310
          - python-version: "3.11-dev"
            tox-env: py311

    steps:
      - uses: actions/checkout@v1

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install codecov==2.1.11 .[dev]

      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - uses: actions/cache@v2
        with:
          path: .mypy_cache
          key: ${{ runner.os }}-mypy
          restore-keys: |
            ${{ runner.os }}-mypy

      # TODO: cache prisma engines

      - name: Setup database
        # for some reason prisma creates the database where the schema is stored
        # but when using the prisma query engine it uses the root directory
        run: |
          python -m prisma db push --schema=tests/data/schema.prisma --skip-generate
          cp tests/data/dev.db dev.db

      - name: Run tests
        run: |
          tox -e setup,${{ matrix.tox-env }},report -- --ignore=tests/integrations/postgresql

      - name: Upload coverage
        run: |
          codecov --file coverage.xml
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  typesafety:
    name: typesafety
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - python-version: 3.9

    steps:
      - uses: actions/checkout@v1

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev]

      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Run tests
        run: |
          tox -e typesafety-pyright,typesafety-mypy

  lint:
    name: lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7]

    steps:
      - uses: actions/checkout@v1

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.txt codecov==2.1.11

      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - uses: actions/cache@v2
        with:
          path: .mypy_cache
          key: ${{ runner.os }}-mypy
          restore-keys: |
            ${{ runner.os }}-mypy

      - name: Check linters
        run: |
          tox -e lint

      - name: Check mypy
        run: |
          tox -e mypy

      - name: Create coverage report
        run: |
          tox -e report

      - name: Upload coverage
        run: |
          codecov --file coverage.xml
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  postgres:
    name: postgres
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - python-version: 3.9
            tox-env: py39

    services:
      postgres:
        # Docker Hub image
        image: postgres

        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres

        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - uses: actions/checkout@v1

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install codecov==2.1.11 .[dev]

      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # TODO: cache prisma engines

      - name: Run tests
        run: |
          tox -e setup,${{ matrix.tox-env }},report -- tests/integrations/postgresql
        env:
          PRISMA_PY_POSTGRES_URL: postgresql://postgres:postgres@localhost:5432/postgres

      - name: Upload coverage
        run: |
          codecov --file coverage.xml
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
