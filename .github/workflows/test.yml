name: Test
on:
  push:
    branches:
      - main
    paths-ignore:
      - "*.md"
      - ".vscode/**"
      - "docs/**"
      - "LICENSE"
      - "mkdocs.yml"
  pull_request:
    branches:
      - main
    paths-ignore:
      - "*.md"
      - ".vscode/**"
      - "docs/**"
      - "LICENSE"
      - "mkdocs.yml"
jobs:
  test:
    name: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: [3.7, 3.8, 3.9, "3.10", "3.11.0-rc.1"]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install codecov==2.1.11 .[dev]

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - uses: actions/cache@v3
        with:
          path: .mypy_cache
          key: ${{ runner.os }}-mypy
          restore-keys: |
            ${{ runner.os }}-mypy

      # TODO: cache prisma engines

      - name: Setup database
        # for some reason prisma creates the database where the schema is stored
        # but when using the prisma query engine it uses the root directory
        run: |
          python -m prisma db push --schema=tests/data/schema.prisma --skip-generate
          cp tests/data/dev.db dev.db

      - name: Setup coverage
        run: |
          nox -s setup

      - name: Run tests
        run: |
          python scripts/ci.py -s test --no-error-on-missing-interpreters -- --ignore=tests/integrations/postgresql
        env:
          TARGET_PYTHON: ${{ matrix.python-version }}

      - name: Combine coverage
        run: |
          nox -s report

      - name: Upload coverage
        run: |
          codecov --file coverage.xml
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  typesafety:
    name: typesafety
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - python-version: 3.9

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev]

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Run tests
        # TODO: run mypy too
        run: |
          nox -s typesafety-pyright

  lint:
    name: lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.txt

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # TODO: add codecov for our mypy plugin
      - name: Check linters
        run: |
          nox -s lint

  mypy:
    name: mypy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.txt

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - uses: actions/cache@v3
        with:
          path: .mypy_cache
          key: ${{ runner.os }}-mypy
          restore-keys: |
            ${{ runner.os }}-mypy

      # TODO: add codecov for our mypy plugin
      - name: Check Mypy
        run: |
          nox -s mypy

  postgres:
    name: postgres
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - python-version: 3.9

    services:
      postgres:
        # Docker Hub image
        image: postgres

        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres

        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install codecov==2.1.11 .[dev]

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # TODO: cache prisma engines

      - name: Run tests
        run: |
          nox -s setup test report --no-error-on-missing-interpreters -- --confcutdir . tests/integrations/postgresql
        env:
          PRISMA_PY_POSTGRES_URL: postgresql://postgres:postgres@localhost:5432/postgres

      - name: Upload coverage
        run: |
          codecov --file coverage.xml
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  docker:
    name: docker
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        docker-platform: ["linux/amd64"]
        # TODO: Uncomment this to add testing support for arm64 and delete
        # the above
        # docker-platform: ["linux/amd64", "linux/arm64"]
        python-os-distro: ["slim-bullseye", "alpine"]
    steps:
      - uses: actions/checkout@v3
      # https://github.com/docker/build-push-action/
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Docker Build
        uses: docker/build-push-action@v3
        # https://github.com/docker/build-push-action/#inputs
        # Test each platform individually for easier testing
        with:
          context: .
          file: tests/Dockerfile
          platforms: "${{ matrix.docker-platform }}"
          build-args: "${{ matrix.python-os-distro }}"

  docker-windows:
    name: docker (windows)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Docker Build
        run: |
          docker build -f tests/windows.Dockerfile -t prisma-client-py .
