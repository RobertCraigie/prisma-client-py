name: Test
on:
  push:
    branches:
      - main
    paths-ignore:
      - "*.md"
      - ".vscode/**"
      - "docs/**"
      - "LICENSE"
      - "mkdocs.yml"
  pull_request:
    paths-ignore:
      - "*.md"
      - ".vscode/**"
      - "docs/**"
      - "LICENSE"
      - "mkdocs.yml"
jobs:
  test:
    name: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: [3.7, 3.8, 3.9, "3.10", "3.11.0-rc.1"]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install codecov==2.1.11 .[dev]

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - uses: actions/cache@v3
        with:
          path: .mypy_cache
          key: ${{ runner.os }}-mypy
          restore-keys: |
            ${{ runner.os }}-mypy

      - name: Setup database
        # for some reason prisma creates the database where the schema is stored
        # but when using the prisma query engine it uses the root directory
        run: |
          python -m prisma db push --schema=tests/data/schema.prisma --skip-generate
          cp tests/data/dev.db dev.db

      - name: Setup coverage
        run: |
          nox -s setup

      - name: Run tests
        run: |
          python scripts/ci.py -s test --no-error-on-missing-interpreters
        env:
          TARGET_PYTHON: ${{ matrix.python-version }}

      - name: Combine coverage
        run: |
          nox -s report

      - name: Upload coverage
        run: |
          codecov --file coverage.xml
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  typesafety:
    name: typesafety
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - python-version: 3.9

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev]

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Run tests
        # TODO: run mypy too
        run: |
          nox -s typesafety-pyright

  lint:
    name: lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U .[dev]

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # TODO: add codecov for our mypy plugin
      - name: Check linters
        run: |
          nox -s lint

  mypy:
    name: mypy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U .[dev]

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - uses: actions/cache@v3
        with:
          path: .mypy_cache
          key: ${{ runner.os }}-mypy
          restore-keys: |
            ${{ runner.os }}-mypy

      # TODO: add codecov for our mypy plugin
      - name: Check Mypy
        run: |
          nox -s mypy

  databases:
    name: ${{ matrix.name }} ${{ matrix.version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: MySQL
            version: '8.0'
            env: MYSQL_URL
            url: mysql://prisma:prisma@localhost:3307/prisma

          - name: SQLite
            version: ''
            env: SQLITE_URL
            url: file:dev.db

          - name: PostgreSQL
            version: '10'
            env: POSTGRESQL_URL
            url: postgresql://postgres:prisma@localhost:5432/postgres

          - name: PostgreSQL
            version: '15'
            env: POSTGRESQL_URL
            url: postgresql://postgres:prisma@localhost:5438/postgres

          - name: MariaDB
            version: '10.0'
            env: MARIADB_URL
            url: mysql://root:prisma@localhost:3308/prisma?connect_timeout=20&socket_timeout=60

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U -r pipelines/requirements/ci.txt .[dev]

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Start ${{ matrix.name }}
        if: matrix.name != 'SQLite'
        run: |
          coverage run -m nox -s databases -- serve ${{ matrix.name }} --version=${{ matrix.version }}

      - name: Run tests
        run: |
          coverage run -m nox -s databases -- test --coverage --databases=${{ matrix.name }}
        env:
          ${{ matrix.env }}: ${{ matrix.url }}
          COVERAGE_FILE: .cache/.coverage.databases

      - name: Combine coverage
        run: |
          nox -s report

      - name: Upload coverage
        run: |
          codecov --file coverage.xml
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  docker:
    name: docker
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        docker-platform: [linux/amd64]
        # TODO: Uncomment this to add testing support for arm64 and delete
        # the above
        # docker-platform: ["linux/amd64", "linux/arm64"]
        # TODO: Uncomment this later, Go-based CLI does not run on Alpine
        # https://github.com/prisma/prisma-client-go/issues/357
        # python-os-distro: [slim-bullseye, alpine]
        python-os-distro: [slim-bullseye]
    steps:
      - uses: actions/checkout@v3
      # https://github.com/docker/build-push-action/
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Docker Build
        uses: docker/build-push-action@v3
        # https://github.com/docker/build-push-action/#inputs
        # Test each platform individually for easier testing
        with:
          context: .
          file: tests/Dockerfile
          platforms: "${{ matrix.docker-platform }}"
          build-args: OS_DISTRO=${{ matrix.python-os-distro }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Note: Windows does not play well with the standard GH Docker + buildx
  # actions
  docker-windows:
    name: docker (windows)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: Docker Build
        # Use --% to allow double hyphen
        # Caching not currently working since we don't use buildx yet, windows
        # support seems poor because of interactions with --privileged
        # --cache-from=type=gha --cache-to=type=gha,mode=max
        run: |
          docker build --% -f tests/windows.Dockerfile -t prisma-client-py .
