datasource db {
  provider = "postgres"
  url      = env("PRISMA_PY_POSTGRES_URL")
}

generator client {
  provider                    = "coverage run -m prisma"
  interface                   = "asyncio"
  recursive_type_depth        = -1
  engineType                  = "binary"
  enable_experimental_decimal = true
}

model User {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  name       String
  role       Role     @default(USER)
  posts      Post[]
  profile    Profile?
}

model Profile {
  id          String @default(cuid())
  description String
  user        User   @relation(fields: [user_id], references: [id])
  user_id     String @unique
}

model Post {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  title      String
  published  Boolean  @default(false)
  views      Int      @default(0)
  author     User?    @relation(fields: [author_id], references: [id])
  author_id  String?
}

model Types {
  id       String @id @default(cuid())
  json_obj Json?  @default("{}")
}

model Lists {
  id           String     @id @default(cuid())
  strings      String[]
  bytes        Bytes[]
  dates        DateTime[]
  bools        Boolean[]
  ints         Int[]
  floats       Float[]
  bigints      BigInt[]
  json_objects Json[]
  roles        Role[]
  decimals     Decimal[]
}

// these models are here for testing different combinations of unique constraints
// we test these models here as testing them in the root tests would increase mypy
// type checking time

model Unique1 {
  name    String
  surname String

  @@unique([name, surname])
}

model Unique2 {
  name    String
  surname String @unique

  @@unique([name, surname])
}

model Unique3 {
  id      String @id @default(cuid())
  name    String
  surname String @unique

  @@unique([name, surname])
}

model Unique4 {
  name    String
  surname String

  @@unique([name, surname], name: "my_unique")
}

model Unique5 {
  name       String
  middlename String
  surname    String

  @@unique([name, middlename, surname])
}

model Unique6 {
  name String
  role Role

  @@unique([name, role])
}

model Id1 {
  name    String
  surname String

  @@id([name, surname])
}

model Id2 {
  name    String
  surname String @unique

  @@id([name, surname])
}

model Id3 {
  name    String
  surname String

  @@id([name, surname], name: "my_id")
}

model Id4 {
  name       String
  middlename String
  surname    String

  @@id([name, middlename, surname])
}

model Id5 {
  name String
  role Role

  @@unique([name, role])
}

enum Role {
  USER
  ADMIN
  EDITOR
}
