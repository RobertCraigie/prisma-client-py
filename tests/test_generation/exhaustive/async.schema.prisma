// NOTE: modified from https://github.com/prisma/prisma/blob/master/src/packages/client/src/__tests__/integration/happy/exhaustive-schema/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator db {
  provider                    = "prisma-client-py"
  interface                   = "asyncio"
  recursive_type_depth        = 3
  output                      = "../../../.tests_cache/generation/exhaustive/__prisma_async_output__/prisma"
  enable_experimental_decimal = true
  partial_type_generator      = "tests/test_generation/exhaustive/partials.py"
}

/// Post model documentation
model Post {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  title      String
  content    String?

  /// Has the post been made public yet?
  published Boolean @default(false)

  /// Relation to the User model
  /// Second line comment with ' and "
  author    User @relation(fields: [author_id], references: [id])
  author_id Int
}

/// User model documentation
///
/// Third line comment
model User {
  id               Int             @id @default(autoincrement())
  email            String          @unique
  int              Int
  optional_int     Int?
  float            Float
  optional_float   Float?
  string           String
  optional_string  String?
  enum             ABeautifulEnum
  optional_enum    ABeautifulEnum?
  boolean          Boolean
  optional_boolean Boolean?
  posts            Post[]
}

model M {
  id               Int             @id @default(autoincrement())
  n                N[]
  int              Int
  optional_int     Int?
  float            Float
  optional_float   Float?
  string           String
  optional_string  String?
  enum             ABeautifulEnum
  optional_enum    ABeautifulEnum?
  boolean          Boolean
  optional_boolean Boolean?
}

model N {
  id               Int             @id @default(autoincrement())
  m                M[]
  int              Int
  optional_int     Int?
  float            Float
  optional_float   Float?
  string           String
  optional_string  String?
  json_            Json
  optional_json    Json?
  enum             ABeautifulEnum
  optional_enum    ABeautifulEnum?
  boolean          Boolean
  optional_boolean Boolean?
}

/// Also used to test model schema extensions
///
/// @Python(instance_name: "one_optional")
model OneOptional {
  id               Int             @id @default(autoincrement())
  many             ManyRequired[]
  int              Int
  optional_int     Int?
  float            Float
  optional_float   Float?
  string           String
  optional_string  String?
  enum             ABeautifulEnum
  optional_enum    ABeautifulEnum?
  boolean          Boolean
  optional_boolean Boolean?
}

model ManyRequired {
  id  Int          @id @default(autoincrement())
  one OneOptional? @relation(fields: [one_optional_id], references: [id])

  one_optional_id  Int?
  int              Int
  optional_int     Int?
  float            Float
  optional_float   Float?
  string           String
  optional_string  String?
  enum             ABeautifulEnum
  optional_enum    ABeautifulEnum?
  boolean          Boolean
  optional_boolean Boolean?
}

model Lists {
  id           String     @id @default(cuid())
  strings      String[]
  bytes        Bytes[]
  dates        DateTime[]
  bools        Boolean[]
  ints         Int[]
  floats       Float[]
  bigints      BigInt[]
  json_objects Json[]
  decimals     Decimal[]
}

enum ABeautifulEnum {
  A
  B
  C
}

model A {
  email    String         @unique
  name     String?
  int      Int            @db.Integer
  sInt     Int            @db.SmallInt
  inc_int  Int            @default(autoincrement()) @db.Integer
  inc_sInt Int            @default(autoincrement()) @db.SmallInt
  bInt     BigInt         @db.BigInt
  inc_bInt BigInt         @default(autoincrement()) @db.BigInt
  enum     ABeautifulEnum @default(A)

  @@unique([name, email, enum])
}

model B {
  id       String  @id @default(cuid())
  float    Float   @db.Real
  d_float  Float   @db.DoublePrecision
  decFloat Decimal @db.Decimal(2, 1)
  numFloat Decimal @db.Decimal(10, 6)

  @@unique([float, d_float], name: "my_constraint")
}

model C {
  char   String @db.Char(10)
  v_char String @db.VarChar(11)
  text   String @db.Text
  bit    String @db.Bit(4)
  v_bit  String @db.VarBit(5)
  uuid   String @db.Uuid

  @@id([char, text], name: "my_id")
}

model D {
  id     String  @id @default(cuid())
  bool   Boolean @db.Boolean
  xml    String  @db.Xml
  json_  Json    @db.Json
  jsonb  Json    @db.JsonB
  binary Bytes   @db.ByteA
}

model E {
  id   String   @id @default(cuid())
  date DateTime @db.Date
  time DateTime @db.Time(3)
  ts   DateTime @db.Timestamp(3)
}
