'''
# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template actions.py.jinja --
from typing import TypeVar
import warnings
import functools as _functools

from . import types, errors, bases, _parsers
from ._types import NotGiven, NotGivenOr, NOT_GIVEN
from ._helpers import is_mapping
from ._compat import model_parse

if TYPE_CHECKING:
    from .client import Client
    from .bases import _PrismaModel
    from .engine.json.serializer import SelectionSet


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class PostActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
        '_model_parser',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model
        self._model_parser = _functools.partial(model_parse, self._model)

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Post]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = Post.prisma().query_raw(
            'SELECT * FROM Post WHERE id = $1',
            1103527590,
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Post
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = Post.prisma().query_first(
            'SELECT * FROM Post WHERE created_at = $1',
            datetime.datetime.utcnow(),
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.PostCreateInput,
        include: NotGivenOr[types.PostInclude | None] = NOT_GIVEN,
    ) -> _PrismaModelT:
        """Create a new Post record.

        Parameters
        ----------
        data
            Post record data
        include
            Specifies which relations should be loaded on the returned Post model

        Returns
        -------
        prisma.models.Post
            The created Post record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Post record from just the required fields
        post = Post.prisma().create(
            data={
                # data to create a Post record
                'title': 'dhheabfhf',
                'author_id': 662824084,
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='create',
            arguments={
                'data': data,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def create_many(
        self,
        data: List[types.PostCreateWithoutRelationsInput],
        *,
        skip_duplicates: NotGivenOr[bool | None] = NOT_GIVEN,
    ) -> int:
        """Create multiple Post records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Post record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = Post.prisma().create_many(
            data=[
                {
                    # data to create a Post record
                    'title': 'bbehjachib',
                    'author_id': 2035015474,
                },
                {
                    # data to create a Post record
                    'title': 'dgiiaaijj',
                    'author_id': 1508029952,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        return self._client._execute_json_proto(
            method='create_many',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            data_path=['count'],
            model=self._model,
            parser=int,
        )

    def delete(
        self,
        where: types.PostWhereUniqueInput,
        include: NotGivenOr[types.PostInclude | None] = NOT_GIVEN,
    ) -> Optional[_PrismaModelT]:
        """Delete a single Post record.

        Parameters
        ----------
        where
            Post filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Post model

        Returns
        -------
        prisma.models.Post
            The deleted Post record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        post = Post.prisma().delete(
            where={
                'id': 486256185,
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='delete',
            arguments={
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
            ignore_exceptions=(errors.RecordNotFoundError,)
        )

    def find_unique(
        self,
        where: types.PostWhereUniqueInput,
        include: NotGivenOr[types.PostInclude | None] = NOT_GIVEN
    ) -> Optional[_PrismaModelT]:
        """Find a unique Post record.

        Parameters
        ----------
        where
            Post filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Post model

        Returns
        -------
        prisma.models.Post
            The found Post record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        post = Post.prisma().find_unique(
            where={
                'id': 1062517886,
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_unique',
            arguments={
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=_parsers.allow_none(self._model_parser),
        )

    def find_unique_or_raise(
        self,
        where: types.PostWhereUniqueInput,
        include: NotGivenOr[Optional[types.PostInclude]] = NOT_GIVEN
    ) -> _PrismaModelT:
        """Find a unique Post record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Post filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Post model

        Returns
        -------
        prisma.models.Post
            The found Post record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        post = Post.prisma().find_unique_or_raise(
            where={
                'id': 267834847,
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_unique_or_raise',
            arguments={
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def find_many(
        self,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.PostWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.PostWhereUniqueInput | None] = NOT_GIVEN,
        include: NotGivenOr[types.PostInclude | None] = NOT_GIVEN,
        order: NotGivenOr[types.PostOrderByInput | List[types.PostOrderByInput] | None] = NOT_GIVEN,
        distinct: NotGivenOr[List[types.PostScalarFieldKeys] | None] = NOT_GIVEN,
    ) -> List[_PrismaModelT]:
        """Find multiple Post records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Post records returned
        skip
            Ignore the first N results
        where
            Post filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Post model
        order
            Order the returned Post records by any field
        distinct
            Filter Post records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Post]
            The list of all Post records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Post records
        posts = Post.prisma().find_many(take=10)

        # find the first 5 Post records ordered by the title field
        posts = Post.prisma().find_many(
            take=5,
            order={
                'title': 'desc',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_many',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
            data_path=[],
            model=self._model,
            parser=_parsers.as_list(self._model_parser),
        )

    def find_first(
        self,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.PostWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.PostWhereUniqueInput | None] = NOT_GIVEN,
        include: NotGivenOr[types.PostInclude | None] = NOT_GIVEN,
        order: NotGivenOr[types.PostOrderByInput | List[types.PostOrderByInput] | None] = NOT_GIVEN,
        distinct: NotGivenOr[List[types.PostScalarFieldKeys] | None] = NOT_GIVEN,
    ) -> Optional[_PrismaModelT]:
        """Find a single Post record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Post filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Post model
        order
            Order the returned Post records by any field
        distinct
            Filter Post records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Post
            The first Post record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Post record ordered by the content field
        post = Post.prisma().find_first(
            skip=1,
            order={
                'content': 'desc',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_first',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
            data_path=[],
            model=self._model,
            parser=_parsers.allow_none(self._model_parser),
        )

    def find_first_or_raise(
        self,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.PostWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.PostWhereUniqueInput | None] = NOT_GIVEN,
        include: NotGivenOr[types.PostInclude | None] = NOT_GIVEN,
        order: NotGivenOr[types.PostOrderByInput | list[types.PostOrderByInput] | None] = NOT_GIVEN,
        distinct: NotGivenOr[list[types.PostScalarFieldKeys] | None] = NOT_GIVEN,
    ) -> _PrismaModelT:
        """Find a single Post record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Post filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Post model
        order
            Order the returned Post records by any field
        distinct
            Filter Post records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Post
            The first Post record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Post record ordered by the published field
        post = Post.prisma().find_first_or_raise(
            skip=1,
            order={
                'published': 'desc',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_first_or_raise',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def update(
        self,
        data: types.PostUpdateInput,
        where: types.PostWhereUniqueInput,
        include: NotGivenOr[types.PostInclude | None] = NOT_GIVEN
    ) -> Optional[_PrismaModelT]:
        """Update a single Post record.

        Parameters
        ----------
        data
            Post record data specifying what to update
        where
            Post filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Post model

        Returns
        -------
        prisma.models.Post
            The updated Post record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        post = Post.prisma().update(
            where={
                'id': 180171308,
            },
            data={
                # data to update the Post record to
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='update',
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
            ignore_exceptions=(errors.RecordNotFoundError,),
        )

    def upsert(
        self,
        where: types.PostWhereUniqueInput,
        data: types.PostUpsertInput,
        include: NotGivenOr[types.PostInclude | None] = NOT_GIVEN,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Post filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Post model

        Returns
        -------
        prisma.models.Post
            The created or updated Post record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        post = Post.prisma().upsert(
            where={
                'id': 836760821,
            },
            data={
                'create': {
                    'id': 836760821,
                    'title': 'dgiiaaijj',
                    'author_id': 1508029952,
                },
                'update': {
                    'title': 'dgiiaaijj',
                    'author_id': 1508029952,
                },
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='upsert',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def update_many(
        self,
        data: types.PostUpdateManyMutationInput,
        where: types.PostWhereInput,
    ) -> int:
        """Update multiple Post records

        Parameters
        ----------
        data
            Post data to update the selected Post records to
        where
            Filter to select the Post records to update

        Returns
        -------
        int
            The total number of Post records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Post records
        total = Post.prisma().update_many(
            data={
                'author_id': 595337866
            },
            where={}
        )
        ```
        """
        return self._client._execute_json_proto(
            method='update_many',
            arguments={
                'data': data,
                'where': where,
            },
            data_path=['count'],
            model=self._model,
            parser=int,
        )

    @overload
    def count(
        self,
        select: NotGivenOr[None] = NOT_GIVEN,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.PostWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.PostWhereUniqueInput | None] = NOT_GIVEN,
    ) -> int:
        """Count the number of Post records present in the database

        Parameters
        ----------
        select
            Select the Post fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Post filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.PostCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = Post.prisma().count()

        # results: prisma.types.PostCountAggregateOutput
        results = Post.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.PostCountAggregateInput,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.PostWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.PostWhereUniqueInput | None] = NOT_GIVEN,
    ) -> types.PostCountAggregateOutput:
        ...

    def count(
        self,
        select: NotGivenOr[types.PostCountAggregateInput | None] = NOT_GIVEN,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.PostWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.PostWhereUniqueInput | None] = NOT_GIVEN,
    ) -> Union[int, types.PostCountAggregateOutput]:
        """Count the number of Post records present in the database

        Parameters
        ----------
        select
            Select the Post fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Post filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.PostCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = Post.prisma().count()

        # results: prisma.types.PostCountAggregateOutput
        results = Post.prisma().count(
            select={
                '_all': True,
                'created_at': True,
            },
        )
        ```
        """

        selection = select or {'_all': True}

        def parser(value: Any) -> int | types.PostCountAggregateOutput:
            if is_mapping(select):
                return cast(types.PostCountAggregateOutput, value['_count'])
            return int(value['_count']['_all'])

        return self._client._execute_json_proto(
            method='count',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
                'select': {
                    '_count': {
                        'select': selection,
                    },
                },
            },
            data_path=[],
            model=self._model,
            parser=parser,
        )

    def delete_many(
        self,
        where: NotGivenOr[types.PostWhereInput | None] = NOT_GIVEN
    ) -> int:
        """Delete multiple Post records.

        Parameters
        ----------
        where
            Optional Post filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Post records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Post records
        total = Post.prisma().delete_many()
        ```
        """
        return self._client._execute_json_proto(
            method='delete_many',
            arguments={
                'where': where,
            },
            data_path=['count'],
            model=self._model,
            parser=int,
        )

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: list['types.PostScalarFieldKeys'],
        *,
        where: NotGivenOr['types.PostWhereInput | None'] = NOT_GIVEN,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        avg: NotGivenOr['types.PostAvgAggregateInput | None'] = NOT_GIVEN,
        sum: NotGivenOr['types.PostSumAggregateInput | None'] = NOT_GIVEN,
        min: NotGivenOr['types.PostMinAggregateInput | None'] = NOT_GIVEN,
        max: NotGivenOr['types.PostMaxAggregateInput | None'] = NOT_GIVEN,
        having: NotGivenOr['types.PostScalarWhereWithAggregatesInput | None'] = NOT_GIVEN,
        count: NotGivenOr['bool | types.PostCountAggregateInput | None'] = NOT_GIVEN,
        order: NotGivenOr[Mapping['types.PostScalarFieldKeys', 'types.SortOrder'] | list[Mapping['types.PostScalarFieldKeys', 'types.SortOrder']] | None] = NOT_GIVEN,
    ) -> list['types.PostGroupByOutput']:
        """Group Post records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Post fields to group records by
        where
            Post filter to select records
        take
            Limit the maximum number of Post records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.PostGroupByOutput]
            A list of dictionaries representing the Post record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Post records by title values
        # and count how many records are in each group
        results = Post.prisma().group_by(
            ['title'],
            count=True,
        )
        ```
        """
        if not order:
            if take:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        selection: SelectionSet = {key: True for key in by}
        if avg:
            selection['_avg'] = {'select': avg}

        if min:
            selection['_min'] = {'select': min}

        if sum:
            selection['_sum'] = {'select': sum}

        if max:
            selection['_max'] = {'select': max}

        if count:
            if count is True:
                selection['_count'] = {'select': {'_all': True}}
            elif isinstance(count, dict):
                selection['_count'] = {'select': count}

        return self._client._execute_json_proto(
            method='group_by',
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
                'select': selection,
            },
            model=self._model,
            data_path=[],
            parser=lambda v: v,
        )


class UserActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
        '_model_parser',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model
        self._model_parser = _functools.partial(model_parse, self._model)

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.User]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = User.prisma().query_raw(
            'SELECT * FROM User WHERE id = $1',
            790425851,
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.User
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = User.prisma().query_first(
            'SELECT * FROM User WHERE email = $1',
            'cbbbjbfcii',
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.UserCreateInput,
        include: NotGivenOr[types.UserInclude | None] = NOT_GIVEN,
    ) -> _PrismaModelT:
        """Create a new User record.

        Parameters
        ----------
        data
            User record data
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The created User record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a User record from just the required fields
        user = User.prisma().create(
            data={
                # data to create a User record
                'email': 'bbejhfidcb',
                'int': 1644289366,
                'float': 1388290519.164741,
                'string': 'bghffegacj',
                'enum': enums.ABeautifulEnum.A,
                'boolean': True,
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='create',
            arguments={
                'data': data,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def create_many(
        self,
        data: List[types.UserCreateWithoutRelationsInput],
        *,
        skip_duplicates: NotGivenOr[bool | None] = NOT_GIVEN,
    ) -> int:
        """Create multiple User records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of User record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = User.prisma().create_many(
            data=[
                {
                    # data to create a User record
                    'email': 'dcgchcbbf',
                    'int': 1343201072,
                    'float': 675780521.74496,
                    'string': 'bjgjgibgbf',
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': True,
                },
                {
                    # data to create a User record
                    'email': 'igbehcbab',
                    'int': 1303003706,
                    'float': 1686638315.200043,
                    'string': 'bigibebcib',
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': True,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        return self._client._execute_json_proto(
            method='create_many',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            data_path=['count'],
            model=self._model,
            parser=int,
        )

    def delete(
        self,
        where: types.UserWhereUniqueInput,
        include: NotGivenOr[types.UserInclude | None] = NOT_GIVEN,
    ) -> Optional[_PrismaModelT]:
        """Delete a single User record.

        Parameters
        ----------
        where
            User filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The deleted User record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = User.prisma().delete(
            where={
                'id': 1448521415,
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='delete',
            arguments={
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
            ignore_exceptions=(errors.RecordNotFoundError,)
        )

    def find_unique(
        self,
        where: types.UserWhereUniqueInput,
        include: NotGivenOr[types.UserInclude | None] = NOT_GIVEN
    ) -> Optional[_PrismaModelT]:
        """Find a unique User record.

        Parameters
        ----------
        where
            User filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The found User record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = User.prisma().find_unique(
            where={
                'id': 1628650740,
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_unique',
            arguments={
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=_parsers.allow_none(self._model_parser),
        )

    def find_unique_or_raise(
        self,
        where: types.UserWhereUniqueInput,
        include: NotGivenOr[Optional[types.UserInclude]] = NOT_GIVEN
    ) -> _PrismaModelT:
        """Find a unique User record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            User filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The found User record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = User.prisma().find_unique_or_raise(
            where={
                'id': 1249606685,
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_unique_or_raise',
            arguments={
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def find_many(
        self,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.UserWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.UserWhereUniqueInput | None] = NOT_GIVEN,
        include: NotGivenOr[types.UserInclude | None] = NOT_GIVEN,
        order: NotGivenOr[types.UserOrderByInput | List[types.UserOrderByInput] | None] = NOT_GIVEN,
        distinct: NotGivenOr[List[types.UserScalarFieldKeys] | None] = NOT_GIVEN,
    ) -> List[_PrismaModelT]:
        """Find multiple User records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of User records returned
        skip
            Ignore the first N results
        where
            User filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned User model
        order
            Order the returned User records by any field
        distinct
            Filter User records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.User]
            The list of all User records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 User records
        users = User.prisma().find_many(take=10)

        # find the first 5 User records ordered by the int field
        users = User.prisma().find_many(
            take=5,
            order={
                'int': 'desc',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_many',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
            data_path=[],
            model=self._model,
            parser=_parsers.as_list(self._model_parser),
        )

    def find_first(
        self,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.UserWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.UserWhereUniqueInput | None] = NOT_GIVEN,
        include: NotGivenOr[types.UserInclude | None] = NOT_GIVEN,
        order: NotGivenOr[types.UserOrderByInput | List[types.UserOrderByInput] | None] = NOT_GIVEN,
        distinct: NotGivenOr[List[types.UserScalarFieldKeys] | None] = NOT_GIVEN,
    ) -> Optional[_PrismaModelT]:
        """Find a single User record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            User filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned User model
        order
            Order the returned User records by any field
        distinct
            Filter User records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.User
            The first User record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second User record ordered by the optional_int field
        user = User.prisma().find_first(
            skip=1,
            order={
                'optional_int': 'desc',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_first',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
            data_path=[],
            model=self._model,
            parser=_parsers.allow_none(self._model_parser),
        )

    def find_first_or_raise(
        self,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.UserWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.UserWhereUniqueInput | None] = NOT_GIVEN,
        include: NotGivenOr[types.UserInclude | None] = NOT_GIVEN,
        order: NotGivenOr[types.UserOrderByInput | list[types.UserOrderByInput] | None] = NOT_GIVEN,
        distinct: NotGivenOr[list[types.UserScalarFieldKeys] | None] = NOT_GIVEN,
    ) -> _PrismaModelT:
        """Find a single User record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            User filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned User model
        order
            Order the returned User records by any field
        distinct
            Filter User records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.User
            The first User record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second User record ordered by the float field
        user = User.prisma().find_first_or_raise(
            skip=1,
            order={
                'float': 'desc',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_first_or_raise',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def update(
        self,
        data: types.UserUpdateInput,
        where: types.UserWhereUniqueInput,
        include: NotGivenOr[types.UserInclude | None] = NOT_GIVEN
    ) -> Optional[_PrismaModelT]:
        """Update a single User record.

        Parameters
        ----------
        data
            User record data specifying what to update
        where
            User filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The updated User record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = User.prisma().update(
            where={
                'id': 835903122,
            },
            data={
                # data to update the User record to
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='update',
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
            ignore_exceptions=(errors.RecordNotFoundError,),
        )

    def upsert(
        self,
        where: types.UserWhereUniqueInput,
        data: types.UserUpsertInput,
        include: NotGivenOr[types.UserInclude | None] = NOT_GIVEN,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            User filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The created or updated User record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = User.prisma().upsert(
            where={
                'id': 763719779,
            },
            data={
                'create': {
                    'id': 763719779,
                    'email': 'igbehcbab',
                    'int': 1303003706,
                    'float': 1686638315.200043,
                    'string': 'bigibebcib',
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': True,
                },
                'update': {
                    'email': 'igbehcbab',
                    'int': 1303003706,
                    'float': 1686638315.200043,
                    'string': 'bigibebcib',
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': True,
                },
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='upsert',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def update_many(
        self,
        data: types.UserUpdateManyMutationInput,
        where: types.UserWhereInput,
    ) -> int:
        """Update multiple User records

        Parameters
        ----------
        data
            User data to update the selected User records to
        where
            Filter to select the User records to update

        Returns
        -------
        int
            The total number of User records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all User records
        total = User.prisma().update_many(
            data={
                'optional_float': 429995104.177581
            },
            where={}
        )
        ```
        """
        return self._client._execute_json_proto(
            method='update_many',
            arguments={
                'data': data,
                'where': where,
            },
            data_path=['count'],
            model=self._model,
            parser=int,
        )

    @overload
    def count(
        self,
        select: NotGivenOr[None] = NOT_GIVEN,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.UserWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.UserWhereUniqueInput | None] = NOT_GIVEN,
    ) -> int:
        """Count the number of User records present in the database

        Parameters
        ----------
        select
            Select the User fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            User filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = User.prisma().count()

        # results: prisma.types.UserCountAggregateOutput
        results = User.prisma().count(
            select={
                '_all': True,
                'string': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.UserCountAggregateInput,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.UserWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.UserWhereUniqueInput | None] = NOT_GIVEN,
    ) -> types.UserCountAggregateOutput:
        ...

    def count(
        self,
        select: NotGivenOr[types.UserCountAggregateInput | None] = NOT_GIVEN,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.UserWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.UserWhereUniqueInput | None] = NOT_GIVEN,
    ) -> Union[int, types.UserCountAggregateOutput]:
        """Count the number of User records present in the database

        Parameters
        ----------
        select
            Select the User fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            User filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = User.prisma().count()

        # results: prisma.types.UserCountAggregateOutput
        results = User.prisma().count(
            select={
                '_all': True,
                'optional_string': True,
            },
        )
        ```
        """

        selection = select or {'_all': True}

        def parser(value: Any) -> int | types.UserCountAggregateOutput:
            if is_mapping(select):
                return cast(types.UserCountAggregateOutput, value['_count'])
            return int(value['_count']['_all'])

        return self._client._execute_json_proto(
            method='count',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
                'select': {
                    '_count': {
                        'select': selection,
                    },
                },
            },
            data_path=[],
            model=self._model,
            parser=parser,
        )

    def delete_many(
        self,
        where: NotGivenOr[types.UserWhereInput | None] = NOT_GIVEN
    ) -> int:
        """Delete multiple User records.

        Parameters
        ----------
        where
            Optional User filter to find the records to be deleted

        Returns
        -------
        int
            The total number of User records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all User records
        total = User.prisma().delete_many()
        ```
        """
        return self._client._execute_json_proto(
            method='delete_many',
            arguments={
                'where': where,
            },
            data_path=['count'],
            model=self._model,
            parser=int,
        )

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: list['types.UserScalarFieldKeys'],
        *,
        where: NotGivenOr['types.UserWhereInput | None'] = NOT_GIVEN,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        avg: NotGivenOr['types.UserAvgAggregateInput | None'] = NOT_GIVEN,
        sum: NotGivenOr['types.UserSumAggregateInput | None'] = NOT_GIVEN,
        min: NotGivenOr['types.UserMinAggregateInput | None'] = NOT_GIVEN,
        max: NotGivenOr['types.UserMaxAggregateInput | None'] = NOT_GIVEN,
        having: NotGivenOr['types.UserScalarWhereWithAggregatesInput | None'] = NOT_GIVEN,
        count: NotGivenOr['bool | types.UserCountAggregateInput | None'] = NOT_GIVEN,
        order: NotGivenOr[Mapping['types.UserScalarFieldKeys', 'types.SortOrder'] | list[Mapping['types.UserScalarFieldKeys', 'types.SortOrder']] | None] = NOT_GIVEN,
    ) -> list['types.UserGroupByOutput']:
        """Group User records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar User fields to group records by
        where
            User filter to select records
        take
            Limit the maximum number of User records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.UserGroupByOutput]
            A list of dictionaries representing the User record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group User records by enum values
        # and count how many records are in each group
        results = User.prisma().group_by(
            ['enum'],
            count=True,
        )
        ```
        """
        if not order:
            if take:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        selection: SelectionSet = {key: True for key in by}
        if avg:
            selection['_avg'] = {'select': avg}

        if min:
            selection['_min'] = {'select': min}

        if sum:
            selection['_sum'] = {'select': sum}

        if max:
            selection['_max'] = {'select': max}

        if count:
            if count is True:
                selection['_count'] = {'select': {'_all': True}}
            elif isinstance(count, dict):
                selection['_count'] = {'select': count}

        return self._client._execute_json_proto(
            method='group_by',
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
                'select': selection,
            },
            model=self._model,
            data_path=[],
            parser=lambda v: v,
        )


class MActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
        '_model_parser',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model
        self._model_parser = _functools.partial(model_parse, self._model)

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.M]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = M.prisma().query_raw(
            'SELECT * FROM M WHERE id = $1',
            893145566,
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.M
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = M.prisma().query_first(
            'SELECT * FROM M WHERE int = $1',
            995405759,
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.MCreateInput,
        include: NotGivenOr[types.MInclude | None] = NOT_GIVEN,
    ) -> _PrismaModelT:
        """Create a new M record.

        Parameters
        ----------
        data
            M record data
        include
            Specifies which relations should be loaded on the returned M model

        Returns
        -------
        prisma.models.M
            The created M record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a M record from just the required fields
        m = M.prisma().create(
            data={
                # data to create a M record
                'int': 2102736524,
                'float': 271520213.45663,
                'string': 'caficfigfb',
                'enum': enums.ABeautifulEnum.A,
                'boolean': True,
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='create',
            arguments={
                'data': data,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def create_many(
        self,
        data: List[types.MCreateWithoutRelationsInput],
        *,
        skip_duplicates: NotGivenOr[bool | None] = NOT_GIVEN,
    ) -> int:
        """Create multiple M records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of M record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = M.prisma().create_many(
            data=[
                {
                    # data to create a M record
                    'int': 878442065,
                    'float': 1675280054.162757,
                    'string': 'cafeiaccbc',
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': False,
                },
                {
                    # data to create a M record
                    'int': 684462146,
                    'float': 1625503827.52182,
                    'string': 'bcggadccgf',
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': True,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        return self._client._execute_json_proto(
            method='create_many',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            data_path=['count'],
            model=self._model,
            parser=int,
        )

    def delete(
        self,
        where: types.MWhereUniqueInput,
        include: NotGivenOr[types.MInclude | None] = NOT_GIVEN,
    ) -> Optional[_PrismaModelT]:
        """Delete a single M record.

        Parameters
        ----------
        where
            M filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned M model

        Returns
        -------
        prisma.models.M
            The deleted M record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        m = M.prisma().delete(
            where={
                'id': 2053047983,
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='delete',
            arguments={
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
            ignore_exceptions=(errors.RecordNotFoundError,)
        )

    def find_unique(
        self,
        where: types.MWhereUniqueInput,
        include: NotGivenOr[types.MInclude | None] = NOT_GIVEN
    ) -> Optional[_PrismaModelT]:
        """Find a unique M record.

        Parameters
        ----------
        where
            M filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned M model

        Returns
        -------
        prisma.models.M
            The found M record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        m = M.prisma().find_unique(
            where={
                'id': 685333180,
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_unique',
            arguments={
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=_parsers.allow_none(self._model_parser),
        )

    def find_unique_or_raise(
        self,
        where: types.MWhereUniqueInput,
        include: NotGivenOr[Optional[types.MInclude]] = NOT_GIVEN
    ) -> _PrismaModelT:
        """Find a unique M record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            M filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned M model

        Returns
        -------
        prisma.models.M
            The found M record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        m = M.prisma().find_unique_or_raise(
            where={
                'id': 127474245,
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_unique_or_raise',
            arguments={
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def find_many(
        self,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.MWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.MWhereUniqueInput | None] = NOT_GIVEN,
        include: NotGivenOr[types.MInclude | None] = NOT_GIVEN,
        order: NotGivenOr[types.MOrderByInput | List[types.MOrderByInput] | None] = NOT_GIVEN,
        distinct: NotGivenOr[List[types.MScalarFieldKeys] | None] = NOT_GIVEN,
    ) -> List[_PrismaModelT]:
        """Find multiple M records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of M records returned
        skip
            Ignore the first N results
        where
            M filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned M model
        order
            Order the returned M records by any field
        distinct
            Filter M records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.M]
            The list of all M records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 M records
        ms = M.prisma().find_many(take=10)

        # find the first 5 M records ordered by the optional_int field
        ms = M.prisma().find_many(
            take=5,
            order={
                'optional_int': 'desc',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_many',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
            data_path=[],
            model=self._model,
            parser=_parsers.as_list(self._model_parser),
        )

    def find_first(
        self,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.MWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.MWhereUniqueInput | None] = NOT_GIVEN,
        include: NotGivenOr[types.MInclude | None] = NOT_GIVEN,
        order: NotGivenOr[types.MOrderByInput | List[types.MOrderByInput] | None] = NOT_GIVEN,
        distinct: NotGivenOr[List[types.MScalarFieldKeys] | None] = NOT_GIVEN,
    ) -> Optional[_PrismaModelT]:
        """Find a single M record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            M filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned M model
        order
            Order the returned M records by any field
        distinct
            Filter M records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.M
            The first M record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second M record ordered by the float field
        m = M.prisma().find_first(
            skip=1,
            order={
                'float': 'desc',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_first',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
            data_path=[],
            model=self._model,
            parser=_parsers.allow_none(self._model_parser),
        )

    def find_first_or_raise(
        self,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.MWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.MWhereUniqueInput | None] = NOT_GIVEN,
        include: NotGivenOr[types.MInclude | None] = NOT_GIVEN,
        order: NotGivenOr[types.MOrderByInput | list[types.MOrderByInput] | None] = NOT_GIVEN,
        distinct: NotGivenOr[list[types.MScalarFieldKeys] | None] = NOT_GIVEN,
    ) -> _PrismaModelT:
        """Find a single M record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            M filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned M model
        order
            Order the returned M records by any field
        distinct
            Filter M records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.M
            The first M record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second M record ordered by the optional_float field
        m = M.prisma().find_first_or_raise(
            skip=1,
            order={
                'optional_float': 'desc',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_first_or_raise',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def update(
        self,
        data: types.MUpdateInput,
        where: types.MWhereUniqueInput,
        include: NotGivenOr[types.MInclude | None] = NOT_GIVEN
    ) -> Optional[_PrismaModelT]:
        """Update a single M record.

        Parameters
        ----------
        data
            M record data specifying what to update
        where
            M filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned M model

        Returns
        -------
        prisma.models.M
            The updated M record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        m = M.prisma().update(
            where={
                'id': 948921754,
            },
            data={
                # data to update the M record to
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='update',
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
            ignore_exceptions=(errors.RecordNotFoundError,),
        )

    def upsert(
        self,
        where: types.MWhereUniqueInput,
        data: types.MUpsertInput,
        include: NotGivenOr[types.MInclude | None] = NOT_GIVEN,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            M filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned M model

        Returns
        -------
        prisma.models.M
            The created or updated M record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        m = M.prisma().upsert(
            where={
                'id': 1964990155,
            },
            data={
                'create': {
                    'id': 1964990155,
                    'int': 684462146,
                    'float': 1625503827.52182,
                    'string': 'bcggadccgf',
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': True,
                },
                'update': {
                    'int': 684462146,
                    'float': 1625503827.52182,
                    'string': 'bcggadccgf',
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': True,
                },
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='upsert',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def update_many(
        self,
        data: types.MUpdateManyMutationInput,
        where: types.MWhereInput,
    ) -> int:
        """Update multiple M records

        Parameters
        ----------
        data
            M data to update the selected M records to
        where
            Filter to select the M records to update

        Returns
        -------
        int
            The total number of M records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all M records
        total = M.prisma().update_many(
            data={
                'string': 'bcciijbibg'
            },
            where={}
        )
        ```
        """
        return self._client._execute_json_proto(
            method='update_many',
            arguments={
                'data': data,
                'where': where,
            },
            data_path=['count'],
            model=self._model,
            parser=int,
        )

    @overload
    def count(
        self,
        select: NotGivenOr[None] = NOT_GIVEN,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.MWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.MWhereUniqueInput | None] = NOT_GIVEN,
    ) -> int:
        """Count the number of M records present in the database

        Parameters
        ----------
        select
            Select the M fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            M filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.MCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = M.prisma().count()

        # results: prisma.types.MCountAggregateOutput
        results = M.prisma().count(
            select={
                '_all': True,
                'optional_string': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.MCountAggregateInput,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.MWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.MWhereUniqueInput | None] = NOT_GIVEN,
    ) -> types.MCountAggregateOutput:
        ...

    def count(
        self,
        select: NotGivenOr[types.MCountAggregateInput | None] = NOT_GIVEN,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.MWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.MWhereUniqueInput | None] = NOT_GIVEN,
    ) -> Union[int, types.MCountAggregateOutput]:
        """Count the number of M records present in the database

        Parameters
        ----------
        select
            Select the M fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            M filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.MCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = M.prisma().count()

        # results: prisma.types.MCountAggregateOutput
        results = M.prisma().count(
            select={
                '_all': True,
                'enum': True,
            },
        )
        ```
        """

        selection = select or {'_all': True}

        def parser(value: Any) -> int | types.MCountAggregateOutput:
            if is_mapping(select):
                return cast(types.MCountAggregateOutput, value['_count'])
            return int(value['_count']['_all'])

        return self._client._execute_json_proto(
            method='count',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
                'select': {
                    '_count': {
                        'select': selection,
                    },
                },
            },
            data_path=[],
            model=self._model,
            parser=parser,
        )

    def delete_many(
        self,
        where: NotGivenOr[types.MWhereInput | None] = NOT_GIVEN
    ) -> int:
        """Delete multiple M records.

        Parameters
        ----------
        where
            Optional M filter to find the records to be deleted

        Returns
        -------
        int
            The total number of M records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all M records
        total = M.prisma().delete_many()
        ```
        """
        return self._client._execute_json_proto(
            method='delete_many',
            arguments={
                'where': where,
            },
            data_path=['count'],
            model=self._model,
            parser=int,
        )

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: list['types.MScalarFieldKeys'],
        *,
        where: NotGivenOr['types.MWhereInput | None'] = NOT_GIVEN,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        avg: NotGivenOr['types.MAvgAggregateInput | None'] = NOT_GIVEN,
        sum: NotGivenOr['types.MSumAggregateInput | None'] = NOT_GIVEN,
        min: NotGivenOr['types.MMinAggregateInput | None'] = NOT_GIVEN,
        max: NotGivenOr['types.MMaxAggregateInput | None'] = NOT_GIVEN,
        having: NotGivenOr['types.MScalarWhereWithAggregatesInput | None'] = NOT_GIVEN,
        count: NotGivenOr['bool | types.MCountAggregateInput | None'] = NOT_GIVEN,
        order: NotGivenOr[Mapping['types.MScalarFieldKeys', 'types.SortOrder'] | list[Mapping['types.MScalarFieldKeys', 'types.SortOrder']] | None] = NOT_GIVEN,
    ) -> list['types.MGroupByOutput']:
        """Group M records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar M fields to group records by
        where
            M filter to select records
        take
            Limit the maximum number of M records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.MGroupByOutput]
            A list of dictionaries representing the M record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group M records by optional_enum values
        # and count how many records are in each group
        results = M.prisma().group_by(
            ['optional_enum'],
            count=True,
        )
        ```
        """
        if not order:
            if take:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        selection: SelectionSet = {key: True for key in by}
        if avg:
            selection['_avg'] = {'select': avg}

        if min:
            selection['_min'] = {'select': min}

        if sum:
            selection['_sum'] = {'select': sum}

        if max:
            selection['_max'] = {'select': max}

        if count:
            if count is True:
                selection['_count'] = {'select': {'_all': True}}
            elif isinstance(count, dict):
                selection['_count'] = {'select': count}

        return self._client._execute_json_proto(
            method='group_by',
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
                'select': selection,
            },
            model=self._model,
            data_path=[],
            parser=lambda v: v,
        )


class NActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
        '_model_parser',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model
        self._model_parser = _functools.partial(model_parse, self._model)

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.N]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = N.prisma().query_raw(
            'SELECT * FROM N WHERE id = $1',
            255202753,
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.N
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = N.prisma().query_first(
            'SELECT * FROM N WHERE int = $1',
            1223573862,
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.NCreateInput,
        include: NotGivenOr[types.NInclude | None] = NOT_GIVEN,
    ) -> _PrismaModelT:
        """Create a new N record.

        Parameters
        ----------
        data
            N record data
        include
            Specifies which relations should be loaded on the returned N model

        Returns
        -------
        prisma.models.N
            The created N record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a N record from just the required fields
        n = N.prisma().create(
            data={
                # data to create a N record
                'int': 541269159,
                'float': 1064846676.50838,
                'string': 'bacecgfhbe',
                'json_': Json({'ihcahiead': True}),
                'enum': enums.ABeautifulEnum.A,
                'boolean': True,
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='create',
            arguments={
                'data': data,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def create_many(
        self,
        data: List[types.NCreateWithoutRelationsInput],
        *,
        skip_duplicates: NotGivenOr[bool | None] = NOT_GIVEN,
    ) -> int:
        """Create multiple N records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of N record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = N.prisma().create_many(
            data=[
                {
                    # data to create a N record
                    'int': 916896761,
                    'float': 769267518.82031,
                    'string': 'jchciaee',
                    'json_': Json({'deeificjd': True}),
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': True,
                },
                {
                    # data to create a N record
                    'int': 1495896251,
                    'float': 208521688.86081,
                    'string': 'bggajdcbbi',
                    'json_': Json({'fcfhgbjed': True}),
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': True,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        return self._client._execute_json_proto(
            method='create_many',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            data_path=['count'],
            model=self._model,
            parser=int,
        )

    def delete(
        self,
        where: types.NWhereUniqueInput,
        include: NotGivenOr[types.NInclude | None] = NOT_GIVEN,
    ) -> Optional[_PrismaModelT]:
        """Delete a single N record.

        Parameters
        ----------
        where
            N filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned N model

        Returns
        -------
        prisma.models.N
            The deleted N record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        n = N.prisma().delete(
            where={
                'id': 493907821,
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='delete',
            arguments={
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
            ignore_exceptions=(errors.RecordNotFoundError,)
        )

    def find_unique(
        self,
        where: types.NWhereUniqueInput,
        include: NotGivenOr[types.NInclude | None] = NOT_GIVEN
    ) -> Optional[_PrismaModelT]:
        """Find a unique N record.

        Parameters
        ----------
        where
            N filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned N model

        Returns
        -------
        prisma.models.N
            The found N record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        n = N.prisma().find_unique(
            where={
                'id': 639686562,
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_unique',
            arguments={
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=_parsers.allow_none(self._model_parser),
        )

    def find_unique_or_raise(
        self,
        where: types.NWhereUniqueInput,
        include: NotGivenOr[Optional[types.NInclude]] = NOT_GIVEN
    ) -> _PrismaModelT:
        """Find a unique N record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            N filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned N model

        Returns
        -------
        prisma.models.N
            The found N record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        n = N.prisma().find_unique_or_raise(
            where={
                'id': 654007347,
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_unique_or_raise',
            arguments={
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def find_many(
        self,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.NWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.NWhereUniqueInput | None] = NOT_GIVEN,
        include: NotGivenOr[types.NInclude | None] = NOT_GIVEN,
        order: NotGivenOr[types.NOrderByInput | List[types.NOrderByInput] | None] = NOT_GIVEN,
        distinct: NotGivenOr[List[types.NScalarFieldKeys] | None] = NOT_GIVEN,
    ) -> List[_PrismaModelT]:
        """Find multiple N records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of N records returned
        skip
            Ignore the first N results
        where
            N filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned N model
        order
            Order the returned N records by any field
        distinct
            Filter N records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.N]
            The list of all N records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 N records
        ns = N.prisma().find_many(take=10)

        # find the first 5 N records ordered by the optional_int field
        ns = N.prisma().find_many(
            take=5,
            order={
                'optional_int': 'desc',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_many',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
            data_path=[],
            model=self._model,
            parser=_parsers.as_list(self._model_parser),
        )

    def find_first(
        self,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.NWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.NWhereUniqueInput | None] = NOT_GIVEN,
        include: NotGivenOr[types.NInclude | None] = NOT_GIVEN,
        order: NotGivenOr[types.NOrderByInput | List[types.NOrderByInput] | None] = NOT_GIVEN,
        distinct: NotGivenOr[List[types.NScalarFieldKeys] | None] = NOT_GIVEN,
    ) -> Optional[_PrismaModelT]:
        """Find a single N record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            N filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned N model
        order
            Order the returned N records by any field
        distinct
            Filter N records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.N
            The first N record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second N record ordered by the float field
        n = N.prisma().find_first(
            skip=1,
            order={
                'float': 'desc',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_first',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
            data_path=[],
            model=self._model,
            parser=_parsers.allow_none(self._model_parser),
        )

    def find_first_or_raise(
        self,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.NWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.NWhereUniqueInput | None] = NOT_GIVEN,
        include: NotGivenOr[types.NInclude | None] = NOT_GIVEN,
        order: NotGivenOr[types.NOrderByInput | list[types.NOrderByInput] | None] = NOT_GIVEN,
        distinct: NotGivenOr[list[types.NScalarFieldKeys] | None] = NOT_GIVEN,
    ) -> _PrismaModelT:
        """Find a single N record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            N filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned N model
        order
            Order the returned N records by any field
        distinct
            Filter N records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.N
            The first N record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second N record ordered by the optional_float field
        n = N.prisma().find_first_or_raise(
            skip=1,
            order={
                'optional_float': 'desc',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_first_or_raise',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def update(
        self,
        data: types.NUpdateInput,
        where: types.NWhereUniqueInput,
        include: NotGivenOr[types.NInclude | None] = NOT_GIVEN
    ) -> Optional[_PrismaModelT]:
        """Update a single N record.

        Parameters
        ----------
        data
            N record data specifying what to update
        where
            N filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned N model

        Returns
        -------
        prisma.models.N
            The updated N record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        n = N.prisma().update(
            where={
                'id': 1905261552,
            },
            data={
                # data to update the N record to
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='update',
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
            ignore_exceptions=(errors.RecordNotFoundError,),
        )

    def upsert(
        self,
        where: types.NWhereUniqueInput,
        data: types.NUpsertInput,
        include: NotGivenOr[types.NInclude | None] = NOT_GIVEN,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            N filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned N model

        Returns
        -------
        prisma.models.N
            The created or updated N record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        n = N.prisma().upsert(
            where={
                'id': 78746985,
            },
            data={
                'create': {
                    'id': 78746985,
                    'int': 1495896251,
                    'float': 208521688.86081,
                    'string': 'bggajdcbbi',
                    'json_': Json({'fcfhgbjed': True}),
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': True,
                },
                'update': {
                    'int': 1495896251,
                    'float': 208521688.86081,
                    'string': 'bggajdcbbi',
                    'json_': Json({'fcfhgbjed': True}),
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': True,
                },
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='upsert',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def update_many(
        self,
        data: types.NUpdateManyMutationInput,
        where: types.NWhereInput,
    ) -> int:
        """Update multiple N records

        Parameters
        ----------
        data
            N data to update the selected N records to
        where
            Filter to select the N records to update

        Returns
        -------
        int
            The total number of N records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all N records
        total = N.prisma().update_many(
            data={
                'string': 'bdjidcidac'
            },
            where={}
        )
        ```
        """
        return self._client._execute_json_proto(
            method='update_many',
            arguments={
                'data': data,
                'where': where,
            },
            data_path=['count'],
            model=self._model,
            parser=int,
        )

    @overload
    def count(
        self,
        select: NotGivenOr[None] = NOT_GIVEN,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.NWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.NWhereUniqueInput | None] = NOT_GIVEN,
    ) -> int:
        """Count the number of N records present in the database

        Parameters
        ----------
        select
            Select the N fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            N filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.NCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = N.prisma().count()

        # results: prisma.types.NCountAggregateOutput
        results = N.prisma().count(
            select={
                '_all': True,
                'optional_string': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.NCountAggregateInput,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.NWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.NWhereUniqueInput | None] = NOT_GIVEN,
    ) -> types.NCountAggregateOutput:
        ...

    def count(
        self,
        select: NotGivenOr[types.NCountAggregateInput | None] = NOT_GIVEN,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.NWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.NWhereUniqueInput | None] = NOT_GIVEN,
    ) -> Union[int, types.NCountAggregateOutput]:
        """Count the number of N records present in the database

        Parameters
        ----------
        select
            Select the N fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            N filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.NCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = N.prisma().count()

        # results: prisma.types.NCountAggregateOutput
        results = N.prisma().count(
            select={
                '_all': True,
                'json_': True,
            },
        )
        ```
        """

        selection = select or {'_all': True}

        def parser(value: Any) -> int | types.NCountAggregateOutput:
            if is_mapping(select):
                return cast(types.NCountAggregateOutput, value['_count'])
            return int(value['_count']['_all'])

        return self._client._execute_json_proto(
            method='count',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
                'select': {
                    '_count': {
                        'select': selection,
                    },
                },
            },
            data_path=[],
            model=self._model,
            parser=parser,
        )

    def delete_many(
        self,
        where: NotGivenOr[types.NWhereInput | None] = NOT_GIVEN
    ) -> int:
        """Delete multiple N records.

        Parameters
        ----------
        where
            Optional N filter to find the records to be deleted

        Returns
        -------
        int
            The total number of N records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all N records
        total = N.prisma().delete_many()
        ```
        """
        return self._client._execute_json_proto(
            method='delete_many',
            arguments={
                'where': where,
            },
            data_path=['count'],
            model=self._model,
            parser=int,
        )

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: list['types.NScalarFieldKeys'],
        *,
        where: NotGivenOr['types.NWhereInput | None'] = NOT_GIVEN,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        avg: NotGivenOr['types.NAvgAggregateInput | None'] = NOT_GIVEN,
        sum: NotGivenOr['types.NSumAggregateInput | None'] = NOT_GIVEN,
        min: NotGivenOr['types.NMinAggregateInput | None'] = NOT_GIVEN,
        max: NotGivenOr['types.NMaxAggregateInput | None'] = NOT_GIVEN,
        having: NotGivenOr['types.NScalarWhereWithAggregatesInput | None'] = NOT_GIVEN,
        count: NotGivenOr['bool | types.NCountAggregateInput | None'] = NOT_GIVEN,
        order: NotGivenOr[Mapping['types.NScalarFieldKeys', 'types.SortOrder'] | list[Mapping['types.NScalarFieldKeys', 'types.SortOrder']] | None] = NOT_GIVEN,
    ) -> list['types.NGroupByOutput']:
        """Group N records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar N fields to group records by
        where
            N filter to select records
        take
            Limit the maximum number of N records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.NGroupByOutput]
            A list of dictionaries representing the N record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group N records by optional_json values
        # and count how many records are in each group
        results = N.prisma().group_by(
            ['optional_json'],
            count=True,
        )
        ```
        """
        if not order:
            if take:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        selection: SelectionSet = {key: True for key in by}
        if avg:
            selection['_avg'] = {'select': avg}

        if min:
            selection['_min'] = {'select': min}

        if sum:
            selection['_sum'] = {'select': sum}

        if max:
            selection['_max'] = {'select': max}

        if count:
            if count is True:
                selection['_count'] = {'select': {'_all': True}}
            elif isinstance(count, dict):
                selection['_count'] = {'select': count}

        return self._client._execute_json_proto(
            method='group_by',
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
                'select': selection,
            },
            model=self._model,
            data_path=[],
            parser=lambda v: v,
        )


class OneOptionalActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
        '_model_parser',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model
        self._model_parser = _functools.partial(model_parse, self._model)

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.OneOptional]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = OneOptional.prisma().query_raw(
            'SELECT * FROM OneOptional WHERE id = $1',
            856000655,
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.OneOptional
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = OneOptional.prisma().query_first(
            'SELECT * FROM OneOptional WHERE int = $1',
            1452336924,
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.OneOptionalCreateInput,
        include: NotGivenOr[types.OneOptionalInclude | None] = NOT_GIVEN,
    ) -> _PrismaModelT:
        """Create a new OneOptional record.

        Parameters
        ----------
        data
            OneOptional record data
        include
            Specifies which relations should be loaded on the returned OneOptional model

        Returns
        -------
        prisma.models.OneOptional
            The created OneOptional record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a OneOptional record from just the required fields
        oneoptional = OneOptional.prisma().create(
            data={
                # data to create a OneOptional record
                'int': 1573199653,
                'float': 2013903098.50096,
                'string': 'biaagcedjc',
                'enum': enums.ABeautifulEnum.A,
                'boolean': False,
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='create',
            arguments={
                'data': data,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def create_many(
        self,
        data: List[types.OneOptionalCreateWithoutRelationsInput],
        *,
        skip_duplicates: NotGivenOr[bool | None] = NOT_GIVEN,
    ) -> int:
        """Create multiple OneOptional records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of OneOptional record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = OneOptional.prisma().create_many(
            data=[
                {
                    # data to create a OneOptional record
                    'int': 1672112838,
                    'float': 926677639.144762,
                    'string': 'bhdiaidiaf',
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': True,
                },
                {
                    # data to create a OneOptional record
                    'int': 601077795,
                    'float': 290603296.185582,
                    'string': 'bgbbaajbic',
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': False,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        return self._client._execute_json_proto(
            method='create_many',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            data_path=['count'],
            model=self._model,
            parser=int,
        )

    def delete(
        self,
        where: types.OneOptionalWhereUniqueInput,
        include: NotGivenOr[types.OneOptionalInclude | None] = NOT_GIVEN,
    ) -> Optional[_PrismaModelT]:
        """Delete a single OneOptional record.

        Parameters
        ----------
        where
            OneOptional filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned OneOptional model

        Returns
        -------
        prisma.models.OneOptional
            The deleted OneOptional record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        oneoptional = OneOptional.prisma().delete(
            where={
                'id': 300568396,
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='delete',
            arguments={
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
            ignore_exceptions=(errors.RecordNotFoundError,)
        )

    def find_unique(
        self,
        where: types.OneOptionalWhereUniqueInput,
        include: NotGivenOr[types.OneOptionalInclude | None] = NOT_GIVEN
    ) -> Optional[_PrismaModelT]:
        """Find a unique OneOptional record.

        Parameters
        ----------
        where
            OneOptional filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned OneOptional model

        Returns
        -------
        prisma.models.OneOptional
            The found OneOptional record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        oneoptional = OneOptional.prisma().find_unique(
            where={
                'id': 632626069,
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_unique',
            arguments={
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=_parsers.allow_none(self._model_parser),
        )

    def find_unique_or_raise(
        self,
        where: types.OneOptionalWhereUniqueInput,
        include: NotGivenOr[Optional[types.OneOptionalInclude]] = NOT_GIVEN
    ) -> _PrismaModelT:
        """Find a unique OneOptional record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            OneOptional filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned OneOptional model

        Returns
        -------
        prisma.models.OneOptional
            The found OneOptional record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        oneoptional = OneOptional.prisma().find_unique_or_raise(
            where={
                'id': 1724011690,
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_unique_or_raise',
            arguments={
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def find_many(
        self,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.OneOptionalWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.OneOptionalWhereUniqueInput | None] = NOT_GIVEN,
        include: NotGivenOr[types.OneOptionalInclude | None] = NOT_GIVEN,
        order: NotGivenOr[types.OneOptionalOrderByInput | List[types.OneOptionalOrderByInput] | None] = NOT_GIVEN,
        distinct: NotGivenOr[List[types.OneOptionalScalarFieldKeys] | None] = NOT_GIVEN,
    ) -> List[_PrismaModelT]:
        """Find multiple OneOptional records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of OneOptional records returned
        skip
            Ignore the first N results
        where
            OneOptional filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned OneOptional model
        order
            Order the returned OneOptional records by any field
        distinct
            Filter OneOptional records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.OneOptional]
            The list of all OneOptional records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 OneOptional records
        oneoptionals = OneOptional.prisma().find_many(take=10)

        # find the first 5 OneOptional records ordered by the optional_int field
        oneoptionals = OneOptional.prisma().find_many(
            take=5,
            order={
                'optional_int': 'desc',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_many',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
            data_path=[],
            model=self._model,
            parser=_parsers.as_list(self._model_parser),
        )

    def find_first(
        self,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.OneOptionalWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.OneOptionalWhereUniqueInput | None] = NOT_GIVEN,
        include: NotGivenOr[types.OneOptionalInclude | None] = NOT_GIVEN,
        order: NotGivenOr[types.OneOptionalOrderByInput | List[types.OneOptionalOrderByInput] | None] = NOT_GIVEN,
        distinct: NotGivenOr[List[types.OneOptionalScalarFieldKeys] | None] = NOT_GIVEN,
    ) -> Optional[_PrismaModelT]:
        """Find a single OneOptional record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            OneOptional filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned OneOptional model
        order
            Order the returned OneOptional records by any field
        distinct
            Filter OneOptional records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.OneOptional
            The first OneOptional record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second OneOptional record ordered by the float field
        oneoptional = OneOptional.prisma().find_first(
            skip=1,
            order={
                'float': 'desc',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_first',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
            data_path=[],
            model=self._model,
            parser=_parsers.allow_none(self._model_parser),
        )

    def find_first_or_raise(
        self,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.OneOptionalWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.OneOptionalWhereUniqueInput | None] = NOT_GIVEN,
        include: NotGivenOr[types.OneOptionalInclude | None] = NOT_GIVEN,
        order: NotGivenOr[types.OneOptionalOrderByInput | list[types.OneOptionalOrderByInput] | None] = NOT_GIVEN,
        distinct: NotGivenOr[list[types.OneOptionalScalarFieldKeys] | None] = NOT_GIVEN,
    ) -> _PrismaModelT:
        """Find a single OneOptional record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            OneOptional filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned OneOptional model
        order
            Order the returned OneOptional records by any field
        distinct
            Filter OneOptional records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.OneOptional
            The first OneOptional record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second OneOptional record ordered by the optional_float field
        oneoptional = OneOptional.prisma().find_first_or_raise(
            skip=1,
            order={
                'optional_float': 'desc',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_first_or_raise',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def update(
        self,
        data: types.OneOptionalUpdateInput,
        where: types.OneOptionalWhereUniqueInput,
        include: NotGivenOr[types.OneOptionalInclude | None] = NOT_GIVEN
    ) -> Optional[_PrismaModelT]:
        """Update a single OneOptional record.

        Parameters
        ----------
        data
            OneOptional record data specifying what to update
        where
            OneOptional filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned OneOptional model

        Returns
        -------
        prisma.models.OneOptional
            The updated OneOptional record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        oneoptional = OneOptional.prisma().update(
            where={
                'id': 470157467,
            },
            data={
                # data to update the OneOptional record to
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='update',
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
            ignore_exceptions=(errors.RecordNotFoundError,),
        )

    def upsert(
        self,
        where: types.OneOptionalWhereUniqueInput,
        data: types.OneOptionalUpsertInput,
        include: NotGivenOr[types.OneOptionalInclude | None] = NOT_GIVEN,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            OneOptional filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned OneOptional model

        Returns
        -------
        prisma.models.OneOptional
            The created or updated OneOptional record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        oneoptional = OneOptional.prisma().upsert(
            where={
                'id': 1209209912,
            },
            data={
                'create': {
                    'id': 1209209912,
                    'int': 601077795,
                    'float': 290603296.185582,
                    'string': 'bgbbaajbic',
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': False,
                },
                'update': {
                    'int': 601077795,
                    'float': 290603296.185582,
                    'string': 'bgbbaajbic',
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': False,
                },
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='upsert',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def update_many(
        self,
        data: types.OneOptionalUpdateManyMutationInput,
        where: types.OneOptionalWhereInput,
    ) -> int:
        """Update multiple OneOptional records

        Parameters
        ----------
        data
            OneOptional data to update the selected OneOptional records to
        where
            Filter to select the OneOptional records to update

        Returns
        -------
        int
            The total number of OneOptional records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all OneOptional records
        total = OneOptional.prisma().update_many(
            data={
                'string': 'bfdgheeegf'
            },
            where={}
        )
        ```
        """
        return self._client._execute_json_proto(
            method='update_many',
            arguments={
                'data': data,
                'where': where,
            },
            data_path=['count'],
            model=self._model,
            parser=int,
        )

    @overload
    def count(
        self,
        select: NotGivenOr[None] = NOT_GIVEN,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.OneOptionalWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.OneOptionalWhereUniqueInput | None] = NOT_GIVEN,
    ) -> int:
        """Count the number of OneOptional records present in the database

        Parameters
        ----------
        select
            Select the OneOptional fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            OneOptional filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.OneOptionalCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = OneOptional.prisma().count()

        # results: prisma.types.OneOptionalCountAggregateOutput
        results = OneOptional.prisma().count(
            select={
                '_all': True,
                'optional_string': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.OneOptionalCountAggregateInput,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.OneOptionalWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.OneOptionalWhereUniqueInput | None] = NOT_GIVEN,
    ) -> types.OneOptionalCountAggregateOutput:
        ...

    def count(
        self,
        select: NotGivenOr[types.OneOptionalCountAggregateInput | None] = NOT_GIVEN,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.OneOptionalWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.OneOptionalWhereUniqueInput | None] = NOT_GIVEN,
    ) -> Union[int, types.OneOptionalCountAggregateOutput]:
        """Count the number of OneOptional records present in the database

        Parameters
        ----------
        select
            Select the OneOptional fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            OneOptional filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.OneOptionalCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = OneOptional.prisma().count()

        # results: prisma.types.OneOptionalCountAggregateOutput
        results = OneOptional.prisma().count(
            select={
                '_all': True,
                'enum': True,
            },
        )
        ```
        """

        selection = select or {'_all': True}

        def parser(value: Any) -> int | types.OneOptionalCountAggregateOutput:
            if is_mapping(select):
                return cast(types.OneOptionalCountAggregateOutput, value['_count'])
            return int(value['_count']['_all'])

        return self._client._execute_json_proto(
            method='count',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
                'select': {
                    '_count': {
                        'select': selection,
                    },
                },
            },
            data_path=[],
            model=self._model,
            parser=parser,
        )

    def delete_many(
        self,
        where: NotGivenOr[types.OneOptionalWhereInput | None] = NOT_GIVEN
    ) -> int:
        """Delete multiple OneOptional records.

        Parameters
        ----------
        where
            Optional OneOptional filter to find the records to be deleted

        Returns
        -------
        int
            The total number of OneOptional records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all OneOptional records
        total = OneOptional.prisma().delete_many()
        ```
        """
        return self._client._execute_json_proto(
            method='delete_many',
            arguments={
                'where': where,
            },
            data_path=['count'],
            model=self._model,
            parser=int,
        )

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: list['types.OneOptionalScalarFieldKeys'],
        *,
        where: NotGivenOr['types.OneOptionalWhereInput | None'] = NOT_GIVEN,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        avg: NotGivenOr['types.OneOptionalAvgAggregateInput | None'] = NOT_GIVEN,
        sum: NotGivenOr['types.OneOptionalSumAggregateInput | None'] = NOT_GIVEN,
        min: NotGivenOr['types.OneOptionalMinAggregateInput | None'] = NOT_GIVEN,
        max: NotGivenOr['types.OneOptionalMaxAggregateInput | None'] = NOT_GIVEN,
        having: NotGivenOr['types.OneOptionalScalarWhereWithAggregatesInput | None'] = NOT_GIVEN,
        count: NotGivenOr['bool | types.OneOptionalCountAggregateInput | None'] = NOT_GIVEN,
        order: NotGivenOr[Mapping['types.OneOptionalScalarFieldKeys', 'types.SortOrder'] | list[Mapping['types.OneOptionalScalarFieldKeys', 'types.SortOrder']] | None] = NOT_GIVEN,
    ) -> list['types.OneOptionalGroupByOutput']:
        """Group OneOptional records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar OneOptional fields to group records by
        where
            OneOptional filter to select records
        take
            Limit the maximum number of OneOptional records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.OneOptionalGroupByOutput]
            A list of dictionaries representing the OneOptional record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group OneOptional records by optional_enum values
        # and count how many records are in each group
        results = OneOptional.prisma().group_by(
            ['optional_enum'],
            count=True,
        )
        ```
        """
        if not order:
            if take:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        selection: SelectionSet = {key: True for key in by}
        if avg:
            selection['_avg'] = {'select': avg}

        if min:
            selection['_min'] = {'select': min}

        if sum:
            selection['_sum'] = {'select': sum}

        if max:
            selection['_max'] = {'select': max}

        if count:
            if count is True:
                selection['_count'] = {'select': {'_all': True}}
            elif isinstance(count, dict):
                selection['_count'] = {'select': count}

        return self._client._execute_json_proto(
            method='group_by',
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
                'select': selection,
            },
            model=self._model,
            data_path=[],
            parser=lambda v: v,
        )


class ManyRequiredActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
        '_model_parser',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model
        self._model_parser = _functools.partial(model_parse, self._model)

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.ManyRequired]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = ManyRequired.prisma().query_raw(
            'SELECT * FROM ManyRequired WHERE id = $1',
            424218998,
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.ManyRequired
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = ManyRequired.prisma().query_first(
            'SELECT * FROM ManyRequired WHERE one_optional_id = $1',
            2125632375,
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.ManyRequiredCreateInput,
        include: NotGivenOr[types.ManyRequiredInclude | None] = NOT_GIVEN,
    ) -> _PrismaModelT:
        """Create a new ManyRequired record.

        Parameters
        ----------
        data
            ManyRequired record data
        include
            Specifies which relations should be loaded on the returned ManyRequired model

        Returns
        -------
        prisma.models.ManyRequired
            The created ManyRequired record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a ManyRequired record from just the required fields
        manyrequired = ManyRequired.prisma().create(
            data={
                # data to create a ManyRequired record
                'int': 536951780,
                'float': 924723277.162193,
                'string': 'bieiidcabj',
                'enum': enums.ABeautifulEnum.A,
                'boolean': True,
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='create',
            arguments={
                'data': data,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def create_many(
        self,
        data: List[types.ManyRequiredCreateWithoutRelationsInput],
        *,
        skip_duplicates: NotGivenOr[bool | None] = NOT_GIVEN,
    ) -> int:
        """Create multiple ManyRequired records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of ManyRequired record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = ManyRequired.prisma().create_many(
            data=[
                {
                    # data to create a ManyRequired record
                    'int': 2100427849,
                    'float': 849140046.92815,
                    'string': 'chdadcaga',
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': False,
                },
                {
                    # data to create a ManyRequired record
                    'int': 510737498,
                    'float': 2117488267.140194,
                    'string': 'bcjhgahffd',
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': True,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        return self._client._execute_json_proto(
            method='create_many',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            data_path=['count'],
            model=self._model,
            parser=int,
        )

    def delete(
        self,
        where: types.ManyRequiredWhereUniqueInput,
        include: NotGivenOr[types.ManyRequiredInclude | None] = NOT_GIVEN,
    ) -> Optional[_PrismaModelT]:
        """Delete a single ManyRequired record.

        Parameters
        ----------
        where
            ManyRequired filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned ManyRequired model

        Returns
        -------
        prisma.models.ManyRequired
            The deleted ManyRequired record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        manyrequired = ManyRequired.prisma().delete(
            where={
                'id': 976832615,
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='delete',
            arguments={
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
            ignore_exceptions=(errors.RecordNotFoundError,)
        )

    def find_unique(
        self,
        where: types.ManyRequiredWhereUniqueInput,
        include: NotGivenOr[types.ManyRequiredInclude | None] = NOT_GIVEN
    ) -> Optional[_PrismaModelT]:
        """Find a unique ManyRequired record.

        Parameters
        ----------
        where
            ManyRequired filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned ManyRequired model

        Returns
        -------
        prisma.models.ManyRequired
            The found ManyRequired record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        manyrequired = ManyRequired.prisma().find_unique(
            where={
                'id': 1696425492,
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_unique',
            arguments={
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=_parsers.allow_none(self._model_parser),
        )

    def find_unique_or_raise(
        self,
        where: types.ManyRequiredWhereUniqueInput,
        include: NotGivenOr[Optional[types.ManyRequiredInclude]] = NOT_GIVEN
    ) -> _PrismaModelT:
        """Find a unique ManyRequired record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            ManyRequired filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned ManyRequired model

        Returns
        -------
        prisma.models.ManyRequired
            The found ManyRequired record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        manyrequired = ManyRequired.prisma().find_unique_or_raise(
            where={
                'id': 169262781,
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_unique_or_raise',
            arguments={
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def find_many(
        self,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.ManyRequiredWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.ManyRequiredWhereUniqueInput | None] = NOT_GIVEN,
        include: NotGivenOr[types.ManyRequiredInclude | None] = NOT_GIVEN,
        order: NotGivenOr[types.ManyRequiredOrderByInput | List[types.ManyRequiredOrderByInput] | None] = NOT_GIVEN,
        distinct: NotGivenOr[List[types.ManyRequiredScalarFieldKeys] | None] = NOT_GIVEN,
    ) -> List[_PrismaModelT]:
        """Find multiple ManyRequired records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of ManyRequired records returned
        skip
            Ignore the first N results
        where
            ManyRequired filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned ManyRequired model
        order
            Order the returned ManyRequired records by any field
        distinct
            Filter ManyRequired records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.ManyRequired]
            The list of all ManyRequired records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 ManyRequired records
        manyrequireds = ManyRequired.prisma().find_many(take=10)

        # find the first 5 ManyRequired records ordered by the int field
        manyrequireds = ManyRequired.prisma().find_many(
            take=5,
            order={
                'int': 'desc',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_many',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
            data_path=[],
            model=self._model,
            parser=_parsers.as_list(self._model_parser),
        )

    def find_first(
        self,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.ManyRequiredWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.ManyRequiredWhereUniqueInput | None] = NOT_GIVEN,
        include: NotGivenOr[types.ManyRequiredInclude | None] = NOT_GIVEN,
        order: NotGivenOr[types.ManyRequiredOrderByInput | List[types.ManyRequiredOrderByInput] | None] = NOT_GIVEN,
        distinct: NotGivenOr[List[types.ManyRequiredScalarFieldKeys] | None] = NOT_GIVEN,
    ) -> Optional[_PrismaModelT]:
        """Find a single ManyRequired record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            ManyRequired filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned ManyRequired model
        order
            Order the returned ManyRequired records by any field
        distinct
            Filter ManyRequired records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.ManyRequired
            The first ManyRequired record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second ManyRequired record ordered by the optional_int field
        manyrequired = ManyRequired.prisma().find_first(
            skip=1,
            order={
                'optional_int': 'desc',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_first',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
            data_path=[],
            model=self._model,
            parser=_parsers.allow_none(self._model_parser),
        )

    def find_first_or_raise(
        self,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.ManyRequiredWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.ManyRequiredWhereUniqueInput | None] = NOT_GIVEN,
        include: NotGivenOr[types.ManyRequiredInclude | None] = NOT_GIVEN,
        order: NotGivenOr[types.ManyRequiredOrderByInput | list[types.ManyRequiredOrderByInput] | None] = NOT_GIVEN,
        distinct: NotGivenOr[list[types.ManyRequiredScalarFieldKeys] | None] = NOT_GIVEN,
    ) -> _PrismaModelT:
        """Find a single ManyRequired record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            ManyRequired filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned ManyRequired model
        order
            Order the returned ManyRequired records by any field
        distinct
            Filter ManyRequired records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.ManyRequired
            The first ManyRequired record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second ManyRequired record ordered by the float field
        manyrequired = ManyRequired.prisma().find_first_or_raise(
            skip=1,
            order={
                'float': 'desc',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_first_or_raise',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def update(
        self,
        data: types.ManyRequiredUpdateInput,
        where: types.ManyRequiredWhereUniqueInput,
        include: NotGivenOr[types.ManyRequiredInclude | None] = NOT_GIVEN
    ) -> Optional[_PrismaModelT]:
        """Update a single ManyRequired record.

        Parameters
        ----------
        data
            ManyRequired record data specifying what to update
        where
            ManyRequired filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned ManyRequired model

        Returns
        -------
        prisma.models.ManyRequired
            The updated ManyRequired record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        manyrequired = ManyRequired.prisma().update(
            where={
                'id': 1023081650,
            },
            data={
                # data to update the ManyRequired record to
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='update',
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
            ignore_exceptions=(errors.RecordNotFoundError,),
        )

    def upsert(
        self,
        where: types.ManyRequiredWhereUniqueInput,
        data: types.ManyRequiredUpsertInput,
        include: NotGivenOr[types.ManyRequiredInclude | None] = NOT_GIVEN,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            ManyRequired filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned ManyRequired model

        Returns
        -------
        prisma.models.ManyRequired
            The created or updated ManyRequired record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        manyrequired = ManyRequired.prisma().upsert(
            where={
                'id': 327681027,
            },
            data={
                'create': {
                    'id': 327681027,
                    'int': 510737498,
                    'float': 2117488267.140194,
                    'string': 'bcjhgahffd',
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': True,
                },
                'update': {
                    'int': 510737498,
                    'float': 2117488267.140194,
                    'string': 'bcjhgahffd',
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': True,
                },
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='upsert',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def update_many(
        self,
        data: types.ManyRequiredUpdateManyMutationInput,
        where: types.ManyRequiredWhereInput,
    ) -> int:
        """Update multiple ManyRequired records

        Parameters
        ----------
        data
            ManyRequired data to update the selected ManyRequired records to
        where
            Filter to select the ManyRequired records to update

        Returns
        -------
        int
            The total number of ManyRequired records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all ManyRequired records
        total = ManyRequired.prisma().update_many(
            data={
                'optional_float': 527748992.202935
            },
            where={}
        )
        ```
        """
        return self._client._execute_json_proto(
            method='update_many',
            arguments={
                'data': data,
                'where': where,
            },
            data_path=['count'],
            model=self._model,
            parser=int,
        )

    @overload
    def count(
        self,
        select: NotGivenOr[None] = NOT_GIVEN,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.ManyRequiredWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.ManyRequiredWhereUniqueInput | None] = NOT_GIVEN,
    ) -> int:
        """Count the number of ManyRequired records present in the database

        Parameters
        ----------
        select
            Select the ManyRequired fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            ManyRequired filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ManyRequiredCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = ManyRequired.prisma().count()

        # results: prisma.types.ManyRequiredCountAggregateOutput
        results = ManyRequired.prisma().count(
            select={
                '_all': True,
                'string': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.ManyRequiredCountAggregateInput,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.ManyRequiredWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.ManyRequiredWhereUniqueInput | None] = NOT_GIVEN,
    ) -> types.ManyRequiredCountAggregateOutput:
        ...

    def count(
        self,
        select: NotGivenOr[types.ManyRequiredCountAggregateInput | None] = NOT_GIVEN,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.ManyRequiredWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.ManyRequiredWhereUniqueInput | None] = NOT_GIVEN,
    ) -> Union[int, types.ManyRequiredCountAggregateOutput]:
        """Count the number of ManyRequired records present in the database

        Parameters
        ----------
        select
            Select the ManyRequired fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            ManyRequired filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ManyRequiredCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = ManyRequired.prisma().count()

        # results: prisma.types.ManyRequiredCountAggregateOutput
        results = ManyRequired.prisma().count(
            select={
                '_all': True,
                'optional_string': True,
            },
        )
        ```
        """

        selection = select or {'_all': True}

        def parser(value: Any) -> int | types.ManyRequiredCountAggregateOutput:
            if is_mapping(select):
                return cast(types.ManyRequiredCountAggregateOutput, value['_count'])
            return int(value['_count']['_all'])

        return self._client._execute_json_proto(
            method='count',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
                'select': {
                    '_count': {
                        'select': selection,
                    },
                },
            },
            data_path=[],
            model=self._model,
            parser=parser,
        )

    def delete_many(
        self,
        where: NotGivenOr[types.ManyRequiredWhereInput | None] = NOT_GIVEN
    ) -> int:
        """Delete multiple ManyRequired records.

        Parameters
        ----------
        where
            Optional ManyRequired filter to find the records to be deleted

        Returns
        -------
        int
            The total number of ManyRequired records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all ManyRequired records
        total = ManyRequired.prisma().delete_many()
        ```
        """
        return self._client._execute_json_proto(
            method='delete_many',
            arguments={
                'where': where,
            },
            data_path=['count'],
            model=self._model,
            parser=int,
        )

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: list['types.ManyRequiredScalarFieldKeys'],
        *,
        where: NotGivenOr['types.ManyRequiredWhereInput | None'] = NOT_GIVEN,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        avg: NotGivenOr['types.ManyRequiredAvgAggregateInput | None'] = NOT_GIVEN,
        sum: NotGivenOr['types.ManyRequiredSumAggregateInput | None'] = NOT_GIVEN,
        min: NotGivenOr['types.ManyRequiredMinAggregateInput | None'] = NOT_GIVEN,
        max: NotGivenOr['types.ManyRequiredMaxAggregateInput | None'] = NOT_GIVEN,
        having: NotGivenOr['types.ManyRequiredScalarWhereWithAggregatesInput | None'] = NOT_GIVEN,
        count: NotGivenOr['bool | types.ManyRequiredCountAggregateInput | None'] = NOT_GIVEN,
        order: NotGivenOr[Mapping['types.ManyRequiredScalarFieldKeys', 'types.SortOrder'] | list[Mapping['types.ManyRequiredScalarFieldKeys', 'types.SortOrder']] | None] = NOT_GIVEN,
    ) -> list['types.ManyRequiredGroupByOutput']:
        """Group ManyRequired records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar ManyRequired fields to group records by
        where
            ManyRequired filter to select records
        take
            Limit the maximum number of ManyRequired records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.ManyRequiredGroupByOutput]
            A list of dictionaries representing the ManyRequired record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group ManyRequired records by enum values
        # and count how many records are in each group
        results = ManyRequired.prisma().group_by(
            ['enum'],
            count=True,
        )
        ```
        """
        if not order:
            if take:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        selection: SelectionSet = {key: True for key in by}
        if avg:
            selection['_avg'] = {'select': avg}

        if min:
            selection['_min'] = {'select': min}

        if sum:
            selection['_sum'] = {'select': sum}

        if max:
            selection['_max'] = {'select': max}

        if count:
            if count is True:
                selection['_count'] = {'select': {'_all': True}}
            elif isinstance(count, dict):
                selection['_count'] = {'select': count}

        return self._client._execute_json_proto(
            method='group_by',
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
                'select': selection,
            },
            model=self._model,
            data_path=[],
            parser=lambda v: v,
        )


class ListsActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
        '_model_parser',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model
        self._model_parser = _functools.partial(model_parse, self._model)

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Lists]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = Lists.prisma().query_raw(
            'SELECT * FROM Lists WHERE id = $1',
            'bdbifjhbbi',
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Lists
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = Lists.prisma().query_first(
            'SELECT * FROM Lists WHERE strings = $1',
            ['cbccbbcdfb'],
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.ListsCreateInput,
        include: NotGivenOr[types.ListsInclude | None] = NOT_GIVEN,
    ) -> _PrismaModelT:
        """Create a new Lists record.

        Parameters
        ----------
        data
            Lists record data
        include
            Specifies which relations should be loaded on the returned Lists model

        Returns
        -------
        prisma.models.Lists
            The created Lists record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Lists record from just the required fields
        lists = Lists.prisma().create(
            data={
                # data to create a Lists record
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='create',
            arguments={
                'data': data,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def create_many(
        self,
        data: List[types.ListsCreateWithoutRelationsInput],
        *,
        skip_duplicates: NotGivenOr[bool | None] = NOT_GIVEN,
    ) -> int:
        """Create multiple Lists records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Lists record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = Lists.prisma().create_many(
            data=[
                {
                    # data to create a Lists record
                },
                {
                    # data to create a Lists record
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        return self._client._execute_json_proto(
            method='create_many',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            data_path=['count'],
            model=self._model,
            parser=int,
        )

    def delete(
        self,
        where: types.ListsWhereUniqueInput,
        include: NotGivenOr[types.ListsInclude | None] = NOT_GIVEN,
    ) -> Optional[_PrismaModelT]:
        """Delete a single Lists record.

        Parameters
        ----------
        where
            Lists filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Lists model

        Returns
        -------
        prisma.models.Lists
            The deleted Lists record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        lists = Lists.prisma().delete(
            where={
                'id': 'bacejedaca',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='delete',
            arguments={
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
            ignore_exceptions=(errors.RecordNotFoundError,)
        )

    def find_unique(
        self,
        where: types.ListsWhereUniqueInput,
        include: NotGivenOr[types.ListsInclude | None] = NOT_GIVEN
    ) -> Optional[_PrismaModelT]:
        """Find a unique Lists record.

        Parameters
        ----------
        where
            Lists filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Lists model

        Returns
        -------
        prisma.models.Lists
            The found Lists record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        lists = Lists.prisma().find_unique(
            where={
                'id': 'bhbhdahfaj',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_unique',
            arguments={
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=_parsers.allow_none(self._model_parser),
        )

    def find_unique_or_raise(
        self,
        where: types.ListsWhereUniqueInput,
        include: NotGivenOr[Optional[types.ListsInclude]] = NOT_GIVEN
    ) -> _PrismaModelT:
        """Find a unique Lists record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Lists filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Lists model

        Returns
        -------
        prisma.models.Lists
            The found Lists record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        lists = Lists.prisma().find_unique_or_raise(
            where={
                'id': 'bfjibceaec',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_unique_or_raise',
            arguments={
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def find_many(
        self,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.ListsWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.ListsWhereUniqueInput | None] = NOT_GIVEN,
        include: NotGivenOr[types.ListsInclude | None] = NOT_GIVEN,
        order: NotGivenOr[types.ListsOrderByInput | List[types.ListsOrderByInput] | None] = NOT_GIVEN,
        distinct: NotGivenOr[List[types.ListsScalarFieldKeys] | None] = NOT_GIVEN,
    ) -> List[_PrismaModelT]:
        """Find multiple Lists records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Lists records returned
        skip
            Ignore the first N results
        where
            Lists filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Lists model
        order
            Order the returned Lists records by any field
        distinct
            Filter Lists records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Lists]
            The list of all Lists records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Lists records
        lists = Lists.prisma().find_many(take=10)

        # find the first 5 Lists records ordered by the bytes field
        lists = Lists.prisma().find_many(
            take=5,
            order={
                'bytes': 'desc',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_many',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
            data_path=[],
            model=self._model,
            parser=_parsers.as_list(self._model_parser),
        )

    def find_first(
        self,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.ListsWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.ListsWhereUniqueInput | None] = NOT_GIVEN,
        include: NotGivenOr[types.ListsInclude | None] = NOT_GIVEN,
        order: NotGivenOr[types.ListsOrderByInput | List[types.ListsOrderByInput] | None] = NOT_GIVEN,
        distinct: NotGivenOr[List[types.ListsScalarFieldKeys] | None] = NOT_GIVEN,
    ) -> Optional[_PrismaModelT]:
        """Find a single Lists record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Lists filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Lists model
        order
            Order the returned Lists records by any field
        distinct
            Filter Lists records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Lists
            The first Lists record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Lists record ordered by the dates field
        lists = Lists.prisma().find_first(
            skip=1,
            order={
                'dates': 'desc',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_first',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
            data_path=[],
            model=self._model,
            parser=_parsers.allow_none(self._model_parser),
        )

    def find_first_or_raise(
        self,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.ListsWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.ListsWhereUniqueInput | None] = NOT_GIVEN,
        include: NotGivenOr[types.ListsInclude | None] = NOT_GIVEN,
        order: NotGivenOr[types.ListsOrderByInput | list[types.ListsOrderByInput] | None] = NOT_GIVEN,
        distinct: NotGivenOr[list[types.ListsScalarFieldKeys] | None] = NOT_GIVEN,
    ) -> _PrismaModelT:
        """Find a single Lists record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Lists filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Lists model
        order
            Order the returned Lists records by any field
        distinct
            Filter Lists records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Lists
            The first Lists record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Lists record ordered by the bools field
        lists = Lists.prisma().find_first_or_raise(
            skip=1,
            order={
                'bools': 'desc',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_first_or_raise',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def update(
        self,
        data: types.ListsUpdateInput,
        where: types.ListsWhereUniqueInput,
        include: NotGivenOr[types.ListsInclude | None] = NOT_GIVEN
    ) -> Optional[_PrismaModelT]:
        """Update a single Lists record.

        Parameters
        ----------
        data
            Lists record data specifying what to update
        where
            Lists filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Lists model

        Returns
        -------
        prisma.models.Lists
            The updated Lists record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        lists = Lists.prisma().update(
            where={
                'id': 'ibhgcdbgd',
            },
            data={
                # data to update the Lists record to
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='update',
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
            ignore_exceptions=(errors.RecordNotFoundError,),
        )

    def upsert(
        self,
        where: types.ListsWhereUniqueInput,
        data: types.ListsUpsertInput,
        include: NotGivenOr[types.ListsInclude | None] = NOT_GIVEN,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Lists filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Lists model

        Returns
        -------
        prisma.models.Lists
            The created or updated Lists record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        lists = Lists.prisma().upsert(
            where={
                'id': 'badaffhddg',
            },
            data={
                'create': {
                    'id': 'badaffhddg',
                },
                'update': {
                },
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='upsert',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def update_many(
        self,
        data: types.ListsUpdateManyMutationInput,
        where: types.ListsWhereInput,
    ) -> int:
        """Update multiple Lists records

        Parameters
        ----------
        data
            Lists data to update the selected Lists records to
        where
            Filter to select the Lists records to update

        Returns
        -------
        int
            The total number of Lists records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Lists records
        total = Lists.prisma().update_many(
            data={
                'ints': [1131525873]
            },
            where={}
        )
        ```
        """
        return self._client._execute_json_proto(
            method='update_many',
            arguments={
                'data': data,
                'where': where,
            },
            data_path=['count'],
            model=self._model,
            parser=int,
        )

    @overload
    def count(
        self,
        select: NotGivenOr[None] = NOT_GIVEN,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.ListsWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.ListsWhereUniqueInput | None] = NOT_GIVEN,
    ) -> int:
        """Count the number of Lists records present in the database

        Parameters
        ----------
        select
            Select the Lists fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Lists filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ListsCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = Lists.prisma().count()

        # results: prisma.types.ListsCountAggregateOutput
        results = Lists.prisma().count(
            select={
                '_all': True,
                'floats': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.ListsCountAggregateInput,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.ListsWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.ListsWhereUniqueInput | None] = NOT_GIVEN,
    ) -> types.ListsCountAggregateOutput:
        ...

    def count(
        self,
        select: NotGivenOr[types.ListsCountAggregateInput | None] = NOT_GIVEN,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.ListsWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.ListsWhereUniqueInput | None] = NOT_GIVEN,
    ) -> Union[int, types.ListsCountAggregateOutput]:
        """Count the number of Lists records present in the database

        Parameters
        ----------
        select
            Select the Lists fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Lists filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ListsCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = Lists.prisma().count()

        # results: prisma.types.ListsCountAggregateOutput
        results = Lists.prisma().count(
            select={
                '_all': True,
                'bigints': True,
            },
        )
        ```
        """

        selection = select or {'_all': True}

        def parser(value: Any) -> int | types.ListsCountAggregateOutput:
            if is_mapping(select):
                return cast(types.ListsCountAggregateOutput, value['_count'])
            return int(value['_count']['_all'])

        return self._client._execute_json_proto(
            method='count',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
                'select': {
                    '_count': {
                        'select': selection,
                    },
                },
            },
            data_path=[],
            model=self._model,
            parser=parser,
        )

    def delete_many(
        self,
        where: NotGivenOr[types.ListsWhereInput | None] = NOT_GIVEN
    ) -> int:
        """Delete multiple Lists records.

        Parameters
        ----------
        where
            Optional Lists filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Lists records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Lists records
        total = Lists.prisma().delete_many()
        ```
        """
        return self._client._execute_json_proto(
            method='delete_many',
            arguments={
                'where': where,
            },
            data_path=['count'],
            model=self._model,
            parser=int,
        )

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: list['types.ListsScalarFieldKeys'],
        *,
        where: NotGivenOr['types.ListsWhereInput | None'] = NOT_GIVEN,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        avg: NotGivenOr['types.ListsAvgAggregateInput | None'] = NOT_GIVEN,
        sum: NotGivenOr['types.ListsSumAggregateInput | None'] = NOT_GIVEN,
        min: NotGivenOr['types.ListsMinAggregateInput | None'] = NOT_GIVEN,
        max: NotGivenOr['types.ListsMaxAggregateInput | None'] = NOT_GIVEN,
        having: NotGivenOr['types.ListsScalarWhereWithAggregatesInput | None'] = NOT_GIVEN,
        count: NotGivenOr['bool | types.ListsCountAggregateInput | None'] = NOT_GIVEN,
        order: NotGivenOr[Mapping['types.ListsScalarFieldKeys', 'types.SortOrder'] | list[Mapping['types.ListsScalarFieldKeys', 'types.SortOrder']] | None] = NOT_GIVEN,
    ) -> list['types.ListsGroupByOutput']:
        """Group Lists records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Lists fields to group records by
        where
            Lists filter to select records
        take
            Limit the maximum number of Lists records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.ListsGroupByOutput]
            A list of dictionaries representing the Lists record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Lists records by json_objects values
        # and count how many records are in each group
        results = Lists.prisma().group_by(
            ['json_objects'],
            count=True,
        )
        ```
        """
        if not order:
            if take:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        selection: SelectionSet = {key: True for key in by}
        if avg:
            selection['_avg'] = {'select': avg}

        if min:
            selection['_min'] = {'select': min}

        if sum:
            selection['_sum'] = {'select': sum}

        if max:
            selection['_max'] = {'select': max}

        if count:
            if count is True:
                selection['_count'] = {'select': {'_all': True}}
            elif isinstance(count, dict):
                selection['_count'] = {'select': count}

        return self._client._execute_json_proto(
            method='group_by',
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
                'select': selection,
            },
            model=self._model,
            data_path=[],
            parser=lambda v: v,
        )


class AActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
        '_model_parser',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model
        self._model_parser = _functools.partial(model_parse, self._model)

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.A]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = A.prisma().query_raw(
            'SELECT * FROM A WHERE email = $1',
            'cbagggbji',
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.A
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = A.prisma().query_first(
            'SELECT * FROM A WHERE name = $1',
            'bchgafhjed',
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.ACreateInput,
        include: NotGivenOr[types.AInclude | None] = NOT_GIVEN,
    ) -> _PrismaModelT:
        """Create a new A record.

        Parameters
        ----------
        data
            A record data
        include
            Specifies which relations should be loaded on the returned A model

        Returns
        -------
        prisma.models.A
            The created A record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a A record from just the required fields
        a = A.prisma().create(
            data={
                # data to create a A record
                'email': 'heffgjdei',
                'int': 307876141,
                'sInt': 1674049122,
                'bInt': 18322255716,
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='create',
            arguments={
                'data': data,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def create_many(
        self,
        data: List[types.ACreateWithoutRelationsInput],
        *,
        skip_duplicates: NotGivenOr[bool | None] = NOT_GIVEN,
    ) -> int:
        """Create multiple A records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of A record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = A.prisma().create_many(
            data=[
                {
                    # data to create a A record
                    'email': 'jfiahhbae',
                    'int': 1513050921,
                    'sInt': 204674734,
                    'bInt': 24811819956,
                },
                {
                    # data to create a A record
                    'email': 'bbidjbbjaa',
                    'int': 1589704933,
                    'sInt': 1243475898,
                    'bInt': 16437947652,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        return self._client._execute_json_proto(
            method='create_many',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            data_path=['count'],
            model=self._model,
            parser=int,
        )

    def delete(
        self,
        where: types.AWhereUniqueInput,
        include: NotGivenOr[types.AInclude | None] = NOT_GIVEN,
    ) -> Optional[_PrismaModelT]:
        """Delete a single A record.

        Parameters
        ----------
        where
            A filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned A model

        Returns
        -------
        prisma.models.A
            The deleted A record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        a = A.prisma().delete(
            where={
                'email': 'bghifjdeia',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='delete',
            arguments={
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
            ignore_exceptions=(errors.RecordNotFoundError,)
        )

    def find_unique(
        self,
        where: types.AWhereUniqueInput,
        include: NotGivenOr[types.AInclude | None] = NOT_GIVEN
    ) -> Optional[_PrismaModelT]:
        """Find a unique A record.

        Parameters
        ----------
        where
            A filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned A model

        Returns
        -------
        prisma.models.A
            The found A record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        a = A.prisma().find_unique(
            where={
                'email': 'eadfcbbcb',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_unique',
            arguments={
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=_parsers.allow_none(self._model_parser),
        )

    def find_unique_or_raise(
        self,
        where: types.AWhereUniqueInput,
        include: NotGivenOr[Optional[types.AInclude]] = NOT_GIVEN
    ) -> _PrismaModelT:
        """Find a unique A record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            A filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned A model

        Returns
        -------
        prisma.models.A
            The found A record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        a = A.prisma().find_unique_or_raise(
            where={
                'email': 'geihgahba',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_unique_or_raise',
            arguments={
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def find_many(
        self,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.AWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.AWhereUniqueInput | None] = NOT_GIVEN,
        include: NotGivenOr[types.AInclude | None] = NOT_GIVEN,
        order: NotGivenOr[types.AOrderByInput | List[types.AOrderByInput] | None] = NOT_GIVEN,
        distinct: NotGivenOr[List[types.AScalarFieldKeys] | None] = NOT_GIVEN,
    ) -> List[_PrismaModelT]:
        """Find multiple A records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of A records returned
        skip
            Ignore the first N results
        where
            A filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned A model
        order
            Order the returned A records by any field
        distinct
            Filter A records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.A]
            The list of all A records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 A records
        as = A.prisma().find_many(take=10)

        # find the first 5 A records ordered by the int field
        as = A.prisma().find_many(
            take=5,
            order={
                'int': 'desc',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_many',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
            data_path=[],
            model=self._model,
            parser=_parsers.as_list(self._model_parser),
        )

    def find_first(
        self,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.AWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.AWhereUniqueInput | None] = NOT_GIVEN,
        include: NotGivenOr[types.AInclude | None] = NOT_GIVEN,
        order: NotGivenOr[types.AOrderByInput | List[types.AOrderByInput] | None] = NOT_GIVEN,
        distinct: NotGivenOr[List[types.AScalarFieldKeys] | None] = NOT_GIVEN,
    ) -> Optional[_PrismaModelT]:
        """Find a single A record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            A filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned A model
        order
            Order the returned A records by any field
        distinct
            Filter A records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.A
            The first A record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second A record ordered by the sInt field
        a = A.prisma().find_first(
            skip=1,
            order={
                'sInt': 'desc',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_first',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
            data_path=[],
            model=self._model,
            parser=_parsers.allow_none(self._model_parser),
        )

    def find_first_or_raise(
        self,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.AWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.AWhereUniqueInput | None] = NOT_GIVEN,
        include: NotGivenOr[types.AInclude | None] = NOT_GIVEN,
        order: NotGivenOr[types.AOrderByInput | list[types.AOrderByInput] | None] = NOT_GIVEN,
        distinct: NotGivenOr[list[types.AScalarFieldKeys] | None] = NOT_GIVEN,
    ) -> _PrismaModelT:
        """Find a single A record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            A filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned A model
        order
            Order the returned A records by any field
        distinct
            Filter A records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.A
            The first A record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second A record ordered by the inc_int field
        a = A.prisma().find_first_or_raise(
            skip=1,
            order={
                'inc_int': 'desc',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_first_or_raise',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def update(
        self,
        data: types.AUpdateInput,
        where: types.AWhereUniqueInput,
        include: NotGivenOr[types.AInclude | None] = NOT_GIVEN
    ) -> Optional[_PrismaModelT]:
        """Update a single A record.

        Parameters
        ----------
        data
            A record data specifying what to update
        where
            A filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned A model

        Returns
        -------
        prisma.models.A
            The updated A record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        a = A.prisma().update(
            where={
                'email': 'gahdcdhbj',
            },
            data={
                # data to update the A record to
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='update',
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
            ignore_exceptions=(errors.RecordNotFoundError,),
        )

    def upsert(
        self,
        where: types.AWhereUniqueInput,
        data: types.AUpsertInput,
        include: NotGivenOr[types.AInclude | None] = NOT_GIVEN,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            A filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned A model

        Returns
        -------
        prisma.models.A
            The created or updated A record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        a = A.prisma().upsert(
            where={
                'email': 'begiijahea',
            },
            data={
                'create': {
                    'email': 'begiijahea',
                    'int': 1589704933,
                    'sInt': 1243475898,
                    'bInt': 16437947652,
                },
                'update': {
                    'int': 1589704933,
                    'sInt': 1243475898,
                    'bInt': 16437947652,
                },
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='upsert',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def update_many(
        self,
        data: types.AUpdateManyMutationInput,
        where: types.AWhereInput,
    ) -> int:
        """Update multiple A records

        Parameters
        ----------
        data
            A data to update the selected A records to
        where
            Filter to select the A records to update

        Returns
        -------
        int
            The total number of A records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all A records
        total = A.prisma().update_many(
            data={
                'inc_sInt': 629039005
            },
            where={}
        )
        ```
        """
        return self._client._execute_json_proto(
            method='update_many',
            arguments={
                'data': data,
                'where': where,
            },
            data_path=['count'],
            model=self._model,
            parser=int,
        )

    @overload
    def count(
        self,
        select: NotGivenOr[None] = NOT_GIVEN,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.AWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.AWhereUniqueInput | None] = NOT_GIVEN,
    ) -> int:
        """Count the number of A records present in the database

        Parameters
        ----------
        select
            Select the A fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            A filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ACountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = A.prisma().count()

        # results: prisma.types.ACountAggregateOutput
        results = A.prisma().count(
            select={
                '_all': True,
                'bInt': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.ACountAggregateInput,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.AWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.AWhereUniqueInput | None] = NOT_GIVEN,
    ) -> types.ACountAggregateOutput:
        ...

    def count(
        self,
        select: NotGivenOr[types.ACountAggregateInput | None] = NOT_GIVEN,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.AWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.AWhereUniqueInput | None] = NOT_GIVEN,
    ) -> Union[int, types.ACountAggregateOutput]:
        """Count the number of A records present in the database

        Parameters
        ----------
        select
            Select the A fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            A filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ACountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = A.prisma().count()

        # results: prisma.types.ACountAggregateOutput
        results = A.prisma().count(
            select={
                '_all': True,
                'inc_bInt': True,
            },
        )
        ```
        """

        selection = select or {'_all': True}

        def parser(value: Any) -> int | types.ACountAggregateOutput:
            if is_mapping(select):
                return cast(types.ACountAggregateOutput, value['_count'])
            return int(value['_count']['_all'])

        return self._client._execute_json_proto(
            method='count',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
                'select': {
                    '_count': {
                        'select': selection,
                    },
                },
            },
            data_path=[],
            model=self._model,
            parser=parser,
        )

    def delete_many(
        self,
        where: NotGivenOr[types.AWhereInput | None] = NOT_GIVEN
    ) -> int:
        """Delete multiple A records.

        Parameters
        ----------
        where
            Optional A filter to find the records to be deleted

        Returns
        -------
        int
            The total number of A records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all A records
        total = A.prisma().delete_many()
        ```
        """
        return self._client._execute_json_proto(
            method='delete_many',
            arguments={
                'where': where,
            },
            data_path=['count'],
            model=self._model,
            parser=int,
        )

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: list['types.AScalarFieldKeys'],
        *,
        where: NotGivenOr['types.AWhereInput | None'] = NOT_GIVEN,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        avg: NotGivenOr['types.AAvgAggregateInput | None'] = NOT_GIVEN,
        sum: NotGivenOr['types.ASumAggregateInput | None'] = NOT_GIVEN,
        min: NotGivenOr['types.AMinAggregateInput | None'] = NOT_GIVEN,
        max: NotGivenOr['types.AMaxAggregateInput | None'] = NOT_GIVEN,
        having: NotGivenOr['types.AScalarWhereWithAggregatesInput | None'] = NOT_GIVEN,
        count: NotGivenOr['bool | types.ACountAggregateInput | None'] = NOT_GIVEN,
        order: NotGivenOr[Mapping['types.AScalarFieldKeys', 'types.SortOrder'] | list[Mapping['types.AScalarFieldKeys', 'types.SortOrder']] | None] = NOT_GIVEN,
    ) -> list['types.AGroupByOutput']:
        """Group A records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar A fields to group records by
        where
            A filter to select records
        take
            Limit the maximum number of A records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.AGroupByOutput]
            A list of dictionaries representing the A record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group A records by enum values
        # and count how many records are in each group
        results = A.prisma().group_by(
            ['enum'],
            count=True,
        )
        ```
        """
        if not order:
            if take:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        selection: SelectionSet = {key: True for key in by}
        if avg:
            selection['_avg'] = {'select': avg}

        if min:
            selection['_min'] = {'select': min}

        if sum:
            selection['_sum'] = {'select': sum}

        if max:
            selection['_max'] = {'select': max}

        if count:
            if count is True:
                selection['_count'] = {'select': {'_all': True}}
            elif isinstance(count, dict):
                selection['_count'] = {'select': count}

        return self._client._execute_json_proto(
            method='group_by',
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
                'select': selection,
            },
            model=self._model,
            data_path=[],
            parser=lambda v: v,
        )


class BActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
        '_model_parser',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model
        self._model_parser = _functools.partial(model_parse, self._model)

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.B]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = B.prisma().query_raw(
            'SELECT * FROM B WHERE id = $1',
            'bcbebgiaic',
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.B
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = B.prisma().query_first(
            'SELECT * FROM B WHERE float = $1',
            898613219.65837,
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.BCreateInput,
        include: NotGivenOr[types.BInclude | None] = NOT_GIVEN,
    ) -> _PrismaModelT:
        """Create a new B record.

        Parameters
        ----------
        data
            B record data
        include
            Specifies which relations should be loaded on the returned B model

        Returns
        -------
        prisma.models.B
            The created B record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a B record from just the required fields
        b = B.prisma().create(
            data={
                # data to create a B record
                'float': 954620057.121480,
                'd_float': 1047820095.130273,
                'decFloat': Decimal('893052245.28008'),
                'numFloat': Decimal('549668955.7679'),
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='create',
            arguments={
                'data': data,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def create_many(
        self,
        data: List[types.BCreateWithoutRelationsInput],
        *,
        skip_duplicates: NotGivenOr[bool | None] = NOT_GIVEN,
    ) -> int:
        """Create multiple B records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of B record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = B.prisma().create_many(
            data=[
                {
                    # data to create a B record
                    'float': 2098299345.24590,
                    'd_float': 811863863.138880,
                    'decFloat': Decimal('752577037.118766'),
                    'numFloat': Decimal('769681363.121429'),
                },
                {
                    # data to create a B record
                    'float': 1021417993.35150,
                    'd_float': 1321184815.36973,
                    'decFloat': Decimal('1191235013.62756'),
                    'numFloat': Decimal('1872952907.179328'),
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        return self._client._execute_json_proto(
            method='create_many',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            data_path=['count'],
            model=self._model,
            parser=int,
        )

    def delete(
        self,
        where: types.BWhereUniqueInput,
        include: NotGivenOr[types.BInclude | None] = NOT_GIVEN,
    ) -> Optional[_PrismaModelT]:
        """Delete a single B record.

        Parameters
        ----------
        where
            B filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned B model

        Returns
        -------
        prisma.models.B
            The deleted B record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        b = B.prisma().delete(
            where={
                'id': 'bibedjhcej',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='delete',
            arguments={
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
            ignore_exceptions=(errors.RecordNotFoundError,)
        )

    def find_unique(
        self,
        where: types.BWhereUniqueInput,
        include: NotGivenOr[types.BInclude | None] = NOT_GIVEN
    ) -> Optional[_PrismaModelT]:
        """Find a unique B record.

        Parameters
        ----------
        where
            B filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned B model

        Returns
        -------
        prisma.models.B
            The found B record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        b = B.prisma().find_unique(
            where={
                'id': 'bjcdajabfa',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_unique',
            arguments={
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=_parsers.allow_none(self._model_parser),
        )

    def find_unique_or_raise(
        self,
        where: types.BWhereUniqueInput,
        include: NotGivenOr[Optional[types.BInclude]] = NOT_GIVEN
    ) -> _PrismaModelT:
        """Find a unique B record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            B filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned B model

        Returns
        -------
        prisma.models.B
            The found B record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        b = B.prisma().find_unique_or_raise(
            where={
                'id': 'bchhceeeff',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_unique_or_raise',
            arguments={
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def find_many(
        self,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.BWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.BWhereUniqueInput | None] = NOT_GIVEN,
        include: NotGivenOr[types.BInclude | None] = NOT_GIVEN,
        order: NotGivenOr[types.BOrderByInput | List[types.BOrderByInput] | None] = NOT_GIVEN,
        distinct: NotGivenOr[List[types.BScalarFieldKeys] | None] = NOT_GIVEN,
    ) -> List[_PrismaModelT]:
        """Find multiple B records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of B records returned
        skip
            Ignore the first N results
        where
            B filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned B model
        order
            Order the returned B records by any field
        distinct
            Filter B records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.B]
            The list of all B records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 B records
        bs = B.prisma().find_many(take=10)

        # find the first 5 B records ordered by the d_float field
        bs = B.prisma().find_many(
            take=5,
            order={
                'd_float': 'desc',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_many',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
            data_path=[],
            model=self._model,
            parser=_parsers.as_list(self._model_parser),
        )

    def find_first(
        self,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.BWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.BWhereUniqueInput | None] = NOT_GIVEN,
        include: NotGivenOr[types.BInclude | None] = NOT_GIVEN,
        order: NotGivenOr[types.BOrderByInput | List[types.BOrderByInput] | None] = NOT_GIVEN,
        distinct: NotGivenOr[List[types.BScalarFieldKeys] | None] = NOT_GIVEN,
    ) -> Optional[_PrismaModelT]:
        """Find a single B record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            B filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned B model
        order
            Order the returned B records by any field
        distinct
            Filter B records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.B
            The first B record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second B record ordered by the decFloat field
        b = B.prisma().find_first(
            skip=1,
            order={
                'decFloat': 'desc',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_first',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
            data_path=[],
            model=self._model,
            parser=_parsers.allow_none(self._model_parser),
        )

    def find_first_or_raise(
        self,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.BWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.BWhereUniqueInput | None] = NOT_GIVEN,
        include: NotGivenOr[types.BInclude | None] = NOT_GIVEN,
        order: NotGivenOr[types.BOrderByInput | list[types.BOrderByInput] | None] = NOT_GIVEN,
        distinct: NotGivenOr[list[types.BScalarFieldKeys] | None] = NOT_GIVEN,
    ) -> _PrismaModelT:
        """Find a single B record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            B filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned B model
        order
            Order the returned B records by any field
        distinct
            Filter B records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.B
            The first B record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second B record ordered by the numFloat field
        b = B.prisma().find_first_or_raise(
            skip=1,
            order={
                'numFloat': 'desc',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_first_or_raise',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def update(
        self,
        data: types.BUpdateInput,
        where: types.BWhereUniqueInput,
        include: NotGivenOr[types.BInclude | None] = NOT_GIVEN
    ) -> Optional[_PrismaModelT]:
        """Update a single B record.

        Parameters
        ----------
        data
            B record data specifying what to update
        where
            B filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned B model

        Returns
        -------
        prisma.models.B
            The updated B record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        b = B.prisma().update(
            where={
                'id': 'bbgaifhdaa',
            },
            data={
                # data to update the B record to
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='update',
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
            ignore_exceptions=(errors.RecordNotFoundError,),
        )

    def upsert(
        self,
        where: types.BWhereUniqueInput,
        data: types.BUpsertInput,
        include: NotGivenOr[types.BInclude | None] = NOT_GIVEN,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            B filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned B model

        Returns
        -------
        prisma.models.B
            The created or updated B record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        b = B.prisma().upsert(
            where={
                'id': 'dgbcdaegb',
            },
            data={
                'create': {
                    'id': 'dgbcdaegb',
                    'float': 1021417993.35150,
                    'd_float': 1321184815.36973,
                    'decFloat': Decimal('1191235013.62756'),
                    'numFloat': Decimal('1872952907.179328'),
                },
                'update': {
                    'float': 1021417993.35150,
                    'd_float': 1321184815.36973,
                    'decFloat': Decimal('1191235013.62756'),
                    'numFloat': Decimal('1872952907.179328'),
                },
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='upsert',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def update_many(
        self,
        data: types.BUpdateManyMutationInput,
        where: types.BWhereInput,
    ) -> int:
        """Update multiple B records

        Parameters
        ----------
        data
            B data to update the selected B records to
        where
            Filter to select the B records to update

        Returns
        -------
        int
            The total number of B records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all B records
        total = B.prisma().update_many(
            data={
                'id': 'beagfbbjig'
            },
            where={}
        )
        ```
        """
        return self._client._execute_json_proto(
            method='update_many',
            arguments={
                'data': data,
                'where': where,
            },
            data_path=['count'],
            model=self._model,
            parser=int,
        )

    @overload
    def count(
        self,
        select: NotGivenOr[None] = NOT_GIVEN,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.BWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.BWhereUniqueInput | None] = NOT_GIVEN,
    ) -> int:
        """Count the number of B records present in the database

        Parameters
        ----------
        select
            Select the B fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            B filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.BCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = B.prisma().count()

        # results: prisma.types.BCountAggregateOutput
        results = B.prisma().count(
            select={
                '_all': True,
                'float': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.BCountAggregateInput,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.BWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.BWhereUniqueInput | None] = NOT_GIVEN,
    ) -> types.BCountAggregateOutput:
        ...

    def count(
        self,
        select: NotGivenOr[types.BCountAggregateInput | None] = NOT_GIVEN,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.BWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.BWhereUniqueInput | None] = NOT_GIVEN,
    ) -> Union[int, types.BCountAggregateOutput]:
        """Count the number of B records present in the database

        Parameters
        ----------
        select
            Select the B fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            B filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.BCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = B.prisma().count()

        # results: prisma.types.BCountAggregateOutput
        results = B.prisma().count(
            select={
                '_all': True,
                'd_float': True,
            },
        )
        ```
        """

        selection = select or {'_all': True}

        def parser(value: Any) -> int | types.BCountAggregateOutput:
            if is_mapping(select):
                return cast(types.BCountAggregateOutput, value['_count'])
            return int(value['_count']['_all'])

        return self._client._execute_json_proto(
            method='count',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
                'select': {
                    '_count': {
                        'select': selection,
                    },
                },
            },
            data_path=[],
            model=self._model,
            parser=parser,
        )

    def delete_many(
        self,
        where: NotGivenOr[types.BWhereInput | None] = NOT_GIVEN
    ) -> int:
        """Delete multiple B records.

        Parameters
        ----------
        where
            Optional B filter to find the records to be deleted

        Returns
        -------
        int
            The total number of B records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all B records
        total = B.prisma().delete_many()
        ```
        """
        return self._client._execute_json_proto(
            method='delete_many',
            arguments={
                'where': where,
            },
            data_path=['count'],
            model=self._model,
            parser=int,
        )

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: list['types.BScalarFieldKeys'],
        *,
        where: NotGivenOr['types.BWhereInput | None'] = NOT_GIVEN,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        avg: NotGivenOr['types.BAvgAggregateInput | None'] = NOT_GIVEN,
        sum: NotGivenOr['types.BSumAggregateInput | None'] = NOT_GIVEN,
        min: NotGivenOr['types.BMinAggregateInput | None'] = NOT_GIVEN,
        max: NotGivenOr['types.BMaxAggregateInput | None'] = NOT_GIVEN,
        having: NotGivenOr['types.BScalarWhereWithAggregatesInput | None'] = NOT_GIVEN,
        count: NotGivenOr['bool | types.BCountAggregateInput | None'] = NOT_GIVEN,
        order: NotGivenOr[Mapping['types.BScalarFieldKeys', 'types.SortOrder'] | list[Mapping['types.BScalarFieldKeys', 'types.SortOrder']] | None] = NOT_GIVEN,
    ) -> list['types.BGroupByOutput']:
        """Group B records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar B fields to group records by
        where
            B filter to select records
        take
            Limit the maximum number of B records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.BGroupByOutput]
            A list of dictionaries representing the B record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group B records by decFloat values
        # and count how many records are in each group
        results = B.prisma().group_by(
            ['decFloat'],
            count=True,
        )
        ```
        """
        if not order:
            if take:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        selection: SelectionSet = {key: True for key in by}
        if avg:
            selection['_avg'] = {'select': avg}

        if min:
            selection['_min'] = {'select': min}

        if sum:
            selection['_sum'] = {'select': sum}

        if max:
            selection['_max'] = {'select': max}

        if count:
            if count is True:
                selection['_count'] = {'select': {'_all': True}}
            elif isinstance(count, dict):
                selection['_count'] = {'select': count}

        return self._client._execute_json_proto(
            method='group_by',
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
                'select': selection,
            },
            model=self._model,
            data_path=[],
            parser=lambda v: v,
        )


class CActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
        '_model_parser',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model
        self._model_parser = _functools.partial(model_parse, self._model)

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.C]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = C.prisma().query_raw(
            'SELECT * FROM C WHERE char = $1',
            'beicihhijb',
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.C
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = C.prisma().query_first(
            'SELECT * FROM C WHERE v_char = $1',
            'fgggcdcjg',
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.CCreateInput,
        include: NotGivenOr[types.CInclude | None] = NOT_GIVEN,
    ) -> _PrismaModelT:
        """Create a new C record.

        Parameters
        ----------
        data
            C record data
        include
            Specifies which relations should be loaded on the returned C model

        Returns
        -------
        prisma.models.C
            The created C record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a C record from just the required fields
        c = C.prisma().create(
            data={
                # data to create a C record
                'char': 'ccjbbjigf',
                'v_char': 'bhfaabbaha',
                'text': 'ebajedhhf',
                'bit': 'jajacedge',
                'v_bit': 'hffgbabgf',
                'uuid': 'biacbiieja',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='create',
            arguments={
                'data': data,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def create_many(
        self,
        data: List[types.CCreateWithoutRelationsInput],
        *,
        skip_duplicates: NotGivenOr[bool | None] = NOT_GIVEN,
    ) -> int:
        """Create multiple C records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of C record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = C.prisma().create_many(
            data=[
                {
                    # data to create a C record
                    'char': 'cjejbgbff',
                    'v_char': 'fgeahddae',
                    'text': 'diageigcf',
                    'bit': 'badagbgeha',
                    'v_bit': 'ibgebbjch',
                    'uuid': 'baieajjiee',
                },
                {
                    # data to create a C record
                    'char': 'bahjhaccfd',
                    'v_char': 'hffhfabhi',
                    'text': 'bbcigiadhb',
                    'bit': 'cfjagbbae',
                    'v_bit': 'bbbfhdidef',
                    'uuid': 'bdadhibhec',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        return self._client._execute_json_proto(
            method='create_many',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            data_path=['count'],
            model=self._model,
            parser=int,
        )

    def delete(
        self,
        where: types.CWhereUniqueInput,
        include: NotGivenOr[types.CInclude | None] = NOT_GIVEN,
    ) -> Optional[_PrismaModelT]:
        """Delete a single C record.

        Parameters
        ----------
        where
            C filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned C model

        Returns
        -------
        prisma.models.C
            The deleted C record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        c = C.prisma().delete(
            where={
                # C where unique filter

            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='delete',
            arguments={
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
            ignore_exceptions=(errors.RecordNotFoundError,)
        )

    def find_unique(
        self,
        where: types.CWhereUniqueInput,
        include: NotGivenOr[types.CInclude | None] = NOT_GIVEN
    ) -> Optional[_PrismaModelT]:
        """Find a unique C record.

        Parameters
        ----------
        where
            C filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned C model

        Returns
        -------
        prisma.models.C
            The found C record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        c = C.prisma().find_unique(
            where={
                # C where unique filter

            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_unique',
            arguments={
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=_parsers.allow_none(self._model_parser),
        )

    def find_unique_or_raise(
        self,
        where: types.CWhereUniqueInput,
        include: NotGivenOr[Optional[types.CInclude]] = NOT_GIVEN
    ) -> _PrismaModelT:
        """Find a unique C record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            C filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned C model

        Returns
        -------
        prisma.models.C
            The found C record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        c = C.prisma().find_unique_or_raise(
            where={
                # C where unique filter

            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_unique_or_raise',
            arguments={
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def find_many(
        self,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.CWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.CWhereUniqueInput | None] = NOT_GIVEN,
        include: NotGivenOr[types.CInclude | None] = NOT_GIVEN,
        order: NotGivenOr[types.COrderByInput | List[types.COrderByInput] | None] = NOT_GIVEN,
        distinct: NotGivenOr[List[types.CScalarFieldKeys] | None] = NOT_GIVEN,
    ) -> List[_PrismaModelT]:
        """Find multiple C records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of C records returned
        skip
            Ignore the first N results
        where
            C filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned C model
        order
            Order the returned C records by any field
        distinct
            Filter C records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.C]
            The list of all C records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 C records
        cs = C.prisma().find_many(take=10)

        # find the first 5 C records ordered by the text field
        cs = C.prisma().find_many(
            take=5,
            order={
                'text': 'desc',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_many',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
            data_path=[],
            model=self._model,
            parser=_parsers.as_list(self._model_parser),
        )

    def find_first(
        self,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.CWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.CWhereUniqueInput | None] = NOT_GIVEN,
        include: NotGivenOr[types.CInclude | None] = NOT_GIVEN,
        order: NotGivenOr[types.COrderByInput | List[types.COrderByInput] | None] = NOT_GIVEN,
        distinct: NotGivenOr[List[types.CScalarFieldKeys] | None] = NOT_GIVEN,
    ) -> Optional[_PrismaModelT]:
        """Find a single C record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            C filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned C model
        order
            Order the returned C records by any field
        distinct
            Filter C records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.C
            The first C record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second C record ordered by the bit field
        c = C.prisma().find_first(
            skip=1,
            order={
                'bit': 'desc',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_first',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
            data_path=[],
            model=self._model,
            parser=_parsers.allow_none(self._model_parser),
        )

    def find_first_or_raise(
        self,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.CWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.CWhereUniqueInput | None] = NOT_GIVEN,
        include: NotGivenOr[types.CInclude | None] = NOT_GIVEN,
        order: NotGivenOr[types.COrderByInput | list[types.COrderByInput] | None] = NOT_GIVEN,
        distinct: NotGivenOr[list[types.CScalarFieldKeys] | None] = NOT_GIVEN,
    ) -> _PrismaModelT:
        """Find a single C record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            C filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned C model
        order
            Order the returned C records by any field
        distinct
            Filter C records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.C
            The first C record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second C record ordered by the v_bit field
        c = C.prisma().find_first_or_raise(
            skip=1,
            order={
                'v_bit': 'desc',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_first_or_raise',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def update(
        self,
        data: types.CUpdateInput,
        where: types.CWhereUniqueInput,
        include: NotGivenOr[types.CInclude | None] = NOT_GIVEN
    ) -> Optional[_PrismaModelT]:
        """Update a single C record.

        Parameters
        ----------
        data
            C record data specifying what to update
        where
            C filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned C model

        Returns
        -------
        prisma.models.C
            The updated C record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        c = C.prisma().update(
            where={
                # C where unique filter

            },
            data={
                # data to update the C record to
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='update',
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
            ignore_exceptions=(errors.RecordNotFoundError,),
        )

    def upsert(
        self,
        where: types.CWhereUniqueInput,
        data: types.CUpsertInput,
        include: NotGivenOr[types.CInclude | None] = NOT_GIVEN,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            C filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned C model

        Returns
        -------
        prisma.models.C
            The created or updated C record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        c = C.prisma().upsert(
            where={
                # C where unique filter
            },
            data={
                'create': {
                    # C data to be set if the record does not exist
                },
                'update': {
                    # C data to be set if the record does exist
                },
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='upsert',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def update_many(
        self,
        data: types.CUpdateManyMutationInput,
        where: types.CWhereInput,
    ) -> int:
        """Update multiple C records

        Parameters
        ----------
        data
            C data to update the selected C records to
        where
            Filter to select the C records to update

        Returns
        -------
        int
            The total number of C records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all C records
        total = C.prisma().update_many(
            data={
                'uuid': 'bfhdjaiejf'
            },
            where={}
        )
        ```
        """
        return self._client._execute_json_proto(
            method='update_many',
            arguments={
                'data': data,
                'where': where,
            },
            data_path=['count'],
            model=self._model,
            parser=int,
        )

    @overload
    def count(
        self,
        select: NotGivenOr[None] = NOT_GIVEN,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.CWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.CWhereUniqueInput | None] = NOT_GIVEN,
    ) -> int:
        """Count the number of C records present in the database

        Parameters
        ----------
        select
            Select the C fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            C filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.CCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = C.prisma().count()

        # results: prisma.types.CCountAggregateOutput
        results = C.prisma().count(
            select={
                '_all': True,
                'char': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.CCountAggregateInput,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.CWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.CWhereUniqueInput | None] = NOT_GIVEN,
    ) -> types.CCountAggregateOutput:
        ...

    def count(
        self,
        select: NotGivenOr[types.CCountAggregateInput | None] = NOT_GIVEN,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.CWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.CWhereUniqueInput | None] = NOT_GIVEN,
    ) -> Union[int, types.CCountAggregateOutput]:
        """Count the number of C records present in the database

        Parameters
        ----------
        select
            Select the C fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            C filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.CCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = C.prisma().count()

        # results: prisma.types.CCountAggregateOutput
        results = C.prisma().count(
            select={
                '_all': True,
                'v_char': True,
            },
        )
        ```
        """

        selection = select or {'_all': True}

        def parser(value: Any) -> int | types.CCountAggregateOutput:
            if is_mapping(select):
                return cast(types.CCountAggregateOutput, value['_count'])
            return int(value['_count']['_all'])

        return self._client._execute_json_proto(
            method='count',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
                'select': {
                    '_count': {
                        'select': selection,
                    },
                },
            },
            data_path=[],
            model=self._model,
            parser=parser,
        )

    def delete_many(
        self,
        where: NotGivenOr[types.CWhereInput | None] = NOT_GIVEN
    ) -> int:
        """Delete multiple C records.

        Parameters
        ----------
        where
            Optional C filter to find the records to be deleted

        Returns
        -------
        int
            The total number of C records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all C records
        total = C.prisma().delete_many()
        ```
        """
        return self._client._execute_json_proto(
            method='delete_many',
            arguments={
                'where': where,
            },
            data_path=['count'],
            model=self._model,
            parser=int,
        )

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: list['types.CScalarFieldKeys'],
        *,
        where: NotGivenOr['types.CWhereInput | None'] = NOT_GIVEN,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        avg: NotGivenOr['types.CAvgAggregateInput | None'] = NOT_GIVEN,
        sum: NotGivenOr['types.CSumAggregateInput | None'] = NOT_GIVEN,
        min: NotGivenOr['types.CMinAggregateInput | None'] = NOT_GIVEN,
        max: NotGivenOr['types.CMaxAggregateInput | None'] = NOT_GIVEN,
        having: NotGivenOr['types.CScalarWhereWithAggregatesInput | None'] = NOT_GIVEN,
        count: NotGivenOr['bool | types.CCountAggregateInput | None'] = NOT_GIVEN,
        order: NotGivenOr[Mapping['types.CScalarFieldKeys', 'types.SortOrder'] | list[Mapping['types.CScalarFieldKeys', 'types.SortOrder']] | None] = NOT_GIVEN,
    ) -> list['types.CGroupByOutput']:
        """Group C records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar C fields to group records by
        where
            C filter to select records
        take
            Limit the maximum number of C records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.CGroupByOutput]
            A list of dictionaries representing the C record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group C records by text values
        # and count how many records are in each group
        results = C.prisma().group_by(
            ['text'],
            count=True,
        )
        ```
        """
        if not order:
            if take:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        selection: SelectionSet = {key: True for key in by}
        if avg:
            selection['_avg'] = {'select': avg}

        if min:
            selection['_min'] = {'select': min}

        if sum:
            selection['_sum'] = {'select': sum}

        if max:
            selection['_max'] = {'select': max}

        if count:
            if count is True:
                selection['_count'] = {'select': {'_all': True}}
            elif isinstance(count, dict):
                selection['_count'] = {'select': count}

        return self._client._execute_json_proto(
            method='group_by',
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
                'select': selection,
            },
            model=self._model,
            data_path=[],
            parser=lambda v: v,
        )


class DActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
        '_model_parser',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model
        self._model_parser = _functools.partial(model_parse, self._model)

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.D]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = D.prisma().query_raw(
            'SELECT * FROM D WHERE id = $1',
            'bbjfijjadg',
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.D
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = D.prisma().query_first(
            'SELECT * FROM D WHERE bool = $1',
            False,
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.DCreateInput,
        include: NotGivenOr[types.DInclude | None] = NOT_GIVEN,
    ) -> _PrismaModelT:
        """Create a new D record.

        Parameters
        ----------
        data
            D record data
        include
            Specifies which relations should be loaded on the returned D model

        Returns
        -------
        prisma.models.D
            The created D record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a D record from just the required fields
        d = D.prisma().create(
            data={
                # data to create a D record
                'bool': True,
                'xml': 'bcgjbdgjdj',
                'json_': Json({'fhdbhifae': True}),
                'jsonb': Json({'beeacgfcej': True}),
                'binary': Base64.encode(b'bbifhdiicc'),
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='create',
            arguments={
                'data': data,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def create_many(
        self,
        data: List[types.DCreateWithoutRelationsInput],
        *,
        skip_duplicates: NotGivenOr[bool | None] = NOT_GIVEN,
    ) -> int:
        """Create multiple D records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of D record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = D.prisma().create_many(
            data=[
                {
                    # data to create a D record
                    'bool': False,
                    'xml': 'bjagdgabbg',
                    'json_': Json({'bjbbcffdij': True}),
                    'jsonb': Json({'begcgchdi': True}),
                    'binary': Base64.encode(b'bhbjceagbb'),
                },
                {
                    # data to create a D record
                    'bool': True,
                    'xml': 'bdidcfdfjd',
                    'json_': Json({'dfeggejja': True}),
                    'jsonb': Json({'gehbgghbj': True}),
                    'binary': Base64.encode(b'dfhaijeie'),
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        return self._client._execute_json_proto(
            method='create_many',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            data_path=['count'],
            model=self._model,
            parser=int,
        )

    def delete(
        self,
        where: types.DWhereUniqueInput,
        include: NotGivenOr[types.DInclude | None] = NOT_GIVEN,
    ) -> Optional[_PrismaModelT]:
        """Delete a single D record.

        Parameters
        ----------
        where
            D filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned D model

        Returns
        -------
        prisma.models.D
            The deleted D record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        d = D.prisma().delete(
            where={
                'id': 'gbcdjgicb',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='delete',
            arguments={
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
            ignore_exceptions=(errors.RecordNotFoundError,)
        )

    def find_unique(
        self,
        where: types.DWhereUniqueInput,
        include: NotGivenOr[types.DInclude | None] = NOT_GIVEN
    ) -> Optional[_PrismaModelT]:
        """Find a unique D record.

        Parameters
        ----------
        where
            D filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned D model

        Returns
        -------
        prisma.models.D
            The found D record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        d = D.prisma().find_unique(
            where={
                'id': 'biaibdagac',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_unique',
            arguments={
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=_parsers.allow_none(self._model_parser),
        )

    def find_unique_or_raise(
        self,
        where: types.DWhereUniqueInput,
        include: NotGivenOr[Optional[types.DInclude]] = NOT_GIVEN
    ) -> _PrismaModelT:
        """Find a unique D record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            D filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned D model

        Returns
        -------
        prisma.models.D
            The found D record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        d = D.prisma().find_unique_or_raise(
            where={
                'id': 'bbfbheibcd',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_unique_or_raise',
            arguments={
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def find_many(
        self,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.DWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.DWhereUniqueInput | None] = NOT_GIVEN,
        include: NotGivenOr[types.DInclude | None] = NOT_GIVEN,
        order: NotGivenOr[types.DOrderByInput | List[types.DOrderByInput] | None] = NOT_GIVEN,
        distinct: NotGivenOr[List[types.DScalarFieldKeys] | None] = NOT_GIVEN,
    ) -> List[_PrismaModelT]:
        """Find multiple D records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of D records returned
        skip
            Ignore the first N results
        where
            D filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned D model
        order
            Order the returned D records by any field
        distinct
            Filter D records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.D]
            The list of all D records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 D records
        ds = D.prisma().find_many(take=10)

        # find the first 5 D records ordered by the xml field
        ds = D.prisma().find_many(
            take=5,
            order={
                'xml': 'desc',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_many',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
            data_path=[],
            model=self._model,
            parser=_parsers.as_list(self._model_parser),
        )

    def find_first(
        self,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.DWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.DWhereUniqueInput | None] = NOT_GIVEN,
        include: NotGivenOr[types.DInclude | None] = NOT_GIVEN,
        order: NotGivenOr[types.DOrderByInput | List[types.DOrderByInput] | None] = NOT_GIVEN,
        distinct: NotGivenOr[List[types.DScalarFieldKeys] | None] = NOT_GIVEN,
    ) -> Optional[_PrismaModelT]:
        """Find a single D record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            D filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned D model
        order
            Order the returned D records by any field
        distinct
            Filter D records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.D
            The first D record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second D record ordered by the json_ field
        d = D.prisma().find_first(
            skip=1,
            order={
                'json_': 'desc',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_first',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
            data_path=[],
            model=self._model,
            parser=_parsers.allow_none(self._model_parser),
        )

    def find_first_or_raise(
        self,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.DWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.DWhereUniqueInput | None] = NOT_GIVEN,
        include: NotGivenOr[types.DInclude | None] = NOT_GIVEN,
        order: NotGivenOr[types.DOrderByInput | list[types.DOrderByInput] | None] = NOT_GIVEN,
        distinct: NotGivenOr[list[types.DScalarFieldKeys] | None] = NOT_GIVEN,
    ) -> _PrismaModelT:
        """Find a single D record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            D filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned D model
        order
            Order the returned D records by any field
        distinct
            Filter D records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.D
            The first D record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second D record ordered by the jsonb field
        d = D.prisma().find_first_or_raise(
            skip=1,
            order={
                'jsonb': 'desc',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_first_or_raise',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def update(
        self,
        data: types.DUpdateInput,
        where: types.DWhereUniqueInput,
        include: NotGivenOr[types.DInclude | None] = NOT_GIVEN
    ) -> Optional[_PrismaModelT]:
        """Update a single D record.

        Parameters
        ----------
        data
            D record data specifying what to update
        where
            D filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned D model

        Returns
        -------
        prisma.models.D
            The updated D record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        d = D.prisma().update(
            where={
                'id': 'hiagajie',
            },
            data={
                # data to update the D record to
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='update',
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
            ignore_exceptions=(errors.RecordNotFoundError,),
        )

    def upsert(
        self,
        where: types.DWhereUniqueInput,
        data: types.DUpsertInput,
        include: NotGivenOr[types.DInclude | None] = NOT_GIVEN,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            D filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned D model

        Returns
        -------
        prisma.models.D
            The created or updated D record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        d = D.prisma().upsert(
            where={
                'id': 'eeejidbif',
            },
            data={
                'create': {
                    'id': 'eeejidbif',
                    'bool': True,
                    'xml': 'bdidcfdfjd',
                    'json_': Json({'dfeggejja': True}),
                    'jsonb': Json({'gehbgghbj': True}),
                    'binary': Base64.encode(b'dfhaijeie'),
                },
                'update': {
                    'bool': True,
                    'xml': 'bdidcfdfjd',
                    'json_': Json({'dfeggejja': True}),
                    'jsonb': Json({'gehbgghbj': True}),
                    'binary': Base64.encode(b'dfhaijeie'),
                },
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='upsert',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def update_many(
        self,
        data: types.DUpdateManyMutationInput,
        where: types.DWhereInput,
    ) -> int:
        """Update multiple D records

        Parameters
        ----------
        data
            D data to update the selected D records to
        where
            Filter to select the D records to update

        Returns
        -------
        int
            The total number of D records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all D records
        total = D.prisma().update_many(
            data={
                'binary': Base64.encode(b'efgbahec')
            },
            where={}
        )
        ```
        """
        return self._client._execute_json_proto(
            method='update_many',
            arguments={
                'data': data,
                'where': where,
            },
            data_path=['count'],
            model=self._model,
            parser=int,
        )

    @overload
    def count(
        self,
        select: NotGivenOr[None] = NOT_GIVEN,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.DWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.DWhereUniqueInput | None] = NOT_GIVEN,
    ) -> int:
        """Count the number of D records present in the database

        Parameters
        ----------
        select
            Select the D fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            D filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.DCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = D.prisma().count()

        # results: prisma.types.DCountAggregateOutput
        results = D.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.DCountAggregateInput,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.DWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.DWhereUniqueInput | None] = NOT_GIVEN,
    ) -> types.DCountAggregateOutput:
        ...

    def count(
        self,
        select: NotGivenOr[types.DCountAggregateInput | None] = NOT_GIVEN,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.DWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.DWhereUniqueInput | None] = NOT_GIVEN,
    ) -> Union[int, types.DCountAggregateOutput]:
        """Count the number of D records present in the database

        Parameters
        ----------
        select
            Select the D fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            D filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.DCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = D.prisma().count()

        # results: prisma.types.DCountAggregateOutput
        results = D.prisma().count(
            select={
                '_all': True,
                'bool': True,
            },
        )
        ```
        """

        selection = select or {'_all': True}

        def parser(value: Any) -> int | types.DCountAggregateOutput:
            if is_mapping(select):
                return cast(types.DCountAggregateOutput, value['_count'])
            return int(value['_count']['_all'])

        return self._client._execute_json_proto(
            method='count',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
                'select': {
                    '_count': {
                        'select': selection,
                    },
                },
            },
            data_path=[],
            model=self._model,
            parser=parser,
        )

    def delete_many(
        self,
        where: NotGivenOr[types.DWhereInput | None] = NOT_GIVEN
    ) -> int:
        """Delete multiple D records.

        Parameters
        ----------
        where
            Optional D filter to find the records to be deleted

        Returns
        -------
        int
            The total number of D records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all D records
        total = D.prisma().delete_many()
        ```
        """
        return self._client._execute_json_proto(
            method='delete_many',
            arguments={
                'where': where,
            },
            data_path=['count'],
            model=self._model,
            parser=int,
        )

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: list['types.DScalarFieldKeys'],
        *,
        where: NotGivenOr['types.DWhereInput | None'] = NOT_GIVEN,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        avg: NotGivenOr['types.DAvgAggregateInput | None'] = NOT_GIVEN,
        sum: NotGivenOr['types.DSumAggregateInput | None'] = NOT_GIVEN,
        min: NotGivenOr['types.DMinAggregateInput | None'] = NOT_GIVEN,
        max: NotGivenOr['types.DMaxAggregateInput | None'] = NOT_GIVEN,
        having: NotGivenOr['types.DScalarWhereWithAggregatesInput | None'] = NOT_GIVEN,
        count: NotGivenOr['bool | types.DCountAggregateInput | None'] = NOT_GIVEN,
        order: NotGivenOr[Mapping['types.DScalarFieldKeys', 'types.SortOrder'] | list[Mapping['types.DScalarFieldKeys', 'types.SortOrder']] | None] = NOT_GIVEN,
    ) -> list['types.DGroupByOutput']:
        """Group D records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar D fields to group records by
        where
            D filter to select records
        take
            Limit the maximum number of D records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.DGroupByOutput]
            A list of dictionaries representing the D record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group D records by xml values
        # and count how many records are in each group
        results = D.prisma().group_by(
            ['xml'],
            count=True,
        )
        ```
        """
        if not order:
            if take:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        selection: SelectionSet = {key: True for key in by}
        if avg:
            selection['_avg'] = {'select': avg}

        if min:
            selection['_min'] = {'select': min}

        if sum:
            selection['_sum'] = {'select': sum}

        if max:
            selection['_max'] = {'select': max}

        if count:
            if count is True:
                selection['_count'] = {'select': {'_all': True}}
            elif isinstance(count, dict):
                selection['_count'] = {'select': count}

        return self._client._execute_json_proto(
            method='group_by',
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
                'select': selection,
            },
            model=self._model,
            data_path=[],
            parser=lambda v: v,
        )


class EActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
        '_model_parser',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model
        self._model_parser = _functools.partial(model_parse, self._model)

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.E]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = E.prisma().query_raw(
            'SELECT * FROM E WHERE id = $1',
            'hgjaiebfb',
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.E
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = E.prisma().query_first(
            'SELECT * FROM E WHERE date = $1',
            datetime.datetime.utcnow(),
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.ECreateInput,
        include: NotGivenOr[types.EInclude | None] = NOT_GIVEN,
    ) -> _PrismaModelT:
        """Create a new E record.

        Parameters
        ----------
        data
            E record data
        include
            Specifies which relations should be loaded on the returned E model

        Returns
        -------
        prisma.models.E
            The created E record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a E record from just the required fields
        e = E.prisma().create(
            data={
                # data to create a E record
                'date': datetime.datetime.utcnow(),
                'time': datetime.datetime.utcnow(),
                'ts': datetime.datetime.utcnow(),
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='create',
            arguments={
                'data': data,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def create_many(
        self,
        data: List[types.ECreateWithoutRelationsInput],
        *,
        skip_duplicates: NotGivenOr[bool | None] = NOT_GIVEN,
    ) -> int:
        """Create multiple E records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of E record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = E.prisma().create_many(
            data=[
                {
                    # data to create a E record
                    'date': datetime.datetime.utcnow(),
                    'time': datetime.datetime.utcnow(),
                    'ts': datetime.datetime.utcnow(),
                },
                {
                    # data to create a E record
                    'date': datetime.datetime.utcnow(),
                    'time': datetime.datetime.utcnow(),
                    'ts': datetime.datetime.utcnow(),
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        return self._client._execute_json_proto(
            method='create_many',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            data_path=['count'],
            model=self._model,
            parser=int,
        )

    def delete(
        self,
        where: types.EWhereUniqueInput,
        include: NotGivenOr[types.EInclude | None] = NOT_GIVEN,
    ) -> Optional[_PrismaModelT]:
        """Delete a single E record.

        Parameters
        ----------
        where
            E filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned E model

        Returns
        -------
        prisma.models.E
            The deleted E record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        e = E.prisma().delete(
            where={
                'id': 'bddefjjabc',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='delete',
            arguments={
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
            ignore_exceptions=(errors.RecordNotFoundError,)
        )

    def find_unique(
        self,
        where: types.EWhereUniqueInput,
        include: NotGivenOr[types.EInclude | None] = NOT_GIVEN
    ) -> Optional[_PrismaModelT]:
        """Find a unique E record.

        Parameters
        ----------
        where
            E filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned E model

        Returns
        -------
        prisma.models.E
            The found E record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        e = E.prisma().find_unique(
            where={
                'id': 'bbbghgbadh',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_unique',
            arguments={
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=_parsers.allow_none(self._model_parser),
        )

    def find_unique_or_raise(
        self,
        where: types.EWhereUniqueInput,
        include: NotGivenOr[Optional[types.EInclude]] = NOT_GIVEN
    ) -> _PrismaModelT:
        """Find a unique E record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            E filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned E model

        Returns
        -------
        prisma.models.E
            The found E record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        e = E.prisma().find_unique_or_raise(
            where={
                'id': 'bbhcgagaic',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_unique_or_raise',
            arguments={
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def find_many(
        self,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.EWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.EWhereUniqueInput | None] = NOT_GIVEN,
        include: NotGivenOr[types.EInclude | None] = NOT_GIVEN,
        order: NotGivenOr[types.EOrderByInput | List[types.EOrderByInput] | None] = NOT_GIVEN,
        distinct: NotGivenOr[List[types.EScalarFieldKeys] | None] = NOT_GIVEN,
    ) -> List[_PrismaModelT]:
        """Find multiple E records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of E records returned
        skip
            Ignore the first N results
        where
            E filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned E model
        order
            Order the returned E records by any field
        distinct
            Filter E records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.E]
            The list of all E records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 E records
        es = E.prisma().find_many(take=10)

        # find the first 5 E records ordered by the time field
        es = E.prisma().find_many(
            take=5,
            order={
                'time': 'desc',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_many',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
            data_path=[],
            model=self._model,
            parser=_parsers.as_list(self._model_parser),
        )

    def find_first(
        self,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.EWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.EWhereUniqueInput | None] = NOT_GIVEN,
        include: NotGivenOr[types.EInclude | None] = NOT_GIVEN,
        order: NotGivenOr[types.EOrderByInput | List[types.EOrderByInput] | None] = NOT_GIVEN,
        distinct: NotGivenOr[List[types.EScalarFieldKeys] | None] = NOT_GIVEN,
    ) -> Optional[_PrismaModelT]:
        """Find a single E record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            E filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned E model
        order
            Order the returned E records by any field
        distinct
            Filter E records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.E
            The first E record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second E record ordered by the ts field
        e = E.prisma().find_first(
            skip=1,
            order={
                'ts': 'desc',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_first',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
            data_path=[],
            model=self._model,
            parser=_parsers.allow_none(self._model_parser),
        )

    def find_first_or_raise(
        self,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.EWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.EWhereUniqueInput | None] = NOT_GIVEN,
        include: NotGivenOr[types.EInclude | None] = NOT_GIVEN,
        order: NotGivenOr[types.EOrderByInput | list[types.EOrderByInput] | None] = NOT_GIVEN,
        distinct: NotGivenOr[list[types.EScalarFieldKeys] | None] = NOT_GIVEN,
    ) -> _PrismaModelT:
        """Find a single E record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            E filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned E model
        order
            Order the returned E records by any field
        distinct
            Filter E records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.E
            The first E record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second E record ordered by the id field
        e = E.prisma().find_first_or_raise(
            skip=1,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='find_first_or_raise',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def update(
        self,
        data: types.EUpdateInput,
        where: types.EWhereUniqueInput,
        include: NotGivenOr[types.EInclude | None] = NOT_GIVEN
    ) -> Optional[_PrismaModelT]:
        """Update a single E record.

        Parameters
        ----------
        data
            E record data specifying what to update
        where
            E filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned E model

        Returns
        -------
        prisma.models.E
            The updated E record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        e = E.prisma().update(
            where={
                'id': 'ddaabegbb',
            },
            data={
                # data to update the E record to
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='update',
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
            ignore_exceptions=(errors.RecordNotFoundError,),
        )

    def upsert(
        self,
        where: types.EWhereUniqueInput,
        data: types.EUpsertInput,
        include: NotGivenOr[types.EInclude | None] = NOT_GIVEN,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            E filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned E model

        Returns
        -------
        prisma.models.E
            The created or updated E record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        e = E.prisma().upsert(
            where={
                'id': 'bhgibfgbbc',
            },
            data={
                'create': {
                    'id': 'bhgibfgbbc',
                    'date': datetime.datetime.utcnow(),
                    'time': datetime.datetime.utcnow(),
                    'ts': datetime.datetime.utcnow(),
                },
                'update': {
                    'date': datetime.datetime.utcnow(),
                    'time': datetime.datetime.utcnow(),
                    'ts': datetime.datetime.utcnow(),
                },
            },
        )
        ```
        """
        return self._client._execute_json_proto(
            method='upsert',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
            data_path=[],
            model=self._model,
            parser=self._model_parser,
        )

    def update_many(
        self,
        data: types.EUpdateManyMutationInput,
        where: types.EWhereInput,
    ) -> int:
        """Update multiple E records

        Parameters
        ----------
        data
            E data to update the selected E records to
        where
            Filter to select the E records to update

        Returns
        -------
        int
            The total number of E records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all E records
        total = E.prisma().update_many(
            data={
                'date': datetime.datetime.utcnow()
            },
            where={}
        )
        ```
        """
        return self._client._execute_json_proto(
            method='update_many',
            arguments={
                'data': data,
                'where': where,
            },
            data_path=['count'],
            model=self._model,
            parser=int,
        )

    @overload
    def count(
        self,
        select: NotGivenOr[None] = NOT_GIVEN,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.EWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.EWhereUniqueInput | None] = NOT_GIVEN,
    ) -> int:
        """Count the number of E records present in the database

        Parameters
        ----------
        select
            Select the E fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            E filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ECountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = E.prisma().count()

        # results: prisma.types.ECountAggregateOutput
        results = E.prisma().count(
            select={
                '_all': True,
                'time': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.ECountAggregateInput,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.EWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.EWhereUniqueInput | None] = NOT_GIVEN,
    ) -> types.ECountAggregateOutput:
        ...

    def count(
        self,
        select: NotGivenOr[types.ECountAggregateInput | None] = NOT_GIVEN,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        where: NotGivenOr[types.EWhereInput | None] = NOT_GIVEN,
        cursor: NotGivenOr[types.EWhereUniqueInput | None] = NOT_GIVEN,
    ) -> Union[int, types.ECountAggregateOutput]:
        """Count the number of E records present in the database

        Parameters
        ----------
        select
            Select the E fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            E filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ECountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = E.prisma().count()

        # results: prisma.types.ECountAggregateOutput
        results = E.prisma().count(
            select={
                '_all': True,
                'ts': True,
            },
        )
        ```
        """

        selection = select or {'_all': True}

        def parser(value: Any) -> int | types.ECountAggregateOutput:
            if is_mapping(select):
                return cast(types.ECountAggregateOutput, value['_count'])
            return int(value['_count']['_all'])

        return self._client._execute_json_proto(
            method='count',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
                'select': {
                    '_count': {
                        'select': selection,
                    },
                },
            },
            data_path=[],
            model=self._model,
            parser=parser,
        )

    def delete_many(
        self,
        where: NotGivenOr[types.EWhereInput | None] = NOT_GIVEN
    ) -> int:
        """Delete multiple E records.

        Parameters
        ----------
        where
            Optional E filter to find the records to be deleted

        Returns
        -------
        int
            The total number of E records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all E records
        total = E.prisma().delete_many()
        ```
        """
        return self._client._execute_json_proto(
            method='delete_many',
            arguments={
                'where': where,
            },
            data_path=['count'],
            model=self._model,
            parser=int,
        )

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: list['types.EScalarFieldKeys'],
        *,
        where: NotGivenOr['types.EWhereInput | None'] = NOT_GIVEN,
        take: NotGivenOr[int | None] = NOT_GIVEN,
        skip: NotGivenOr[int | None] = NOT_GIVEN,
        avg: NotGivenOr['types.EAvgAggregateInput | None'] = NOT_GIVEN,
        sum: NotGivenOr['types.ESumAggregateInput | None'] = NOT_GIVEN,
        min: NotGivenOr['types.EMinAggregateInput | None'] = NOT_GIVEN,
        max: NotGivenOr['types.EMaxAggregateInput | None'] = NOT_GIVEN,
        having: NotGivenOr['types.EScalarWhereWithAggregatesInput | None'] = NOT_GIVEN,
        count: NotGivenOr['bool | types.ECountAggregateInput | None'] = NOT_GIVEN,
        order: NotGivenOr[Mapping['types.EScalarFieldKeys', 'types.SortOrder'] | list[Mapping['types.EScalarFieldKeys', 'types.SortOrder']] | None] = NOT_GIVEN,
    ) -> list['types.EGroupByOutput']:
        """Group E records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar E fields to group records by
        where
            E filter to select records
        take
            Limit the maximum number of E records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.EGroupByOutput]
            A list of dictionaries representing the E record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group E records by id values
        # and count how many records are in each group
        results = E.prisma().group_by(
            ['id'],
            count=True,
        )
        ```
        """
        if not order:
            if take:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        selection: SelectionSet = {key: True for key in by}
        if avg:
            selection['_avg'] = {'select': avg}

        if min:
            selection['_min'] = {'select': min}

        if sum:
            selection['_sum'] = {'select': sum}

        if max:
            selection['_max'] = {'select': max}

        if count:
            if count is True:
                selection['_count'] = {'select': {'_all': True}}
            elif isinstance(count, dict):
                selection['_count'] = {'select': count}

        return self._client._execute_json_proto(
            method='group_by',
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
                'select': selection,
            },
            model=self._model,
            data_path=[],
            parser=lambda v: v,
        )



from . import models
'''