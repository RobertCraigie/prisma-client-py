'''
# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template models.py.jinja --
from pydantic import BaseModel

from . import fields, actions
from ._types import FuncType
from .builder import serialize_base64
from ._compat import PYDANTIC_V2, ConfigDict

if TYPE_CHECKING:
    from .client import Prisma


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class _PrismaModel(BaseModel):
    if PYDANTIC_V2:
        model_config: ClassVar[ConfigDict] = ConfigDict(
            use_enum_values=True,
            arbitrary_types_allowed=True,
            populate_by_name=True,
        )
    elif not TYPE_CHECKING:
        from ._compat import BaseConfig

        class Config(BaseConfig):
            use_enum_values: bool = True
            arbitrary_types_allowed: bool = True
            allow_population_by_field_name: bool = True
            json_encoders: Dict[Any, FuncType] = {
                fields.Base64: serialize_base64,
            }

    # TODO: ensure this is required by subclasses
    __prisma_model__: ClassVar[str]


class BasePost(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Post']] = 'Post'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.PostActions[_PrismaModelT]':
        from .client import get_client

        return actions.PostActions[_PrismaModelT](client or get_client(), cls)


class BaseUser(_PrismaModel):
    __prisma_model__: ClassVar[Literal['User']] = 'User'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.UserActions[_PrismaModelT]':
        from .client import get_client

        return actions.UserActions[_PrismaModelT](client or get_client(), cls)


class BaseM(_PrismaModel):
    __prisma_model__: ClassVar[Literal['M']] = 'M'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.MActions[_PrismaModelT]':
        from .client import get_client

        return actions.MActions[_PrismaModelT](client or get_client(), cls)


class BaseN(_PrismaModel):
    __prisma_model__: ClassVar[Literal['N']] = 'N'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.NActions[_PrismaModelT]':
        from .client import get_client

        return actions.NActions[_PrismaModelT](client or get_client(), cls)


class BaseOneOptional(_PrismaModel):
    __prisma_model__: ClassVar[Literal['OneOptional']] = 'OneOptional'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.OneOptionalActions[_PrismaModelT]':
        from .client import get_client

        return actions.OneOptionalActions[_PrismaModelT](client or get_client(), cls)


class BaseManyRequired(_PrismaModel):
    __prisma_model__: ClassVar[Literal['ManyRequired']] = 'ManyRequired'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.ManyRequiredActions[_PrismaModelT]':
        from .client import get_client

        return actions.ManyRequiredActions[_PrismaModelT](client or get_client(), cls)


class BaseLists(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Lists']] = 'Lists'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.ListsActions[_PrismaModelT]':
        from .client import get_client

        return actions.ListsActions[_PrismaModelT](client or get_client(), cls)


class BaseA(_PrismaModel):
    __prisma_model__: ClassVar[Literal['A']] = 'A'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.AActions[_PrismaModelT]':
        from .client import get_client

        return actions.AActions[_PrismaModelT](client or get_client(), cls)


class BaseB(_PrismaModel):
    __prisma_model__: ClassVar[Literal['B']] = 'B'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.BActions[_PrismaModelT]':
        from .client import get_client

        return actions.BActions[_PrismaModelT](client or get_client(), cls)


class BaseC(_PrismaModel):
    __prisma_model__: ClassVar[Literal['C']] = 'C'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.CActions[_PrismaModelT]':
        from .client import get_client

        return actions.CActions[_PrismaModelT](client or get_client(), cls)


class BaseD(_PrismaModel):
    __prisma_model__: ClassVar[Literal['D']] = 'D'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.DActions[_PrismaModelT]':
        from .client import get_client

        return actions.DActions[_PrismaModelT](client or get_client(), cls)


class BaseE(_PrismaModel):
    __prisma_model__: ClassVar[Literal['E']] = 'E'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.EActions[_PrismaModelT]':
        from .client import get_client

        return actions.EActions[_PrismaModelT](client or get_client(), cls)



'''