'''
# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Callable,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template models.py.jinja --
import os
import logging
import inspect
import warnings
from collections import OrderedDict

from pydantic import BaseConfig, BaseModel, Field, validator

from . import types, enums, errors, fields
from ._types import BaseModelT, FuncType
from .builder import serialize_base64
from .generator import partial_models_ctx, PartialModelField


class Config(BaseConfig):
    use_enum_values: bool = True
    arbitrary_types_allowed: bool = True
    allow_population_by_field_name: bool = True
    json_encoders: Dict[Any, FuncType] = {
        fields.Base64: serialize_base64,
    }


log: logging.Logger = logging.getLogger(__name__)
_created_partial_types: Set[str] = set()

# packages that implicitly subclass models
# this should not raise any warnings as users
# of these packages cannot do anything about it
_implicit_subclass_packages: Set[str] = {
    'fastapi',
}


def _maybe_warn_subclassing(new_model: str, base_model: str, *, stacklevel: int = 3) -> None:
    # at least 3 frames are guaranteed to exist if we are being called from __init_subclass__
    # stack: 1 = __init_subclass__, 2 = abc, 3 = <caller>
    try:
        frame = inspect.stack()[stacklevel]
        module = inspect.getmodule(frame[0])
        if module is not None:
            name, *_ = module.__name__.split('.')
            if name in _implicit_subclass_packages:
                return
    except Exception as exc:
        # disabling subclass warnings depending on the caller module is not a mission critical
        # feature, users can disable these warnings themselves
        # https://github.com/RobertCraigie/prisma-client-py/issues/278#issuecomment-1031421561
        log.debug('Ignoring exception encountered during stack inspection check: %s', str(exc))

    message = (
        'Subclassing models while using pseudo-recursive types may cause unexpected '
        'errors when static type checking;\n'
        'You can disable this warning by generating fully recursive types: \n'
        'https://prisma-client-py.readthedocs.io/en/stable/reference/config/#recursive\n'
        'or if that is not possible you can pass warn_subclass=False e.g.\n'
        f'  class {new_model}(prisma.models.{base_model}, warn_subclass=False):'
    )
    warnings.warn(message, errors.UnsupportedSubclassWarning, stacklevel=4)


class Post(BaseModel):
    """Post model documentation
    """

    id: _int
    created_at: datetime.datetime
    title: _str
    content: Optional[_str]
    published: _bool
    """Has the post been made public yet?
    """

    author: Optional['models.User']
    """Relation to the User model
    Second line comment with ' and "
    """

    author_id: _int

    Config = Config

    @classmethod
    def prisma(cls) -> 'actions.PostActions':
        from .client import get_client

        return actions.PostActions(get_client(), cls)

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: bool = True,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass:
            _maybe_warn_subclassing(cls.__name__, 'Post', stacklevel=3)

    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.PostKeys']] = None,
        exclude: Optional[Iterable['types.PostKeys']] = None,
        required: Optional[Iterable['types.PostKeys']] = None,
        optional: Optional[Iterable['types.PostKeys']] = None,
        relations: Optional[Mapping['types.PostRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.PostKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Post_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Post_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Post_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Post_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _Post_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _Post_relational_fields:
                        raise errors.UnknownRelationalFieldError('Post', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Post / {name} field.'
            ) from None

        models = partial_models_ctx.get()

        # mypy does not like this as we are assigning a
        # Dict[Literal[str]] to a Dict[str] but this is fine
        models[name] = fields  # type: ignore[assignment]
        partial_models_ctx.set(models)
        _created_partial_types.add(name)


class User(BaseModel):
    """User model documentation

    Third line comment
    """

    id: _int
    email: _str
    int: _int
    optional_int: Optional[_int]
    float: _float
    optional_float: Optional[_float]
    string: _str
    optional_string: Optional[_str]
    enum: 'enums.ABeautifulEnum'
    optional_enum: Optional['enums.ABeautifulEnum']
    boolean: _bool
    optional_boolean: Optional[_bool]
    posts: Optional[List['models.Post']]

    Config = Config

    @classmethod
    def prisma(cls) -> 'actions.UserActions':
        from .client import get_client

        return actions.UserActions(get_client(), cls)

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: bool = True,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass:
            _maybe_warn_subclassing(cls.__name__, 'User', stacklevel=3)

    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.UserKeys']] = None,
        exclude: Optional[Iterable['types.UserKeys']] = None,
        required: Optional[Iterable['types.UserKeys']] = None,
        optional: Optional[Iterable['types.UserKeys']] = None,
        relations: Optional[Mapping['types.UserRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.UserKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _User_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _User_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _User_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _User_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _User_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _User_relational_fields:
                        raise errors.UnknownRelationalFieldError('User', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid User / {name} field.'
            ) from None

        models = partial_models_ctx.get()

        # mypy does not like this as we are assigning a
        # Dict[Literal[str]] to a Dict[str] but this is fine
        models[name] = fields  # type: ignore[assignment]
        partial_models_ctx.set(models)
        _created_partial_types.add(name)


class M(BaseModel):
    """Represents a M record"""

    id: _int
    n: Optional[List['models.N']]
    int: _int
    optional_int: Optional[_int]
    float: _float
    optional_float: Optional[_float]
    string: _str
    optional_string: Optional[_str]
    enum: 'enums.ABeautifulEnum'
    optional_enum: Optional['enums.ABeautifulEnum']
    boolean: _bool
    optional_boolean: Optional[_bool]

    Config = Config

    @classmethod
    def prisma(cls) -> 'actions.MActions':
        from .client import get_client

        return actions.MActions(get_client(), cls)

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: bool = True,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass:
            _maybe_warn_subclassing(cls.__name__, 'M', stacklevel=3)

    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.MKeys']] = None,
        exclude: Optional[Iterable['types.MKeys']] = None,
        required: Optional[Iterable['types.MKeys']] = None,
        optional: Optional[Iterable['types.MKeys']] = None,
        relations: Optional[Mapping['types.MRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.MKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _M_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _M_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _M_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _M_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _M_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _M_relational_fields:
                        raise errors.UnknownRelationalFieldError('M', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid M / {name} field.'
            ) from None

        models = partial_models_ctx.get()

        # mypy does not like this as we are assigning a
        # Dict[Literal[str]] to a Dict[str] but this is fine
        models[name] = fields  # type: ignore[assignment]
        partial_models_ctx.set(models)
        _created_partial_types.add(name)


class N(BaseModel):
    """Represents a N record"""

    id: _int
    m: Optional[List['models.M']]
    int: _int
    optional_int: Optional[_int]
    float: _float
    optional_float: Optional[_float]
    string: _str
    optional_string: Optional[_str]
    json_: 'fields.Json'
    optional_json: Optional['fields.Json']
    enum: 'enums.ABeautifulEnum'
    optional_enum: Optional['enums.ABeautifulEnum']
    boolean: _bool
    optional_boolean: Optional[_bool]

    Config = Config

    @classmethod
    def prisma(cls) -> 'actions.NActions':
        from .client import get_client

        return actions.NActions(get_client(), cls)

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: bool = True,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass:
            _maybe_warn_subclassing(cls.__name__, 'N', stacklevel=3)

    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.NKeys']] = None,
        exclude: Optional[Iterable['types.NKeys']] = None,
        required: Optional[Iterable['types.NKeys']] = None,
        optional: Optional[Iterable['types.NKeys']] = None,
        relations: Optional[Mapping['types.NRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.NKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _N_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _N_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _N_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _N_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _N_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _N_relational_fields:
                        raise errors.UnknownRelationalFieldError('N', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid N / {name} field.'
            ) from None

        models = partial_models_ctx.get()

        # mypy does not like this as we are assigning a
        # Dict[Literal[str]] to a Dict[str] but this is fine
        models[name] = fields  # type: ignore[assignment]
        partial_models_ctx.set(models)
        _created_partial_types.add(name)


class OneOptional(BaseModel):
    """Represents a OneOptional record"""

    id: _int
    many: Optional[List['models.ManyRequired']]
    int: _int
    optional_int: Optional[_int]
    float: _float
    optional_float: Optional[_float]
    string: _str
    optional_string: Optional[_str]
    enum: 'enums.ABeautifulEnum'
    optional_enum: Optional['enums.ABeautifulEnum']
    boolean: _bool
    optional_boolean: Optional[_bool]

    Config = Config

    @classmethod
    def prisma(cls) -> 'actions.OneOptionalActions':
        from .client import get_client

        return actions.OneOptionalActions(get_client(), cls)

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: bool = True,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass:
            _maybe_warn_subclassing(cls.__name__, 'OneOptional', stacklevel=3)

    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.OneOptionalKeys']] = None,
        exclude: Optional[Iterable['types.OneOptionalKeys']] = None,
        required: Optional[Iterable['types.OneOptionalKeys']] = None,
        optional: Optional[Iterable['types.OneOptionalKeys']] = None,
        relations: Optional[Mapping['types.OneOptionalRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.OneOptionalKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _OneOptional_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _OneOptional_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _OneOptional_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _OneOptional_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _OneOptional_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _OneOptional_relational_fields:
                        raise errors.UnknownRelationalFieldError('OneOptional', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid OneOptional / {name} field.'
            ) from None

        models = partial_models_ctx.get()

        # mypy does not like this as we are assigning a
        # Dict[Literal[str]] to a Dict[str] but this is fine
        models[name] = fields  # type: ignore[assignment]
        partial_models_ctx.set(models)
        _created_partial_types.add(name)


class ManyRequired(BaseModel):
    """Represents a ManyRequired record"""

    id: _int
    one: Optional['models.OneOptional']
    one_optional_id: Optional[_int]
    int: _int
    optional_int: Optional[_int]
    float: _float
    optional_float: Optional[_float]
    string: _str
    optional_string: Optional[_str]
    enum: 'enums.ABeautifulEnum'
    optional_enum: Optional['enums.ABeautifulEnum']
    boolean: _bool
    optional_boolean: Optional[_bool]

    Config = Config

    @classmethod
    def prisma(cls) -> 'actions.ManyRequiredActions':
        from .client import get_client

        return actions.ManyRequiredActions(get_client(), cls)

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: bool = True,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass:
            _maybe_warn_subclassing(cls.__name__, 'ManyRequired', stacklevel=3)

    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.ManyRequiredKeys']] = None,
        exclude: Optional[Iterable['types.ManyRequiredKeys']] = None,
        required: Optional[Iterable['types.ManyRequiredKeys']] = None,
        optional: Optional[Iterable['types.ManyRequiredKeys']] = None,
        relations: Optional[Mapping['types.ManyRequiredRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.ManyRequiredKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _ManyRequired_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _ManyRequired_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _ManyRequired_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _ManyRequired_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _ManyRequired_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _ManyRequired_relational_fields:
                        raise errors.UnknownRelationalFieldError('ManyRequired', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid ManyRequired / {name} field.'
            ) from None

        models = partial_models_ctx.get()

        # mypy does not like this as we are assigning a
        # Dict[Literal[str]] to a Dict[str] but this is fine
        models[name] = fields  # type: ignore[assignment]
        partial_models_ctx.set(models)
        _created_partial_types.add(name)


class Lists(BaseModel):
    """Represents a Lists record"""

    id: _str
    strings: List[_str]
    bytes: List['fields.Base64']
    dates: List[datetime.datetime]
    bools: List[_bool]
    ints: List[_int]
    floats: List[_float]
    bigints: List[_int]
    json_objects: List['fields.Json']
    decimals: List[decimal.Decimal]

    Config = Config

    @classmethod
    def prisma(cls) -> 'actions.ListsActions':
        from .client import get_client

        return actions.ListsActions(get_client(), cls)

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: bool = True,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass:
            _maybe_warn_subclassing(cls.__name__, 'Lists', stacklevel=3)

    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.ListsKeys']] = None,
        exclude: Optional[Iterable['types.ListsKeys']] = None,
        required: Optional[Iterable['types.ListsKeys']] = None,
        optional: Optional[Iterable['types.ListsKeys']] = None,
        relations: Optional[Mapping['types.ListsRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.ListsKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _Lists_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _Lists_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _Lists_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _Lists_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True


            if relations:
                raise ValueError('Model: "Lists" has no relational fields.')
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Lists / {name} field.'
            ) from None

        models = partial_models_ctx.get()

        # mypy does not like this as we are assigning a
        # Dict[Literal[str]] to a Dict[str] but this is fine
        models[name] = fields  # type: ignore[assignment]
        partial_models_ctx.set(models)
        _created_partial_types.add(name)


class A(BaseModel):
    """Represents a A record"""

    email: _str
    name: Optional[_str]
    int: _int
    sInt: _int
    inc_int: _int
    inc_sInt: _int
    bInt: _int
    inc_bInt: _int
    enum: 'enums.ABeautifulEnum'

    Config = Config

    @classmethod
    def prisma(cls) -> 'actions.AActions':
        from .client import get_client

        return actions.AActions(get_client(), cls)

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: bool = True,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass:
            _maybe_warn_subclassing(cls.__name__, 'A', stacklevel=3)

    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.AKeys']] = None,
        exclude: Optional[Iterable['types.AKeys']] = None,
        required: Optional[Iterable['types.AKeys']] = None,
        optional: Optional[Iterable['types.AKeys']] = None,
        relations: Optional[Mapping['types.ARelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.AKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _A_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _A_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _A_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _A_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True


            if relations:
                raise ValueError('Model: "A" has no relational fields.')
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid A / {name} field.'
            ) from None

        models = partial_models_ctx.get()

        # mypy does not like this as we are assigning a
        # Dict[Literal[str]] to a Dict[str] but this is fine
        models[name] = fields  # type: ignore[assignment]
        partial_models_ctx.set(models)
        _created_partial_types.add(name)


class B(BaseModel):
    """Represents a B record"""

    id: _str
    float: _float
    d_float: _float
    decFloat: decimal.Decimal
    numFloat: decimal.Decimal

    Config = Config

    @classmethod
    def prisma(cls) -> 'actions.BActions':
        from .client import get_client

        return actions.BActions(get_client(), cls)

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: bool = True,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass:
            _maybe_warn_subclassing(cls.__name__, 'B', stacklevel=3)

    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.BKeys']] = None,
        exclude: Optional[Iterable['types.BKeys']] = None,
        required: Optional[Iterable['types.BKeys']] = None,
        optional: Optional[Iterable['types.BKeys']] = None,
        relations: Optional[Mapping['types.BRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.BKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _B_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _B_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _B_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _B_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True


            if relations:
                raise ValueError('Model: "B" has no relational fields.')
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid B / {name} field.'
            ) from None

        models = partial_models_ctx.get()

        # mypy does not like this as we are assigning a
        # Dict[Literal[str]] to a Dict[str] but this is fine
        models[name] = fields  # type: ignore[assignment]
        partial_models_ctx.set(models)
        _created_partial_types.add(name)


class C(BaseModel):
    """Represents a C record"""

    char: _str
    v_char: _str
    text: _str
    bit: _str
    v_bit: _str
    uuid: _str

    Config = Config

    @classmethod
    def prisma(cls) -> 'actions.CActions':
        from .client import get_client

        return actions.CActions(get_client(), cls)

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: bool = True,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass:
            _maybe_warn_subclassing(cls.__name__, 'C', stacklevel=3)

    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.CKeys']] = None,
        exclude: Optional[Iterable['types.CKeys']] = None,
        required: Optional[Iterable['types.CKeys']] = None,
        optional: Optional[Iterable['types.CKeys']] = None,
        relations: Optional[Mapping['types.CRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.CKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _C_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _C_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _C_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _C_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True


            if relations:
                raise ValueError('Model: "C" has no relational fields.')
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid C / {name} field.'
            ) from None

        models = partial_models_ctx.get()

        # mypy does not like this as we are assigning a
        # Dict[Literal[str]] to a Dict[str] but this is fine
        models[name] = fields  # type: ignore[assignment]
        partial_models_ctx.set(models)
        _created_partial_types.add(name)


class D(BaseModel):
    """Represents a D record"""

    id: _str
    bool: _bool
    xml: _str
    json_: 'fields.Json'
    jsonb: 'fields.Json'
    binary: 'fields.Base64'

    Config = Config

    @classmethod
    def prisma(cls) -> 'actions.DActions':
        from .client import get_client

        return actions.DActions(get_client(), cls)

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: bool = True,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass:
            _maybe_warn_subclassing(cls.__name__, 'D', stacklevel=3)

    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.DKeys']] = None,
        exclude: Optional[Iterable['types.DKeys']] = None,
        required: Optional[Iterable['types.DKeys']] = None,
        optional: Optional[Iterable['types.DKeys']] = None,
        relations: Optional[Mapping['types.DRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.DKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _D_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _D_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _D_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _D_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True


            if relations:
                raise ValueError('Model: "D" has no relational fields.')
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid D / {name} field.'
            ) from None

        models = partial_models_ctx.get()

        # mypy does not like this as we are assigning a
        # Dict[Literal[str]] to a Dict[str] but this is fine
        models[name] = fields  # type: ignore[assignment]
        partial_models_ctx.set(models)
        _created_partial_types.add(name)


class E(BaseModel):
    """Represents a E record"""

    id: _str
    date: datetime.datetime
    time: datetime.datetime
    ts: datetime.datetime

    Config = Config

    @classmethod
    def prisma(cls) -> 'actions.EActions':
        from .client import get_client

        return actions.EActions(get_client(), cls)

    # take *args and **kwargs so that other metaclasses can define arguments
    def __init_subclass__(
        cls,
        *args: Any,
        warn_subclass: bool = True,
        **kwargs: Any,
    ) -> None:
        super().__init_subclass__()
        if warn_subclass:
            _maybe_warn_subclassing(cls.__name__, 'E', stacklevel=3)

    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.EKeys']] = None,
        exclude: Optional[Iterable['types.EKeys']] = None,
        required: Optional[Iterable['types.EKeys']] = None,
        optional: Optional[Iterable['types.EKeys']] = None,
        relations: Optional[Mapping['types.ERelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.EKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _E_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _E_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _E_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _E_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True


            if relations:
                raise ValueError('Model: "E" has no relational fields.')
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid E / {name} field.'
            ) from None

        models = partial_models_ctx.get()

        # mypy does not like this as we are assigning a
        # Dict[Literal[str]] to a Dict[str] but this is fine
        models[name] = fields  # type: ignore[assignment]
        partial_models_ctx.set(models)
        _created_partial_types.add(name)



_Post_relational_fields: Set[str] = {
        'author',
    }
_Post_fields: Dict['types.PostKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'documentation': None,
        }),
        ('created_at', {
            'name': 'created_at',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'documentation': None,
        }),
        ('title', {
            'name': 'title',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'documentation': None,
        }),
        ('content', {
            'name': 'content',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'documentation': None,
        }),
        ('published', {
            'name': 'published',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'documentation': '''Has the post been made public yet?''',
        }),
        ('author', {
            'name': 'author',
            'is_list': False,
            'optional': True,
            'type': 'models.User',
            'documentation': '''Relation to the User model
Second line comment with ' and "''',
        }),
        ('author_id', {
            'name': 'author_id',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'documentation': None,
        }),
    ],
)

_User_relational_fields: Set[str] = {
        'posts',
    }
_User_fields: Dict['types.UserKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'documentation': None,
        }),
        ('email', {
            'name': 'email',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'documentation': None,
        }),
        ('int', {
            'name': 'int',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'documentation': None,
        }),
        ('optional_int', {
            'name': 'optional_int',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'documentation': None,
        }),
        ('float', {
            'name': 'float',
            'is_list': False,
            'optional': False,
            'type': '_float',
            'documentation': None,
        }),
        ('optional_float', {
            'name': 'optional_float',
            'is_list': False,
            'optional': True,
            'type': '_float',
            'documentation': None,
        }),
        ('string', {
            'name': 'string',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'documentation': None,
        }),
        ('optional_string', {
            'name': 'optional_string',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'documentation': None,
        }),
        ('enum', {
            'name': 'enum',
            'is_list': False,
            'optional': False,
            'type': 'enums.ABeautifulEnum',
            'documentation': None,
        }),
        ('optional_enum', {
            'name': 'optional_enum',
            'is_list': False,
            'optional': True,
            'type': 'enums.ABeautifulEnum',
            'documentation': None,
        }),
        ('boolean', {
            'name': 'boolean',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'documentation': None,
        }),
        ('optional_boolean', {
            'name': 'optional_boolean',
            'is_list': False,
            'optional': True,
            'type': '_bool',
            'documentation': None,
        }),
        ('posts', {
            'name': 'posts',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.Post\']',
            'documentation': None,
        }),
    ],
)

_M_relational_fields: Set[str] = {
        'n',
    }
_M_fields: Dict['types.MKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'documentation': None,
        }),
        ('n', {
            'name': 'n',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.N\']',
            'documentation': None,
        }),
        ('int', {
            'name': 'int',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'documentation': None,
        }),
        ('optional_int', {
            'name': 'optional_int',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'documentation': None,
        }),
        ('float', {
            'name': 'float',
            'is_list': False,
            'optional': False,
            'type': '_float',
            'documentation': None,
        }),
        ('optional_float', {
            'name': 'optional_float',
            'is_list': False,
            'optional': True,
            'type': '_float',
            'documentation': None,
        }),
        ('string', {
            'name': 'string',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'documentation': None,
        }),
        ('optional_string', {
            'name': 'optional_string',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'documentation': None,
        }),
        ('enum', {
            'name': 'enum',
            'is_list': False,
            'optional': False,
            'type': 'enums.ABeautifulEnum',
            'documentation': None,
        }),
        ('optional_enum', {
            'name': 'optional_enum',
            'is_list': False,
            'optional': True,
            'type': 'enums.ABeautifulEnum',
            'documentation': None,
        }),
        ('boolean', {
            'name': 'boolean',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'documentation': None,
        }),
        ('optional_boolean', {
            'name': 'optional_boolean',
            'is_list': False,
            'optional': True,
            'type': '_bool',
            'documentation': None,
        }),
    ],
)

_N_relational_fields: Set[str] = {
        'm',
    }
_N_fields: Dict['types.NKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'documentation': None,
        }),
        ('m', {
            'name': 'm',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.M\']',
            'documentation': None,
        }),
        ('int', {
            'name': 'int',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'documentation': None,
        }),
        ('optional_int', {
            'name': 'optional_int',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'documentation': None,
        }),
        ('float', {
            'name': 'float',
            'is_list': False,
            'optional': False,
            'type': '_float',
            'documentation': None,
        }),
        ('optional_float', {
            'name': 'optional_float',
            'is_list': False,
            'optional': True,
            'type': '_float',
            'documentation': None,
        }),
        ('string', {
            'name': 'string',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'documentation': None,
        }),
        ('optional_string', {
            'name': 'optional_string',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'documentation': None,
        }),
        ('json_', {
            'name': 'json_',
            'is_list': False,
            'optional': False,
            'type': 'fields.Json',
            'documentation': None,
        }),
        ('optional_json', {
            'name': 'optional_json',
            'is_list': False,
            'optional': True,
            'type': 'fields.Json',
            'documentation': None,
        }),
        ('enum', {
            'name': 'enum',
            'is_list': False,
            'optional': False,
            'type': 'enums.ABeautifulEnum',
            'documentation': None,
        }),
        ('optional_enum', {
            'name': 'optional_enum',
            'is_list': False,
            'optional': True,
            'type': 'enums.ABeautifulEnum',
            'documentation': None,
        }),
        ('boolean', {
            'name': 'boolean',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'documentation': None,
        }),
        ('optional_boolean', {
            'name': 'optional_boolean',
            'is_list': False,
            'optional': True,
            'type': '_bool',
            'documentation': None,
        }),
    ],
)

_OneOptional_relational_fields: Set[str] = {
        'many',
    }
_OneOptional_fields: Dict['types.OneOptionalKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'documentation': None,
        }),
        ('many', {
            'name': 'many',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.ManyRequired\']',
            'documentation': None,
        }),
        ('int', {
            'name': 'int',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'documentation': None,
        }),
        ('optional_int', {
            'name': 'optional_int',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'documentation': None,
        }),
        ('float', {
            'name': 'float',
            'is_list': False,
            'optional': False,
            'type': '_float',
            'documentation': None,
        }),
        ('optional_float', {
            'name': 'optional_float',
            'is_list': False,
            'optional': True,
            'type': '_float',
            'documentation': None,
        }),
        ('string', {
            'name': 'string',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'documentation': None,
        }),
        ('optional_string', {
            'name': 'optional_string',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'documentation': None,
        }),
        ('enum', {
            'name': 'enum',
            'is_list': False,
            'optional': False,
            'type': 'enums.ABeautifulEnum',
            'documentation': None,
        }),
        ('optional_enum', {
            'name': 'optional_enum',
            'is_list': False,
            'optional': True,
            'type': 'enums.ABeautifulEnum',
            'documentation': None,
        }),
        ('boolean', {
            'name': 'boolean',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'documentation': None,
        }),
        ('optional_boolean', {
            'name': 'optional_boolean',
            'is_list': False,
            'optional': True,
            'type': '_bool',
            'documentation': None,
        }),
    ],
)

_ManyRequired_relational_fields: Set[str] = {
        'one',
    }
_ManyRequired_fields: Dict['types.ManyRequiredKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'documentation': None,
        }),
        ('one', {
            'name': 'one',
            'is_list': False,
            'optional': True,
            'type': 'models.OneOptional',
            'documentation': None,
        }),
        ('one_optional_id', {
            'name': 'one_optional_id',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'documentation': None,
        }),
        ('int', {
            'name': 'int',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'documentation': None,
        }),
        ('optional_int', {
            'name': 'optional_int',
            'is_list': False,
            'optional': True,
            'type': '_int',
            'documentation': None,
        }),
        ('float', {
            'name': 'float',
            'is_list': False,
            'optional': False,
            'type': '_float',
            'documentation': None,
        }),
        ('optional_float', {
            'name': 'optional_float',
            'is_list': False,
            'optional': True,
            'type': '_float',
            'documentation': None,
        }),
        ('string', {
            'name': 'string',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'documentation': None,
        }),
        ('optional_string', {
            'name': 'optional_string',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'documentation': None,
        }),
        ('enum', {
            'name': 'enum',
            'is_list': False,
            'optional': False,
            'type': 'enums.ABeautifulEnum',
            'documentation': None,
        }),
        ('optional_enum', {
            'name': 'optional_enum',
            'is_list': False,
            'optional': True,
            'type': 'enums.ABeautifulEnum',
            'documentation': None,
        }),
        ('boolean', {
            'name': 'boolean',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'documentation': None,
        }),
        ('optional_boolean', {
            'name': 'optional_boolean',
            'is_list': False,
            'optional': True,
            'type': '_bool',
            'documentation': None,
        }),
    ],
)

_Lists_relational_fields: Set[str] = set()  # pyright: ignore[reportUnusedVariable]
_Lists_fields: Dict['types.ListsKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'documentation': None,
        }),
        ('strings', {
            'name': 'strings',
            'is_list': True,
            'optional': False,
            'type': 'List[_str]',
            'documentation': None,
        }),
        ('bytes', {
            'name': 'bytes',
            'is_list': True,
            'optional': False,
            'type': 'List[\'fields.Base64\']',
            'documentation': None,
        }),
        ('dates', {
            'name': 'dates',
            'is_list': True,
            'optional': False,
            'type': 'List[datetime.datetime]',
            'documentation': None,
        }),
        ('bools', {
            'name': 'bools',
            'is_list': True,
            'optional': False,
            'type': 'List[_bool]',
            'documentation': None,
        }),
        ('ints', {
            'name': 'ints',
            'is_list': True,
            'optional': False,
            'type': 'List[_int]',
            'documentation': None,
        }),
        ('floats', {
            'name': 'floats',
            'is_list': True,
            'optional': False,
            'type': 'List[_float]',
            'documentation': None,
        }),
        ('bigints', {
            'name': 'bigints',
            'is_list': True,
            'optional': False,
            'type': 'List[_int]',
            'documentation': None,
        }),
        ('json_objects', {
            'name': 'json_objects',
            'is_list': True,
            'optional': False,
            'type': 'List[\'fields.Json\']',
            'documentation': None,
        }),
        ('decimals', {
            'name': 'decimals',
            'is_list': True,
            'optional': False,
            'type': 'List[decimal.Decimal]',
            'documentation': None,
        }),
    ],
)

_A_relational_fields: Set[str] = set()  # pyright: ignore[reportUnusedVariable]
_A_fields: Dict['types.AKeys', PartialModelField] = OrderedDict(
    [
        ('email', {
            'name': 'email',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'documentation': None,
        }),
        ('name', {
            'name': 'name',
            'is_list': False,
            'optional': True,
            'type': '_str',
            'documentation': None,
        }),
        ('int', {
            'name': 'int',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'documentation': None,
        }),
        ('sInt', {
            'name': 'sInt',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'documentation': None,
        }),
        ('inc_int', {
            'name': 'inc_int',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'documentation': None,
        }),
        ('inc_sInt', {
            'name': 'inc_sInt',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'documentation': None,
        }),
        ('bInt', {
            'name': 'bInt',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'documentation': None,
        }),
        ('inc_bInt', {
            'name': 'inc_bInt',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'documentation': None,
        }),
        ('enum', {
            'name': 'enum',
            'is_list': False,
            'optional': False,
            'type': 'enums.ABeautifulEnum',
            'documentation': None,
        }),
    ],
)

_B_relational_fields: Set[str] = set()  # pyright: ignore[reportUnusedVariable]
_B_fields: Dict['types.BKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'documentation': None,
        }),
        ('float', {
            'name': 'float',
            'is_list': False,
            'optional': False,
            'type': '_float',
            'documentation': None,
        }),
        ('d_float', {
            'name': 'd_float',
            'is_list': False,
            'optional': False,
            'type': '_float',
            'documentation': None,
        }),
        ('decFloat', {
            'name': 'decFloat',
            'is_list': False,
            'optional': False,
            'type': 'decimal.Decimal',
            'documentation': None,
        }),
        ('numFloat', {
            'name': 'numFloat',
            'is_list': False,
            'optional': False,
            'type': 'decimal.Decimal',
            'documentation': None,
        }),
    ],
)

_C_relational_fields: Set[str] = set()  # pyright: ignore[reportUnusedVariable]
_C_fields: Dict['types.CKeys', PartialModelField] = OrderedDict(
    [
        ('char', {
            'name': 'char',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'documentation': None,
        }),
        ('v_char', {
            'name': 'v_char',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'documentation': None,
        }),
        ('text', {
            'name': 'text',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'documentation': None,
        }),
        ('bit', {
            'name': 'bit',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'documentation': None,
        }),
        ('v_bit', {
            'name': 'v_bit',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'documentation': None,
        }),
        ('uuid', {
            'name': 'uuid',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'documentation': None,
        }),
    ],
)

_D_relational_fields: Set[str] = set()  # pyright: ignore[reportUnusedVariable]
_D_fields: Dict['types.DKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'documentation': None,
        }),
        ('bool', {
            'name': 'bool',
            'is_list': False,
            'optional': False,
            'type': '_bool',
            'documentation': None,
        }),
        ('xml', {
            'name': 'xml',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'documentation': None,
        }),
        ('json_', {
            'name': 'json_',
            'is_list': False,
            'optional': False,
            'type': 'fields.Json',
            'documentation': None,
        }),
        ('jsonb', {
            'name': 'jsonb',
            'is_list': False,
            'optional': False,
            'type': 'fields.Json',
            'documentation': None,
        }),
        ('binary', {
            'name': 'binary',
            'is_list': False,
            'optional': False,
            'type': 'fields.Base64',
            'documentation': None,
        }),
    ],
)

_E_relational_fields: Set[str] = set()  # pyright: ignore[reportUnusedVariable]
_E_fields: Dict['types.EKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'documentation': None,
        }),
        ('date', {
            'name': 'date',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'documentation': None,
        }),
        ('time', {
            'name': 'time',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'documentation': None,
        }),
        ('ts', {
            'name': 'ts',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'documentation': None,
        }),
    ],
)



# we have to import ourselves as relation types are namespaced to models
# e.g. models.Post
from . import models, actions

# required to support relationships between models
Post.update_forward_refs()
User.update_forward_refs()
M.update_forward_refs()
N.update_forward_refs()
OneOptional.update_forward_refs()
ManyRequired.update_forward_refs()
Lists.update_forward_refs()
A.update_forward_refs()
B.update_forward_refs()
C.update_forward_refs()
D.update_forward_refs()
E.update_forward_refs()

'''