'
# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
import sys
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Callable,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal

# -- template client.py.jinja --
from types import TracebackType

from . import types, models, errors, actions
from .types import DatasourceOverride, HttpConfig
from ._types import BaseModelT
from .engine import AbstractEngine, QueryEngine
from .builder import QueryBuilder
from .generator.models import EngineType


__all__ = (
    'ENGINE_TYPE',
    'Prisma',
    'Client',
    'load_env',
    'register',
    'get_client',
)

SCHEMA = '''
// NOTE: modified from https://github.com/prisma/prisma/blob/master/src/packages/client/src/__tests__/integration/happy/exhaustive-schema/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator db {
  provider             = "prisma-client-py"
  interface            = "sync"
  recursive_type_depth = 3
  output               = "../../../.tests_cache/generation/exhaustive/__prisma_sync_output__/prisma"
}

model Post {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  title      String
  content    String?
  published  Boolean  @default(false)
  author     User     @relation(fields: [author_id], references: [id])
  author_id  Int
}

model User {
  id               Int             @id @default(autoincrement())
  email            String          @unique
  int              Int
  optional_int     Int?
  float            Float
  optional_float   Float?
  string           String
  optional_string  String?
  enum             ABeautifulEnum
  optional_enum    ABeautifulEnum?
  boolean          Boolean
  optional_boolean Boolean?
  posts            Post[]
}

model M {
  id               Int             @id @default(autoincrement())
  n                N[]
  int              Int
  optional_int     Int?
  float            Float
  optional_float   Float?
  string           String
  optional_string  String?
  enum             ABeautifulEnum
  optional_enum    ABeautifulEnum?
  boolean          Boolean
  optional_boolean Boolean?
}

model N {
  id               Int             @id @default(autoincrement())
  m                M[]
  int              Int
  optional_int     Int?
  float            Float
  optional_float   Float?
  string           String
  optional_string  String?
  json_            Json
  optional_json    Json?
  enum             ABeautifulEnum
  optional_enum    ABeautifulEnum?
  boolean          Boolean
  optional_boolean Boolean?
}

model OneOptional {
  id               Int             @id @default(autoincrement())
  many             ManyRequired[]
  int              Int
  optional_int     Int?
  float            Float
  optional_float   Float?
  string           String
  optional_string  String?
  enum             ABeautifulEnum
  optional_enum    ABeautifulEnum?
  boolean          Boolean
  optional_boolean Boolean?
}

model ManyRequired {
  id  Int          @id @default(autoincrement())
  one OneOptional? @relation(fields: [one_optional_id], references: [id])

  one_optional_id  Int?
  int              Int
  optional_int     Int?
  float            Float
  optional_float   Float?
  string           String
  optional_string  String?
  enum             ABeautifulEnum
  optional_enum    ABeautifulEnum?
  boolean          Boolean
  optional_boolean Boolean?
}

model Lists {
  id           String     @id @default(cuid())
  strings      String[]
  bytes        Bytes[]
  dates        DateTime[]
  bools        Boolean[]
  ints         Int[]
  floats       Float[]
  bigints      BigInt[]
  json_objects Json[]
  // TODO
  // decimals     Decimal[]
}

enum ABeautifulEnum {
  A
  B
  C
}

model A {
  email    String         @unique
  name     String?
  int      Int            @db.Integer
  sInt     Int            @db.SmallInt
  inc_int  Int            @default(autoincrement()) @db.Integer
  inc_sInt Int            @default(autoincrement()) @db.SmallInt
  bInt     BigInt         @db.BigInt
  inc_bInt BigInt         @default(autoincrement()) @db.BigInt
  enum     ABeautifulEnum @default(A)

  @@unique([name, email, enum])
}

model B {
  id      String @id @default(cuid())
  float   Float  @db.Real
  d_float Float  @db.DoublePrecision

  // TODO
  // decFloat Decimal @db.Decimal(2, 1)
  // numFloat Decimal @db.Decimal(10, 6)

  @@unique([float, d_float], name: "my_constraint")
}

model C {
  char   String @db.Char(10)
  v_char String @db.VarChar(11)
  text   String @db.Text
  bit    String @db.Bit(4)
  v_bit  String @db.VarBit(5)
  uuid   String @db.Uuid

  @@id([char, text], name: "my_id")
}

model D {
  id     String  @id @default(cuid())
  bool   Boolean @db.Boolean
  xml    String  @db.Xml
  json_  Json    @db.Json
  jsonb  Json    @db.JsonB
  binary Bytes   @db.ByteA
}

model E {
  id   String   @id @default(cuid())
  date DateTime @db.Date
  time DateTime @db.Time(3)
  ts   DateTime @db.Timestamp(3)
}

'''

ENGINE_TYPE: EngineType = EngineType.binary

RegisteredClient = Union['Prisma', Callable[[], 'Prisma']]
_registered_client: Optional[RegisteredClient] = None


class UseClientDefault:
    """For certain parameters such as `timeout=...` we can make our intent more clear
    by typing the parameter with this class rather than using None, for example:

    ```py
    def connect(timeout: Union[int, UseClientDefault] = UseClientDefault()) -> None: ...
    ```

    relays the intention more clearly than:

    ```py
    def connect(timeout: Optional[int] = None) -> None: ...
    ```

    This solution also allows us to indicate an "unset" state that is uniquely distinct
    from `None` which may be useful in the future.
    """


_USE_CLIENT_DEFAULT = UseClientDefault()


def load_env(*, override: bool = True, **kwargs: Any) -> None:
    """Load environemntal variables from dotenv files

    Loads from the following files relative to the current
    working directory:

    - .env
    - prisma/.env
    """
    from dotenv import load_dotenv

    load_dotenv('.env', override=override, **kwargs)
    load_dotenv('prisma/.env', override=override, **kwargs)


def register(client: RegisteredClient) -> None:
    """Register a client instance to be retrieved by `get_client()`

    This function _must_ only be called once, preferrably as soon as possible
    to avoid any potentially confusing errors with threads or processes.
    """
    global _registered_client

    if _registered_client is not None:
        raise errors.ClientAlreadyRegisteredError()

    if not isinstance(client, Prisma) and not callable(client):
        raise TypeError(
            f'Expected either a {Prisma} instance or a function that returns a {Prisma} but got {client} instead.'
        )

    _registered_client = client


def get_client() -> 'Prisma':
    """Get the registered client instance

    Raises errors.ClientNotRegisteredError() if no client instance has been registered.
    """
    registered = _registered_client
    if registered is None:
        raise errors.ClientNotRegisteredError() from None

    if isinstance(registered, Prisma):
        return registered

    client = registered()
    if not isinstance(client, Prisma):  # pyright: ignore[reportUnnecessaryIsInstance]
        raise TypeError(
            f'Registered function returned {client} instead of a {Prisma} instance.'
        )

    return client


class Prisma:
    post: 'actions.PostActions'
    user: 'actions.UserActions'
    m: 'actions.MActions'
    n: 'actions.NActions'
    oneoptional: 'actions.OneOptionalActions'
    manyrequired: 'actions.ManyRequiredActions'
    lists: 'actions.ListsActions'
    a: 'actions.AActions'
    b: 'actions.BActions'
    c: 'actions.CActions'
    d: 'actions.DActions'
    e: 'actions.EActions'

    __slots__ = (
        'post',
        'user',
        'm',
        'n',
        'oneoptional',
        'manyrequired',
        'lists',
        'a',
        'b',
        'c',
        'd',
        'e',
        '__engine',
        '_active_provider',
        '_log_queries',
        '_datasource',
        '_connect_timeout',
        '_http_config',
    )

    def __init__(
        self,
        *,
        use_dotenv: bool = True,
        log_queries: bool = False,
        auto_register: bool = False,
        datasource: Optional[DatasourceOverride] = None,
        connect_timeout: int = 10,
        http: Optional[HttpConfig] = None,
    ) -> None:
        self.post = actions.PostActions(self, models.Post)
        self.user = actions.UserActions(self, models.User)
        self.m = actions.MActions(self, models.M)
        self.n = actions.NActions(self, models.N)
        self.oneoptional = actions.OneOptionalActions(self, models.OneOptional)
        self.manyrequired = actions.ManyRequiredActions(self, models.ManyRequired)
        self.lists = actions.ListsActions(self, models.Lists)
        self.a = actions.AActions(self, models.A)
        self.b = actions.BActions(self, models.B)
        self.c = actions.CActions(self, models.C)
        self.d = actions.DActions(self, models.D)
        self.e = actions.EActions(self, models.E)
        self.__engine: Optional[AbstractEngine] = None
        self._active_provider = 'postgresql'
        self._log_queries = log_queries
        self._datasource = datasource
        self._connect_timeout = connect_timeout
        self._http_config: HttpConfig = http or {}

        if use_dotenv:
            load_env()

        if auto_register:
            register(self)

    def __del__(self) -> None:
        if self.__engine is not None:
            self.__engine.stop()
            self.__engine = None


    def __enter__(self) -> 'Prisma':
        self.connect()
        return self

    def __exit__(
        self,
        exc_type: Optional[Type[BaseException]],
        exc: Optional[BaseException],
        exc_tb: Optional[TracebackType],
    ) -> None:
        if self.is_connected():
            self.disconnect()

    def is_connected(self) -> bool:
        """Returns True if the client is connected to the query engine, False otherwise."""
        return self.__engine is not None

    def connect(
        self,
        timeout: Union[int, UseClientDefault] = _USE_CLIENT_DEFAULT,
    ) -> None:
        """Connect to the Prisma query engine.

        It is required to call this before accessing data.
        """
        if isinstance(timeout, UseClientDefault):
            timeout = self._connect_timeout

        if self.__engine is None:
            self.__engine = self._create_engine(dml=SCHEMA)

        datasources: Optional[List[types.DatasourceOverride]] = None
        if self._datasource is not None:
            ds = self._datasource.copy()
            ds.setdefault('name', 'db')
            datasources = [ds]

        self.__engine.connect(
            timeout=timeout,
            datasources=datasources,
        )

    def disconnect(self) -> None:
        """Disconnect the Prisma query engine."""
        if self.__engine is not None:
            self.__engine.stop()
            self.__engine = None

    def execute_raw(self, query: str, *args: Any) -> int:
        resp = self._execute(
            operation='mutation',
            method='executeRaw',
            arguments={
                'query': query,
                'parameters': args,
            }
        )
        return int(resp['data']['result'])

    @overload
    def query_first(self, query: str, *args: Any) -> Any:
        ...

    @overload
    def query_first(self, query: str, *args: Any, model: Type[BaseModelT]) -> Optional[BaseModelT]:
        ...

    def query_first(
        self, query: str, *args: Any, model: Optional[Type[BaseModelT]] = None
    ) -> Union[Optional[BaseModelT], Any]:
        if model is not None:
            results = self.query_raw(query, *args, model=model)
        else:
            results = self.query_raw(query, *args)

        if not results:
            return None

        return results[0]

    @overload
    def query_raw(self, query: str, *args: Any) -> Any:
        ...

    @overload
    def query_raw(self, query: str, *args: Any, model: Type[BaseModelT]) -> List[BaseModelT]:
        ...

    def query_raw(
        self, query: str, *args: Any, model: Optional[Type[BaseModelT]] = None
    ) -> Union[List[BaseModelT], Any]:
        resp = self._execute(
            operation='mutation',
            method='queryRaw',
            arguments={
                'query': query,
                'parameters': args,
            }
        )
        result = resp['data']['result']
        if model is not None:
            return [model.parse_obj(r) for r in result]
        return result

    def batch_(self) -> 'Batch':
        """Returns a context manager for grouping write queries into a single transaction."""
        return Batch(client=self)

    # TODO: don't return Any
    def _execute(
        self,
        method: str,
        operation: str,
        arguments: Dict[str, Any],
        model: Optional[str] = None,
        root_selection: Optional[List[str]] = None
    ) -> Any:
        builder = QueryBuilder(
            operation=operation,
            method=method,
            model=model,
            arguments=arguments,
            root_selection=root_selection,
        )
        return self._engine.query(builder.build())

    def _create_engine(self, dml: str = SCHEMA) -> AbstractEngine:
        if ENGINE_TYPE == EngineType.binary:
            return QueryEngine(dml=dml, log_queries=self._log_queries, **self._http_config)

        raise NotImplementedError(f'Unsupported engine type: {ENGINE_TYPE}')

    @property
    def _engine_class(self) -> Type[AbstractEngine]:
        if ENGINE_TYPE == EngineType.binary:
            return QueryEngine
        else:  # pragma: no cover
            raise RuntimeError(f'Unhandled engine type: {ENGINE_TYPE}')

    @property
    def _engine(self) -> AbstractEngine:
        engine = self.__engine
        if engine is None:
            raise errors.ClientNotConnectedError()
        return engine


# TODO: this should return the results as well
# TODO: don't require copy-pasting arguments between actions and batch actions
class Batch:
    post: 'PostBatchActions'
    user: 'UserBatchActions'
    m: 'MBatchActions'
    n: 'NBatchActions'
    oneoptional: 'OneOptionalBatchActions'
    manyrequired: 'ManyRequiredBatchActions'
    lists: 'ListsBatchActions'
    a: 'ABatchActions'
    b: 'BBatchActions'
    c: 'CBatchActions'
    d: 'DBatchActions'
    e: 'EBatchActions'

    def __init__(self, client: Prisma) -> None:
        self.__client = client
        self.__queries: List[str] = []
        self._active_provider = client._active_provider
        self.post = PostBatchActions(self)
        self.user = UserBatchActions(self)
        self.m = MBatchActions(self)
        self.n = NBatchActions(self)
        self.oneoptional = OneOptionalBatchActions(self)
        self.manyrequired = ManyRequiredBatchActions(self)
        self.lists = ListsBatchActions(self)
        self.a = ABatchActions(self)
        self.b = BBatchActions(self)
        self.c = CBatchActions(self)
        self.d = DBatchActions(self)
        self.e = EBatchActions(self)

    def _add(self, **kwargs: Any) -> None:
        builder = QueryBuilder(**kwargs)
        self.__queries.append(builder.build_query())

    def commit(self) -> None:
        """Execute the queries"""
        # TODO: normalise this, we should still call client._execute
        from .builder import dumps

        queries = self.__queries
        self.__queries = []

        payload = {
            'batch': [
                {
                    'query': query,
                    'variables': {},
                }
                for query in queries
            ],
            'transaction': True,
        }
        self.__client._engine.query(dumps(payload))

    def __enter__(self) -> 'Batch':
        return self

    def __exit__(
        self,
        exc_type: Optional[Type[BaseException]],
        exc: Optional[BaseException],
        exc_tb: Optional[TracebackType],
    ) -> None:
        if exc is None:
            self.commit()


# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class PostBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.PostCreateInput,
        include: Optional[types.PostInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model='Post',
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.PostCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model='Post',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.PostWhereUniqueInput,
        include: Optional[types.PostInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model='Post',
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.PostUpdateInput,
        where: types.PostWhereUniqueInput,
        include: Optional[types.PostInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model='Post',
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.PostWhereUniqueInput,
        data: types.PostUpsertInput,
        include: Optional[types.PostInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model='Post',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.PostUpdateManyMutationInput,
        where: types.PostWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model='Post',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.PostWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model='Post',
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class UserBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.UserCreateInput,
        include: Optional[types.UserInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model='User',
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.UserCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model='User',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model='User',
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.UserUpdateInput,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model='User',
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.UserWhereUniqueInput,
        data: types.UserUpsertInput,
        include: Optional[types.UserInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model='User',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.UserUpdateManyMutationInput,
        where: types.UserWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model='User',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.UserWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model='User',
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class MBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.MCreateInput,
        include: Optional[types.MInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model='M',
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.MCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model='M',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.MWhereUniqueInput,
        include: Optional[types.MInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model='M',
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.MUpdateInput,
        where: types.MWhereUniqueInput,
        include: Optional[types.MInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model='M',
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.MWhereUniqueInput,
        data: types.MUpsertInput,
        include: Optional[types.MInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model='M',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.MUpdateManyMutationInput,
        where: types.MWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model='M',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.MWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model='M',
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class NBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.NCreateInput,
        include: Optional[types.NInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model='N',
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.NCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model='N',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.NWhereUniqueInput,
        include: Optional[types.NInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model='N',
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.NUpdateInput,
        where: types.NWhereUniqueInput,
        include: Optional[types.NInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model='N',
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.NWhereUniqueInput,
        data: types.NUpsertInput,
        include: Optional[types.NInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model='N',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.NUpdateManyMutationInput,
        where: types.NWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model='N',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.NWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model='N',
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class OneOptionalBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.OneOptionalCreateInput,
        include: Optional[types.OneOptionalInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model='OneOptional',
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.OneOptionalCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model='OneOptional',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.OneOptionalWhereUniqueInput,
        include: Optional[types.OneOptionalInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model='OneOptional',
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.OneOptionalUpdateInput,
        where: types.OneOptionalWhereUniqueInput,
        include: Optional[types.OneOptionalInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model='OneOptional',
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.OneOptionalWhereUniqueInput,
        data: types.OneOptionalUpsertInput,
        include: Optional[types.OneOptionalInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model='OneOptional',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.OneOptionalUpdateManyMutationInput,
        where: types.OneOptionalWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model='OneOptional',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.OneOptionalWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model='OneOptional',
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class ManyRequiredBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.ManyRequiredCreateInput,
        include: Optional[types.ManyRequiredInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model='ManyRequired',
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.ManyRequiredCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model='ManyRequired',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.ManyRequiredWhereUniqueInput,
        include: Optional[types.ManyRequiredInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model='ManyRequired',
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.ManyRequiredUpdateInput,
        where: types.ManyRequiredWhereUniqueInput,
        include: Optional[types.ManyRequiredInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model='ManyRequired',
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.ManyRequiredWhereUniqueInput,
        data: types.ManyRequiredUpsertInput,
        include: Optional[types.ManyRequiredInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model='ManyRequired',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.ManyRequiredUpdateManyMutationInput,
        where: types.ManyRequiredWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model='ManyRequired',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.ManyRequiredWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model='ManyRequired',
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class ListsBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.ListsCreateInput,
        include: Optional[types.ListsInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model='Lists',
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.ListsCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model='Lists',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.ListsWhereUniqueInput,
        include: Optional[types.ListsInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model='Lists',
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.ListsUpdateInput,
        where: types.ListsWhereUniqueInput,
        include: Optional[types.ListsInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model='Lists',
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.ListsWhereUniqueInput,
        data: types.ListsUpsertInput,
        include: Optional[types.ListsInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model='Lists',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.ListsUpdateManyMutationInput,
        where: types.ListsWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model='Lists',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.ListsWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model='Lists',
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class ABatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.ACreateInput,
        include: Optional[types.AInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model='A',
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.ACreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model='A',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.AWhereUniqueInput,
        include: Optional[types.AInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model='A',
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.AUpdateInput,
        where: types.AWhereUniqueInput,
        include: Optional[types.AInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model='A',
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.AWhereUniqueInput,
        data: types.AUpsertInput,
        include: Optional[types.AInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model='A',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.AUpdateManyMutationInput,
        where: types.AWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model='A',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.AWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model='A',
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class BBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.BCreateInput,
        include: Optional[types.BInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model='B',
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.BCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model='B',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.BWhereUniqueInput,
        include: Optional[types.BInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model='B',
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.BUpdateInput,
        where: types.BWhereUniqueInput,
        include: Optional[types.BInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model='B',
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.BWhereUniqueInput,
        data: types.BUpsertInput,
        include: Optional[types.BInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model='B',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.BUpdateManyMutationInput,
        where: types.BWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model='B',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.BWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model='B',
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class CBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.CCreateInput,
        include: Optional[types.CInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model='C',
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.CCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model='C',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.CWhereUniqueInput,
        include: Optional[types.CInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model='C',
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.CUpdateInput,
        where: types.CWhereUniqueInput,
        include: Optional[types.CInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model='C',
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.CWhereUniqueInput,
        data: types.CUpsertInput,
        include: Optional[types.CInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model='C',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.CUpdateManyMutationInput,
        where: types.CWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model='C',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.CWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model='C',
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class DBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.DCreateInput,
        include: Optional[types.DInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model='D',
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.DCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model='D',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.DWhereUniqueInput,
        include: Optional[types.DInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model='D',
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.DUpdateInput,
        where: types.DWhereUniqueInput,
        include: Optional[types.DInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model='D',
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.DWhereUniqueInput,
        data: types.DUpsertInput,
        include: Optional[types.DInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model='D',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.DUpdateManyMutationInput,
        where: types.DWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model='D',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.DWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model='D',
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class EBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.ECreateInput,
        include: Optional[types.EInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model='E',
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.ECreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model='E',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.EWhereUniqueInput,
        include: Optional[types.EInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model='E',
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.EUpdateInput,
        where: types.EWhereUniqueInput,
        include: Optional[types.EInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model='E',
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.EWhereUniqueInput,
        data: types.EUpsertInput,
        include: Optional[types.EInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model='E',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.EUpdateManyMutationInput,
        where: types.EWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model='E',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.EWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model='E',
            arguments={'where': where},
            root_selection=['count'],
        )



Client = Prisma
'