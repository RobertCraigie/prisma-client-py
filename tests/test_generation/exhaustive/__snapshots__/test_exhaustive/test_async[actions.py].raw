'''
# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template actions.py.jinja --
import warnings

from . import types, errors
from ._types import BaseModelT


if TYPE_CHECKING:
    from .client import Client


class PostActions(Generic[BaseModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[BaseModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[BaseModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Post]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Post.prisma().query_raw(
            'SELECT * FROM Post WHERE id = $1',
            1103527590,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[BaseModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Post
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Post.prisma().query_first(
            'SELECT * FROM Post WHERE created_at = $1',
            datetime.datetime.utcnow(),
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.PostCreateInput,
        include: Optional[types.PostInclude] = None
    ) -> BaseModelT:
        """Create a new Post record.

        Parameters
        ----------
        data
            Post record data
        include
            Specifies which relations should be loaded on the returned Post model

        Returns
        -------
        prisma.models.Post
            The created Post record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Post record from just the required fields
        post = await Post.prisma().create(
            data={
                # data to create a Post record
                'title': 'dhheabfhf',
                'author_id': 662824084,
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='createOne',
            model='Post',
            arguments={
                'data': data,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def create_many(
        self,
        data: List[types.PostCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Post records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Post record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Post.prisma().create_many(
            data=[
                {
                    # data to create a Post record
                    'title': 'bbehjachib',
                    'author_id': 2035015474,
                },
                {
                    # data to create a Post record
                    'title': 'dgiiaaijj',
                    'author_id': 1508029952,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            operation='mutation',
            method='createMany',
            model='Post',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.PostWhereUniqueInput,
        include: Optional[types.PostInclude] = None
    ) -> Optional[BaseModelT]:
        """Delete a single Post record.

        Parameters
        ----------
        where
            Post filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Post model

        Returns
        -------
        prisma.models.Post
            The deleted Post record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        post = await Post.prisma().delete(
            where={
                'id': 486256185,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='deleteOne',
                model='Post',
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def find_unique(
        self,
        where: types.PostWhereUniqueInput,
        include: Optional[types.PostInclude] = None
    ) -> Optional[BaseModelT]:
        """Find a unique Post record.

        Parameters
        ----------
        where
            Post filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Post model

        Returns
        -------
        prisma.models.Post
            The found Post record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        post = await Post.prisma().find_unique(
            where={
                'id': 1062517886,
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findUnique',
            model='Post',
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PostWhereInput] = None,
        cursor: Optional[types.PostWhereUniqueInput] = None,
        include: Optional[types.PostInclude] = None,
        order: Optional[Union[types.PostOrderByInput, List[types.PostOrderByInput]]] = None,
        distinct: Optional[List[types.PostScalarFieldKeys]] = None,
    ) -> List[BaseModelT]:
        """Find multiple Post records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Post records returned
        skip
            Ignore the first N results
        where
            Post filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Post model
        order
            Order the returned Post records by any field
        distinct
            Filter Post records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Post]
            The list of all Post records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Post records
        posts = await Post.prisma().find_many(take=10)

        # find the first 5 Post records ordered by the title field
        posts = await Post.prisma().find_many(
            take=5,
            order={
                'title': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findMany',
            model='Post',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [self._model.parse_obj(r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.PostWhereInput] = None,
        cursor: Optional[types.PostWhereUniqueInput] = None,
        include: Optional[types.PostInclude] = None,
        order: Optional[Union[types.PostOrderByInput, List[types.PostOrderByInput]]] = None,
        distinct: Optional[List[types.PostScalarFieldKeys]] = None,
    ) -> Optional[BaseModelT]:
        """Find a single Post record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Post filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Post model
        order
            Order the returned Post records by any field
        distinct
            Filter Post records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Post
            The first Post record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Post record ordered by the content field
        post = await Post.prisma().find_first(
            skip=1,
            order={
                'content': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findFirst',
            model='Post',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def update(
        self,
        data: types.PostUpdateInput,
        where: types.PostWhereUniqueInput,
        include: Optional[types.PostInclude] = None
    ) -> Optional[BaseModelT]:
        """Update a single Post record.

        Parameters
        ----------
        data
            Post record data specifying what to update
        where
            Post filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Post model

        Returns
        -------
        prisma.models.Post
            The updated Post record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        post = await Post.prisma().update(
            where={
                'id': 267834847,
            },
            data={
                # data to update the Post record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='updateOne',
                model='Post',
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def upsert(
        self,
        where: types.PostWhereUniqueInput,
        data: types.PostUpsertInput,
        include: Optional[types.PostInclude] = None,
    ) -> BaseModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Post filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Post model

        Returns
        -------
        prisma.models.Post
            The created or updated Post record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        post = await Post.prisma().upsert(
            where={
                'id': 180171308,
            },
            data={
                'create': {
                    'id': 180171308,
                    'title': 'dgiiaaijj',
                    'author_id': 1508029952,
                },
                'update': {
                    'title': 'dgiiaaijj',
                    'author_id': 1508029952,
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='upsertOne',
            model='Post',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def update_many(
        self,
        data: types.PostUpdateManyMutationInput,
        where: types.PostWhereInput,
    ) -> int:
        """Update multiple Post records

        Parameters
        ----------
        data
            Post data to update the selected Post records to
        where
            Filter to select the Post records to update

        Returns
        -------
        int
            The total number of Post records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Post records
        total = await Post.prisma().update_many(
            data={
                'published': False
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='updateMany',
            model='Post',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PostWhereInput] = None,
        cursor: Optional[types.PostWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Post records present in the database

        Parameters
        ----------
        select
            Select the Post fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Post filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.PostCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Post.prisma().count()

        # results: prisma.types.PostCountAggregateOutput
        results = await Post.prisma().count(
            select={
                '_all': True,
                'author_id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.PostCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PostWhereInput] = None,
        cursor: Optional[types.PostWhereUniqueInput] = None,
    ) -> types.PostCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.PostCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PostWhereInput] = None,
        cursor: Optional[types.PostWhereUniqueInput] = None,
    ) -> Union[int, types.PostCountAggregateOutput]:
        """Count the number of Post records present in the database

        Parameters
        ----------
        select
            Select the Post fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Post filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.PostCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Post.prisma().count()

        # results: prisma.types.PostCountAggregateOutput
        results = await Post.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            operation='query',
            method='aggregate',
            model='Post',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.PostCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.PostWhereInput] = None
    ) -> int:
        """Delete multiple Post records.

        Parameters
        ----------
        where
            Optional Post filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Post records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Post records
        total = await Post.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='deleteMany',
            model='Post',
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.PostScalarFieldKeys'],
        *,
        where: Optional['types.PostWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.PostAvgAggregateInput'] = None,
        sum: Optional['types.PostSumAggregateInput'] = None,
        min: Optional['types.PostMinAggregateInput'] = None,
        max: Optional['types.PostMaxAggregateInput'] = None,
        having: Optional['types.PostScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.PostCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.PostScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.PostScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.PostGroupByOutput']:
        """Group Post records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Post fields to group records by
        where
            Post filter to select records
        take
            Limit the maximum number of Post records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.PostGroupByOutput]
            A list of dictionaries representing the Post record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Post records by created_at values
        # and count how many records are in each group
        results = await Post.prisma().group_by(
            ['created_at'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            operation='query',
            method='groupBy',
            model='Post',
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class UserActions(Generic[BaseModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[BaseModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[BaseModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.User]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await User.prisma().query_raw(
            'SELECT * FROM User WHERE id = $1',
            595337866,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[BaseModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.User
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await User.prisma().query_first(
            'SELECT * FROM User WHERE email = $1',
            'hjaecfifb',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.UserCreateInput,
        include: Optional[types.UserInclude] = None
    ) -> BaseModelT:
        """Create a new User record.

        Parameters
        ----------
        data
            User record data
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The created User record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a User record from just the required fields
        user = await User.prisma().create(
            data={
                # data to create a User record
                'email': 'cbbbjbfcii',
                'int': 1149758321,
                'float': 1644289366.138829,
                'string': 'bgehebiafc',
                'enum': enums.ABeautifulEnum.A,
                'boolean': False,
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='createOne',
            model='User',
            arguments={
                'data': data,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def create_many(
        self,
        data: List[types.UserCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple User records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of User record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await User.prisma().create_many(
            data=[
                {
                    # data to create a User record
                    'email': 'bhghchehcc',
                    'int': 326272115,
                    'float': 1343201072.67578,
                    'string': 'heejgedji',
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': False,
                },
                {
                    # data to create a User record
                    'email': 'bbbgbhfjge',
                    'int': 861472101,
                    'float': 1303003706.168663,
                    'string': 'caaaedabfc',
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': False,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            operation='mutation',
            method='createMany',
            model='User',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[BaseModelT]:
        """Delete a single User record.

        Parameters
        ----------
        where
            User filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The deleted User record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await User.prisma().delete(
            where={
                'id': 1860847622,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='deleteOne',
                model='User',
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def find_unique(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[BaseModelT]:
        """Find a unique User record.

        Parameters
        ----------
        where
            User filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The found User record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await User.prisma().find_unique(
            where={
                'id': 1448521415,
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findUnique',
            model='User',
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
        include: Optional[types.UserInclude] = None,
        order: Optional[Union[types.UserOrderByInput, List[types.UserOrderByInput]]] = None,
        distinct: Optional[List[types.UserScalarFieldKeys]] = None,
    ) -> List[BaseModelT]:
        """Find multiple User records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of User records returned
        skip
            Ignore the first N results
        where
            User filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned User model
        order
            Order the returned User records by any field
        distinct
            Filter User records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.User]
            The list of all User records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 User records
        users = await User.prisma().find_many(take=10)

        # find the first 5 User records ordered by the int field
        users = await User.prisma().find_many(
            take=5,
            order={
                'int': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findMany',
            model='User',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [self._model.parse_obj(r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
        include: Optional[types.UserInclude] = None,
        order: Optional[Union[types.UserOrderByInput, List[types.UserOrderByInput]]] = None,
        distinct: Optional[List[types.UserScalarFieldKeys]] = None,
    ) -> Optional[BaseModelT]:
        """Find a single User record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            User filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned User model
        order
            Order the returned User records by any field
        distinct
            Filter User records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.User
            The first User record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second User record ordered by the optional_int field
        user = await User.prisma().find_first(
            skip=1,
            order={
                'optional_int': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findFirst',
            model='User',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def update(
        self,
        data: types.UserUpdateInput,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[BaseModelT]:
        """Update a single User record.

        Parameters
        ----------
        data
            User record data specifying what to update
        where
            User filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The updated User record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await User.prisma().update(
            where={
                'id': 1628650740,
            },
            data={
                # data to update the User record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='updateOne',
                model='User',
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def upsert(
        self,
        where: types.UserWhereUniqueInput,
        data: types.UserUpsertInput,
        include: Optional[types.UserInclude] = None,
    ) -> BaseModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            User filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The created or updated User record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await User.prisma().upsert(
            where={
                'id': 1249606685,
            },
            data={
                'create': {
                    'id': 1249606685,
                    'email': 'bbbgbhfjge',
                    'int': 861472101,
                    'float': 1303003706.168663,
                    'string': 'caaaedabfc',
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': False,
                },
                'update': {
                    'email': 'bbbgbhfjge',
                    'int': 861472101,
                    'float': 1303003706.168663,
                    'string': 'caaaedabfc',
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': False,
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='upsertOne',
            model='User',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def update_many(
        self,
        data: types.UserUpdateManyMutationInput,
        where: types.UserWhereInput,
    ) -> int:
        """Update multiple User records

        Parameters
        ----------
        data
            User data to update the selected User records to
        where
            Filter to select the User records to update

        Returns
        -------
        int
            The total number of User records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all User records
        total = await User.prisma().update_many(
            data={
                'float': 835903122.76371
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='updateMany',
            model='User',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
    ) -> int:
        """Count the number of User records present in the database

        Parameters
        ----------
        select
            Select the User fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            User filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await User.prisma().count()

        # results: prisma.types.UserCountAggregateOutput
        results = await User.prisma().count(
            select={
                '_all': True,
                'optional_float': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.UserCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
    ) -> types.UserCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.UserCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
    ) -> Union[int, types.UserCountAggregateOutput]:
        """Count the number of User records present in the database

        Parameters
        ----------
        select
            Select the User fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            User filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await User.prisma().count()

        # results: prisma.types.UserCountAggregateOutput
        results = await User.prisma().count(
            select={
                '_all': True,
                'string': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            operation='query',
            method='aggregate',
            model='User',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.UserCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.UserWhereInput] = None
    ) -> int:
        """Delete multiple User records.

        Parameters
        ----------
        where
            Optional User filter to find the records to be deleted

        Returns
        -------
        int
            The total number of User records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all User records
        total = await User.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='deleteMany',
            model='User',
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.UserScalarFieldKeys'],
        *,
        where: Optional['types.UserWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.UserAvgAggregateInput'] = None,
        sum: Optional['types.UserSumAggregateInput'] = None,
        min: Optional['types.UserMinAggregateInput'] = None,
        max: Optional['types.UserMaxAggregateInput'] = None,
        having: Optional['types.UserScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.UserCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.UserScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.UserScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.UserGroupByOutput']:
        """Group User records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar User fields to group records by
        where
            User filter to select records
        take
            Limit the maximum number of User records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.UserGroupByOutput]
            A list of dictionaries representing the User record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group User records by optional_string values
        # and count how many records are in each group
        results = await User.prisma().group_by(
            ['optional_string'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            operation='query',
            method='groupBy',
            model='User',
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class MActions(Generic[BaseModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[BaseModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[BaseModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.M]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await M.prisma().query_raw(
            'SELECT * FROM M WHERE id = $1',
            429995104,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[BaseModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.M
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await M.prisma().query_first(
            'SELECT * FROM M WHERE int = $1',
            1775811865,
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.MCreateInput,
        include: Optional[types.MInclude] = None
    ) -> BaseModelT:
        """Create a new M record.

        Parameters
        ----------
        data
            M record data
        include
            Specifies which relations should be loaded on the returned M model

        Returns
        -------
        prisma.models.M
            The created M record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a M record from just the required fields
        m = await M.prisma().create(
            data={
                # data to create a M record
                'int': 893145566,
                'float': 995405759.210273,
                'string': 'chbfcacbd',
                'enum': enums.ABeautifulEnum.A,
                'boolean': True,
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='createOne',
            model='M',
            arguments={
                'data': data,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def create_many(
        self,
        data: List[types.MCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple M records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of M record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await M.prisma().create_many(
            data=[
                {
                    # data to create a M record
                    'int': 2058258651,
                    'float': 1583689592.87844,
                    'string': 'bghfciaafe',
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': False,
                },
                {
                    # data to create a M record
                    'int': 2054802212,
                    'float': 60335757.68446,
                    'string': 'bgcffadich',
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': True,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            operation='mutation',
            method='createMany',
            model='M',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.MWhereUniqueInput,
        include: Optional[types.MInclude] = None
    ) -> Optional[BaseModelT]:
        """Delete a single M record.

        Parameters
        ----------
        where
            M filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned M model

        Returns
        -------
        prisma.models.M
            The deleted M record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        m = await M.prisma().delete(
            where={
                'id': 1266032265,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='deleteOne',
                model='M',
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def find_unique(
        self,
        where: types.MWhereUniqueInput,
        include: Optional[types.MInclude] = None
    ) -> Optional[BaseModelT]:
        """Find a unique M record.

        Parameters
        ----------
        where
            M filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned M model

        Returns
        -------
        prisma.models.M
            The found M record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        m = await M.prisma().find_unique(
            where={
                'id': 93253262,
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findUnique',
            model='M',
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MWhereInput] = None,
        cursor: Optional[types.MWhereUniqueInput] = None,
        include: Optional[types.MInclude] = None,
        order: Optional[Union[types.MOrderByInput, List[types.MOrderByInput]]] = None,
        distinct: Optional[List[types.MScalarFieldKeys]] = None,
    ) -> List[BaseModelT]:
        """Find multiple M records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of M records returned
        skip
            Ignore the first N results
        where
            M filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned M model
        order
            Order the returned M records by any field
        distinct
            Filter M records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.M]
            The list of all M records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 M records
        ms = await M.prisma().find_many(take=10)

        # find the first 5 M records ordered by the optional_int field
        ms = await M.prisma().find_many(
            take=5,
            order={
                'optional_int': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findMany',
            model='M',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [self._model.parse_obj(r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.MWhereInput] = None,
        cursor: Optional[types.MWhereUniqueInput] = None,
        include: Optional[types.MInclude] = None,
        order: Optional[Union[types.MOrderByInput, List[types.MOrderByInput]]] = None,
        distinct: Optional[List[types.MScalarFieldKeys]] = None,
    ) -> Optional[BaseModelT]:
        """Find a single M record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            M filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned M model
        order
            Order the returned M records by any field
        distinct
            Filter M records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.M
            The first M record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second M record ordered by the float field
        m = await M.prisma().find_first(
            skip=1,
            order={
                'float': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findFirst',
            model='M',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def update(
        self,
        data: types.MUpdateInput,
        where: types.MWhereUniqueInput,
        include: Optional[types.MInclude] = None
    ) -> Optional[BaseModelT]:
        """Update a single M record.

        Parameters
        ----------
        data
            M record data specifying what to update
        where
            M filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned M model

        Returns
        -------
        prisma.models.M
            The updated M record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        m = await M.prisma().update(
            where={
                'id': 2053047983,
            },
            data={
                # data to update the M record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='updateOne',
                model='M',
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def upsert(
        self,
        where: types.MWhereUniqueInput,
        data: types.MUpsertInput,
        include: Optional[types.MInclude] = None,
    ) -> BaseModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            M filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned M model

        Returns
        -------
        prisma.models.M
            The created or updated M record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        m = await M.prisma().upsert(
            where={
                'id': 685333180,
            },
            data={
                'create': {
                    'id': 685333180,
                    'int': 2054802212,
                    'float': 60335757.68446,
                    'string': 'bgcffadich',
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': True,
                },
                'update': {
                    'int': 2054802212,
                    'float': 60335757.68446,
                    'string': 'bgcffadich',
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': True,
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='upsertOne',
            model='M',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def update_many(
        self,
        data: types.MUpdateManyMutationInput,
        where: types.MWhereInput,
    ) -> int:
        """Update multiple M records

        Parameters
        ----------
        data
            M data to update the selected M records to
        where
            Filter to select the M records to update

        Returns
        -------
        int
            The total number of M records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all M records
        total = await M.prisma().update_many(
            data={
                'optional_float': 127474245.94892
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='updateMany',
            model='M',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MWhereInput] = None,
        cursor: Optional[types.MWhereUniqueInput] = None,
    ) -> int:
        """Count the number of M records present in the database

        Parameters
        ----------
        select
            Select the M fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            M filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.MCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await M.prisma().count()

        # results: prisma.types.MCountAggregateOutput
        results = await M.prisma().count(
            select={
                '_all': True,
                'string': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.MCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MWhereInput] = None,
        cursor: Optional[types.MWhereUniqueInput] = None,
    ) -> types.MCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.MCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MWhereInput] = None,
        cursor: Optional[types.MWhereUniqueInput] = None,
    ) -> Union[int, types.MCountAggregateOutput]:
        """Count the number of M records present in the database

        Parameters
        ----------
        select
            Select the M fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            M filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.MCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await M.prisma().count()

        # results: prisma.types.MCountAggregateOutput
        results = await M.prisma().count(
            select={
                '_all': True,
                'optional_string': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            operation='query',
            method='aggregate',
            model='M',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.MCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.MWhereInput] = None
    ) -> int:
        """Delete multiple M records.

        Parameters
        ----------
        where
            Optional M filter to find the records to be deleted

        Returns
        -------
        int
            The total number of M records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all M records
        total = await M.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='deleteMany',
            model='M',
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.MScalarFieldKeys'],
        *,
        where: Optional['types.MWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.MAvgAggregateInput'] = None,
        sum: Optional['types.MSumAggregateInput'] = None,
        min: Optional['types.MMinAggregateInput'] = None,
        max: Optional['types.MMaxAggregateInput'] = None,
        having: Optional['types.MScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.MCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.MScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.MScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.MGroupByOutput']:
        """Group M records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar M fields to group records by
        where
            M filter to select records
        take
            Limit the maximum number of M records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.MGroupByOutput]
            A list of dictionaries representing the M record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group M records by enum values
        # and count how many records are in each group
        results = await M.prisma().group_by(
            ['enum'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            operation='query',
            method='groupBy',
            model='M',
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class NActions(Generic[BaseModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[BaseModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[BaseModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.N]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await N.prisma().query_raw(
            'SELECT * FROM N WHERE id = $1',
            1964990155,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[BaseModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.N
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await N.prisma().query_first(
            'SELECT * FROM N WHERE int = $1',
            1228891816,
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.NCreateInput,
        include: Optional[types.NInclude] = None
    ) -> BaseModelT:
        """Create a new N record.

        Parameters
        ----------
        data
            N record data
        include
            Specifies which relations should be loaded on the returned N model

        Returns
        -------
        prisma.models.N
            The created N record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a N record from just the required fields
        n = await N.prisma().create(
            data={
                # data to create a N record
                'int': 255202753,
                'float': 1223573862.54126,
                'string': 'bageiegghg',
                'json_': Json({'faidicegb': True}),
                'enum': enums.ABeautifulEnum.A,
                'boolean': True,
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='createOne',
            model='N',
            arguments={
                'data': data,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def create_many(
        self,
        data: List[types.NCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple N records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of N record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await N.prisma().create_many(
            data=[
                {
                    # data to create a N record
                    'int': 872078403,
                    'float': 1874748096.91689,
                    'string': 'hgjcghfbi',
                    'json_': Json({'icadbcehj': True}),
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': True,
                },
                {
                    # data to create a N record
                    'int': 344858293,
                    'float': 1121741130.149589,
                    'string': 'caifcbgii',
                    'json_': Json({'igaibbfgj': True}),
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': True,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            operation='mutation',
            method='createMany',
            model='N',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.NWhereUniqueInput,
        include: Optional[types.NInclude] = None
    ) -> Optional[BaseModelT]:
        """Delete a single N record.

        Parameters
        ----------
        where
            N filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned N model

        Returns
        -------
        prisma.models.N
            The deleted N record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        n = await N.prisma().delete(
            where={
                'id': 525761943,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='deleteOne',
                model='N',
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def find_unique(
        self,
        where: types.NWhereUniqueInput,
        include: Optional[types.NInclude] = None
    ) -> Optional[BaseModelT]:
        """Find a unique N record.

        Parameters
        ----------
        where
            N filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned N model

        Returns
        -------
        prisma.models.N
            The found N record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        n = await N.prisma().find_unique(
            where={
                'id': 736209796,
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findUnique',
            model='N',
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.NWhereInput] = None,
        cursor: Optional[types.NWhereUniqueInput] = None,
        include: Optional[types.NInclude] = None,
        order: Optional[Union[types.NOrderByInput, List[types.NOrderByInput]]] = None,
        distinct: Optional[List[types.NScalarFieldKeys]] = None,
    ) -> List[BaseModelT]:
        """Find multiple N records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of N records returned
        skip
            Ignore the first N results
        where
            N filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned N model
        order
            Order the returned N records by any field
        distinct
            Filter N records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.N]
            The list of all N records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 N records
        ns = await N.prisma().find_many(take=10)

        # find the first 5 N records ordered by the optional_int field
        ns = await N.prisma().find_many(
            take=5,
            order={
                'optional_int': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findMany',
            model='N',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [self._model.parse_obj(r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.NWhereInput] = None,
        cursor: Optional[types.NWhereUniqueInput] = None,
        include: Optional[types.NInclude] = None,
        order: Optional[Union[types.NOrderByInput, List[types.NOrderByInput]]] = None,
        distinct: Optional[List[types.NScalarFieldKeys]] = None,
    ) -> Optional[BaseModelT]:
        """Find a single N record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            N filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned N model
        order
            Order the returned N records by any field
        distinct
            Filter N records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.N
            The first N record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second N record ordered by the float field
        n = await N.prisma().find_first(
            skip=1,
            order={
                'float': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findFirst',
            model='N',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def update(
        self,
        data: types.NUpdateInput,
        where: types.NWhereUniqueInput,
        include: Optional[types.NInclude] = None
    ) -> Optional[BaseModelT]:
        """Update a single N record.

        Parameters
        ----------
        data
            N record data specifying what to update
        where
            N filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned N model

        Returns
        -------
        prisma.models.N
            The updated N record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        n = await N.prisma().update(
            where={
                'id': 493907821,
            },
            data={
                # data to update the N record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='updateOne',
                model='N',
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def upsert(
        self,
        where: types.NWhereUniqueInput,
        data: types.NUpsertInput,
        include: Optional[types.NInclude] = None,
    ) -> BaseModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            N filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned N model

        Returns
        -------
        prisma.models.N
            The created or updated N record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        n = await N.prisma().upsert(
            where={
                'id': 639686562,
            },
            data={
                'create': {
                    'id': 639686562,
                    'int': 344858293,
                    'float': 1121741130.149589,
                    'string': 'caifcbgii',
                    'json_': Json({'igaibbfgj': True}),
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': True,
                },
                'update': {
                    'int': 344858293,
                    'float': 1121741130.149589,
                    'string': 'caifcbgii',
                    'json_': Json({'igaibbfgj': True}),
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': True,
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='upsertOne',
            model='N',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def update_many(
        self,
        data: types.NUpdateManyMutationInput,
        where: types.NWhereInput,
    ) -> int:
        """Update multiple N records

        Parameters
        ----------
        data
            N data to update the selected N records to
        where
            Filter to select the N records to update

        Returns
        -------
        int
            The total number of N records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all N records
        total = await N.prisma().update_many(
            data={
                'optional_float': 654007347.190526
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='updateMany',
            model='N',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.NWhereInput] = None,
        cursor: Optional[types.NWhereUniqueInput] = None,
    ) -> int:
        """Count the number of N records present in the database

        Parameters
        ----------
        select
            Select the N fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            N filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.NCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await N.prisma().count()

        # results: prisma.types.NCountAggregateOutput
        results = await N.prisma().count(
            select={
                '_all': True,
                'string': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.NCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.NWhereInput] = None,
        cursor: Optional[types.NWhereUniqueInput] = None,
    ) -> types.NCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.NCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.NWhereInput] = None,
        cursor: Optional[types.NWhereUniqueInput] = None,
    ) -> Union[int, types.NCountAggregateOutput]:
        """Count the number of N records present in the database

        Parameters
        ----------
        select
            Select the N fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            N filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.NCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await N.prisma().count()

        # results: prisma.types.NCountAggregateOutput
        results = await N.prisma().count(
            select={
                '_all': True,
                'optional_string': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            operation='query',
            method='aggregate',
            model='N',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.NCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.NWhereInput] = None
    ) -> int:
        """Delete multiple N records.

        Parameters
        ----------
        where
            Optional N filter to find the records to be deleted

        Returns
        -------
        int
            The total number of N records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all N records
        total = await N.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='deleteMany',
            model='N',
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.NScalarFieldKeys'],
        *,
        where: Optional['types.NWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.NAvgAggregateInput'] = None,
        sum: Optional['types.NSumAggregateInput'] = None,
        min: Optional['types.NMinAggregateInput'] = None,
        max: Optional['types.NMaxAggregateInput'] = None,
        having: Optional['types.NScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.NCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.NScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.NScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.NGroupByOutput']:
        """Group N records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar N fields to group records by
        where
            N filter to select records
        take
            Limit the maximum number of N records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.NGroupByOutput]
            A list of dictionaries representing the N record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group N records by json_ values
        # and count how many records are in each group
        results = await N.prisma().group_by(
            ['json_'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            operation='query',
            method='groupBy',
            model='N',
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class OneOptionalActions(Generic[BaseModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[BaseModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[BaseModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.OneOptional]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await OneOptional.prisma().query_raw(
            'SELECT * FROM OneOptional WHERE id = $1',
            78746985,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[BaseModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.OneOptional
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await OneOptional.prisma().query_first(
            'SELECT * FROM OneOptional WHERE int = $1',
            1398328302,
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.OneOptionalCreateInput,
        include: Optional[types.OneOptionalInclude] = None
    ) -> BaseModelT:
        """Create a new OneOptional record.

        Parameters
        ----------
        data
            OneOptional record data
        include
            Specifies which relations should be loaded on the returned OneOptional model

        Returns
        -------
        prisma.models.OneOptional
            The created OneOptional record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a OneOptional record from just the required fields
        oneoptional = await OneOptional.prisma().create(
            data={
                # data to create a OneOptional record
                'int': 856000655,
                'float': 1452336924.157319,
                'string': 'cabdjadaji',
                'enum': enums.ABeautifulEnum.A,
                'boolean': False,
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='createOne',
            model='OneOptional',
            arguments={
                'data': data,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def create_many(
        self,
        data: List[types.OneOptionalCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple OneOptional records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of OneOptional record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await OneOptional.prisma().create_many(
            data=[
                {
                    # data to create a OneOptional record
                    'int': 1800624392,
                    'float': 2077067425.167211,
                    'string': 'jcgghhgdj',
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': True,
                },
                {
                    # data to create a OneOptional record
                    'int': 1738083805,
                    'float': 340946258.60107,
                    'string': 'cjagadcjg',
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': False,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            operation='mutation',
            method='createMany',
            model='OneOptional',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.OneOptionalWhereUniqueInput,
        include: Optional[types.OneOptionalInclude] = None
    ) -> Optional[BaseModelT]:
        """Delete a single OneOptional record.

        Parameters
        ----------
        where
            OneOptional filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned OneOptional model

        Returns
        -------
        prisma.models.OneOptional
            The deleted OneOptional record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        oneoptional = await OneOptional.prisma().delete(
            where={
                'id': 1611009182,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='deleteOne',
                model='OneOptional',
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def find_unique(
        self,
        where: types.OneOptionalWhereUniqueInput,
        include: Optional[types.OneOptionalInclude] = None
    ) -> Optional[BaseModelT]:
        """Find a unique OneOptional record.

        Parameters
        ----------
        where
            OneOptional filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned OneOptional model

        Returns
        -------
        prisma.models.OneOptional
            The found OneOptional record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        oneoptional = await OneOptional.prisma().find_unique(
            where={
                'id': 446673791,
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findUnique',
            model='OneOptional',
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.OneOptionalWhereInput] = None,
        cursor: Optional[types.OneOptionalWhereUniqueInput] = None,
        include: Optional[types.OneOptionalInclude] = None,
        order: Optional[Union[types.OneOptionalOrderByInput, List[types.OneOptionalOrderByInput]]] = None,
        distinct: Optional[List[types.OneOptionalScalarFieldKeys]] = None,
    ) -> List[BaseModelT]:
        """Find multiple OneOptional records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of OneOptional records returned
        skip
            Ignore the first N results
        where
            OneOptional filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned OneOptional model
        order
            Order the returned OneOptional records by any field
        distinct
            Filter OneOptional records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.OneOptional]
            The list of all OneOptional records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 OneOptional records
        oneoptionals = await OneOptional.prisma().find_many(take=10)

        # find the first 5 OneOptional records ordered by the optional_int field
        oneoptionals = await OneOptional.prisma().find_many(
            take=5,
            order={
                'optional_int': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findMany',
            model='OneOptional',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [self._model.parse_obj(r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.OneOptionalWhereInput] = None,
        cursor: Optional[types.OneOptionalWhereUniqueInput] = None,
        include: Optional[types.OneOptionalInclude] = None,
        order: Optional[Union[types.OneOptionalOrderByInput, List[types.OneOptionalOrderByInput]]] = None,
        distinct: Optional[List[types.OneOptionalScalarFieldKeys]] = None,
    ) -> Optional[BaseModelT]:
        """Find a single OneOptional record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            OneOptional filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned OneOptional model
        order
            Order the returned OneOptional records by any field
        distinct
            Filter OneOptional records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.OneOptional
            The first OneOptional record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second OneOptional record ordered by the float field
        oneoptional = await OneOptional.prisma().find_first(
            skip=1,
            order={
                'float': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findFirst',
            model='OneOptional',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def update(
        self,
        data: types.OneOptionalUpdateInput,
        where: types.OneOptionalWhereUniqueInput,
        include: Optional[types.OneOptionalInclude] = None
    ) -> Optional[BaseModelT]:
        """Update a single OneOptional record.

        Parameters
        ----------
        data
            OneOptional record data specifying what to update
        where
            OneOptional filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned OneOptional model

        Returns
        -------
        prisma.models.OneOptional
            The updated OneOptional record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        oneoptional = await OneOptional.prisma().update(
            where={
                'id': 300568396,
            },
            data={
                # data to update the OneOptional record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='updateOne',
                model='OneOptional',
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def upsert(
        self,
        where: types.OneOptionalWhereUniqueInput,
        data: types.OneOptionalUpsertInput,
        include: Optional[types.OneOptionalInclude] = None,
    ) -> BaseModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            OneOptional filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned OneOptional model

        Returns
        -------
        prisma.models.OneOptional
            The created or updated OneOptional record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        oneoptional = await OneOptional.prisma().upsert(
            where={
                'id': 632626069,
            },
            data={
                'create': {
                    'id': 632626069,
                    'int': 1738083805,
                    'float': 340946258.60107,
                    'string': 'cjagadcjg',
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': False,
                },
                'update': {
                    'int': 1738083805,
                    'float': 340946258.60107,
                    'string': 'cjagadcjg',
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': False,
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='upsertOne',
            model='OneOptional',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def update_many(
        self,
        data: types.OneOptionalUpdateManyMutationInput,
        where: types.OneOptionalWhereInput,
    ) -> int:
        """Update multiple OneOptional records

        Parameters
        ----------
        data
            OneOptional data to update the selected OneOptional records to
        where
            Filter to select the OneOptional records to update

        Returns
        -------
        int
            The total number of OneOptional records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all OneOptional records
        total = await OneOptional.prisma().update_many(
            data={
                'optional_float': 1724011690.47015
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='updateMany',
            model='OneOptional',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.OneOptionalWhereInput] = None,
        cursor: Optional[types.OneOptionalWhereUniqueInput] = None,
    ) -> int:
        """Count the number of OneOptional records present in the database

        Parameters
        ----------
        select
            Select the OneOptional fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            OneOptional filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.OneOptionalCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await OneOptional.prisma().count()

        # results: prisma.types.OneOptionalCountAggregateOutput
        results = await OneOptional.prisma().count(
            select={
                '_all': True,
                'string': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.OneOptionalCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.OneOptionalWhereInput] = None,
        cursor: Optional[types.OneOptionalWhereUniqueInput] = None,
    ) -> types.OneOptionalCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.OneOptionalCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.OneOptionalWhereInput] = None,
        cursor: Optional[types.OneOptionalWhereUniqueInput] = None,
    ) -> Union[int, types.OneOptionalCountAggregateOutput]:
        """Count the number of OneOptional records present in the database

        Parameters
        ----------
        select
            Select the OneOptional fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            OneOptional filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.OneOptionalCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await OneOptional.prisma().count()

        # results: prisma.types.OneOptionalCountAggregateOutput
        results = await OneOptional.prisma().count(
            select={
                '_all': True,
                'optional_string': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            operation='query',
            method='aggregate',
            model='OneOptional',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.OneOptionalCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.OneOptionalWhereInput] = None
    ) -> int:
        """Delete multiple OneOptional records.

        Parameters
        ----------
        where
            Optional OneOptional filter to find the records to be deleted

        Returns
        -------
        int
            The total number of OneOptional records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all OneOptional records
        total = await OneOptional.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='deleteMany',
            model='OneOptional',
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.OneOptionalScalarFieldKeys'],
        *,
        where: Optional['types.OneOptionalWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.OneOptionalAvgAggregateInput'] = None,
        sum: Optional['types.OneOptionalSumAggregateInput'] = None,
        min: Optional['types.OneOptionalMinAggregateInput'] = None,
        max: Optional['types.OneOptionalMaxAggregateInput'] = None,
        having: Optional['types.OneOptionalScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.OneOptionalCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.OneOptionalScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.OneOptionalScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.OneOptionalGroupByOutput']:
        """Group OneOptional records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar OneOptional fields to group records by
        where
            OneOptional filter to select records
        take
            Limit the maximum number of OneOptional records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.OneOptionalGroupByOutput]
            A list of dictionaries representing the OneOptional record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group OneOptional records by enum values
        # and count how many records are in each group
        results = await OneOptional.prisma().group_by(
            ['enum'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            operation='query',
            method='groupBy',
            model='OneOptional',
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class ManyRequiredActions(Generic[BaseModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[BaseModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[BaseModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.ManyRequired]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await ManyRequired.prisma().query_raw(
            'SELECT * FROM ManyRequired WHERE id = $1',
            1209209912,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[BaseModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.ManyRequired
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await ManyRequired.prisma().query_first(
            'SELECT * FROM ManyRequired WHERE one_optional_id = $1',
            1536744465,
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.ManyRequiredCreateInput,
        include: Optional[types.ManyRequiredInclude] = None
    ) -> BaseModelT:
        """Create a new ManyRequired record.

        Parameters
        ----------
        data
            ManyRequired record data
        include
            Specifies which relations should be loaded on the returned ManyRequired model

        Returns
        -------
        prisma.models.ManyRequired
            The created ManyRequired record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a ManyRequired record from just the required fields
        manyrequired = await ManyRequired.prisma().create(
            data={
                # data to create a ManyRequired record
                'int': 424218998,
                'float': 2125632375.53695,
                'string': 'jcehcdchh',
                'enum': enums.ABeautifulEnum.A,
                'boolean': True,
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='createOne',
            model='ManyRequired',
            arguments={
                'data': data,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def create_many(
        self,
        data: List[types.ManyRequiredCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple ManyRequired records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of ManyRequired record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await ManyRequired.prisma().create_many(
            data=[
                {
                    # data to create a ManyRequired record
                    'int': 1848832019,
                    'float': 1921528400.210042,
                    'string': 'iejbeaaeg',
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': False,
                },
                {
                    # data to create a ManyRequired record
                    'int': 273032060,
                    'float': 982848517.51073,
                    'string': 'cbbheiicgh',
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': True,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            operation='mutation',
            method='createMany',
            model='ManyRequired',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.ManyRequiredWhereUniqueInput,
        include: Optional[types.ManyRequiredInclude] = None
    ) -> Optional[BaseModelT]:
        """Delete a single ManyRequired record.

        Parameters
        ----------
        where
            ManyRequired filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned ManyRequired model

        Returns
        -------
        prisma.models.ManyRequired
            The deleted ManyRequired record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        manyrequired = await ManyRequired.prisma().delete(
            where={
                'id': 1297607553,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='deleteOne',
                model='ManyRequired',
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def find_unique(
        self,
        where: types.ManyRequiredWhereUniqueInput,
        include: Optional[types.ManyRequiredInclude] = None
    ) -> Optional[BaseModelT]:
        """Find a unique ManyRequired record.

        Parameters
        ----------
        where
            ManyRequired filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned ManyRequired model

        Returns
        -------
        prisma.models.ManyRequired
            The found ManyRequired record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        manyrequired = await ManyRequired.prisma().find_unique(
            where={
                'id': 519488550,
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findUnique',
            model='ManyRequired',
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ManyRequiredWhereInput] = None,
        cursor: Optional[types.ManyRequiredWhereUniqueInput] = None,
        include: Optional[types.ManyRequiredInclude] = None,
        order: Optional[Union[types.ManyRequiredOrderByInput, List[types.ManyRequiredOrderByInput]]] = None,
        distinct: Optional[List[types.ManyRequiredScalarFieldKeys]] = None,
    ) -> List[BaseModelT]:
        """Find multiple ManyRequired records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of ManyRequired records returned
        skip
            Ignore the first N results
        where
            ManyRequired filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned ManyRequired model
        order
            Order the returned ManyRequired records by any field
        distinct
            Filter ManyRequired records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.ManyRequired]
            The list of all ManyRequired records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 ManyRequired records
        manyrequireds = await ManyRequired.prisma().find_many(take=10)

        # find the first 5 ManyRequired records ordered by the int field
        manyrequireds = await ManyRequired.prisma().find_many(
            take=5,
            order={
                'int': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findMany',
            model='ManyRequired',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [self._model.parse_obj(r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ManyRequiredWhereInput] = None,
        cursor: Optional[types.ManyRequiredWhereUniqueInput] = None,
        include: Optional[types.ManyRequiredInclude] = None,
        order: Optional[Union[types.ManyRequiredOrderByInput, List[types.ManyRequiredOrderByInput]]] = None,
        distinct: Optional[List[types.ManyRequiredScalarFieldKeys]] = None,
    ) -> Optional[BaseModelT]:
        """Find a single ManyRequired record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            ManyRequired filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned ManyRequired model
        order
            Order the returned ManyRequired records by any field
        distinct
            Filter ManyRequired records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.ManyRequired
            The first ManyRequired record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second ManyRequired record ordered by the optional_int field
        manyrequired = await ManyRequired.prisma().find_first(
            skip=1,
            order={
                'optional_int': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findFirst',
            model='ManyRequired',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def update(
        self,
        data: types.ManyRequiredUpdateInput,
        where: types.ManyRequiredWhereUniqueInput,
        include: Optional[types.ManyRequiredInclude] = None
    ) -> Optional[BaseModelT]:
        """Update a single ManyRequired record.

        Parameters
        ----------
        data
            ManyRequired record data specifying what to update
        where
            ManyRequired filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned ManyRequired model

        Returns
        -------
        prisma.models.ManyRequired
            The updated ManyRequired record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        manyrequired = await ManyRequired.prisma().update(
            where={
                'id': 976832615,
            },
            data={
                # data to update the ManyRequired record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='updateOne',
                model='ManyRequired',
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def upsert(
        self,
        where: types.ManyRequiredWhereUniqueInput,
        data: types.ManyRequiredUpsertInput,
        include: Optional[types.ManyRequiredInclude] = None,
    ) -> BaseModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            ManyRequired filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned ManyRequired model

        Returns
        -------
        prisma.models.ManyRequired
            The created or updated ManyRequired record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        manyrequired = await ManyRequired.prisma().upsert(
            where={
                'id': 1696425492,
            },
            data={
                'create': {
                    'id': 1696425492,
                    'int': 273032060,
                    'float': 982848517.51073,
                    'string': 'cbbheiicgh',
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': True,
                },
                'update': {
                    'int': 273032060,
                    'float': 982848517.51073,
                    'string': 'cbbheiicgh',
                    'enum': enums.ABeautifulEnum.A,
                    'boolean': True,
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='upsertOne',
            model='ManyRequired',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def update_many(
        self,
        data: types.ManyRequiredUpdateManyMutationInput,
        where: types.ManyRequiredWhereInput,
    ) -> int:
        """Update multiple ManyRequired records

        Parameters
        ----------
        data
            ManyRequired data to update the selected ManyRequired records to
        where
            Filter to select the ManyRequired records to update

        Returns
        -------
        int
            The total number of ManyRequired records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all ManyRequired records
        total = await ManyRequired.prisma().update_many(
            data={
                'float': 169262781.102308
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='updateMany',
            model='ManyRequired',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ManyRequiredWhereInput] = None,
        cursor: Optional[types.ManyRequiredWhereUniqueInput] = None,
    ) -> int:
        """Count the number of ManyRequired records present in the database

        Parameters
        ----------
        select
            Select the ManyRequired fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            ManyRequired filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ManyRequiredCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await ManyRequired.prisma().count()

        # results: prisma.types.ManyRequiredCountAggregateOutput
        results = await ManyRequired.prisma().count(
            select={
                '_all': True,
                'optional_float': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.ManyRequiredCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ManyRequiredWhereInput] = None,
        cursor: Optional[types.ManyRequiredWhereUniqueInput] = None,
    ) -> types.ManyRequiredCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.ManyRequiredCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ManyRequiredWhereInput] = None,
        cursor: Optional[types.ManyRequiredWhereUniqueInput] = None,
    ) -> Union[int, types.ManyRequiredCountAggregateOutput]:
        """Count the number of ManyRequired records present in the database

        Parameters
        ----------
        select
            Select the ManyRequired fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            ManyRequired filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ManyRequiredCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await ManyRequired.prisma().count()

        # results: prisma.types.ManyRequiredCountAggregateOutput
        results = await ManyRequired.prisma().count(
            select={
                '_all': True,
                'string': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            operation='query',
            method='aggregate',
            model='ManyRequired',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.ManyRequiredCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.ManyRequiredWhereInput] = None
    ) -> int:
        """Delete multiple ManyRequired records.

        Parameters
        ----------
        where
            Optional ManyRequired filter to find the records to be deleted

        Returns
        -------
        int
            The total number of ManyRequired records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all ManyRequired records
        total = await ManyRequired.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='deleteMany',
            model='ManyRequired',
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.ManyRequiredScalarFieldKeys'],
        *,
        where: Optional['types.ManyRequiredWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.ManyRequiredAvgAggregateInput'] = None,
        sum: Optional['types.ManyRequiredSumAggregateInput'] = None,
        min: Optional['types.ManyRequiredMinAggregateInput'] = None,
        max: Optional['types.ManyRequiredMaxAggregateInput'] = None,
        having: Optional['types.ManyRequiredScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.ManyRequiredCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.ManyRequiredScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.ManyRequiredScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.ManyRequiredGroupByOutput']:
        """Group ManyRequired records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar ManyRequired fields to group records by
        where
            ManyRequired filter to select records
        take
            Limit the maximum number of ManyRequired records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.ManyRequiredGroupByOutput]
            A list of dictionaries representing the ManyRequired record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group ManyRequired records by optional_string values
        # and count how many records are in each group
        results = await ManyRequired.prisma().group_by(
            ['optional_string'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            operation='query',
            method='groupBy',
            model='ManyRequired',
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class ListsActions(Generic[BaseModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[BaseModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[BaseModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Lists]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Lists.prisma().query_raw(
            'SELECT * FROM Lists WHERE id = $1',
            'dchgibach',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[BaseModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Lists
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Lists.prisma().query_first(
            'SELECT * FROM Lists WHERE strings = $1',
            ['fchheijjc'],
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.ListsCreateInput,
        include: Optional[types.ListsInclude] = None
    ) -> BaseModelT:
        """Create a new Lists record.

        Parameters
        ----------
        data
            Lists record data
        include
            Specifies which relations should be loaded on the returned Lists model

        Returns
        -------
        prisma.models.Lists
            The created Lists record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Lists record from just the required fields
        lists = await Lists.prisma().create(
            data={
                # data to create a Lists record
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='createOne',
            model='Lists',
            arguments={
                'data': data,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def create_many(
        self,
        data: List[types.ListsCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Lists records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Lists record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Lists.prisma().create_many(
            data=[
                {
                    # data to create a Lists record
                },
                {
                    # data to create a Lists record
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            operation='mutation',
            method='createMany',
            model='Lists',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.ListsWhereUniqueInput,
        include: Optional[types.ListsInclude] = None
    ) -> Optional[BaseModelT]:
        """Delete a single Lists record.

        Parameters
        ----------
        where
            Lists filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Lists model

        Returns
        -------
        prisma.models.Lists
            The deleted Lists record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        lists = await Lists.prisma().delete(
            where={
                'id': 'cacjdfhejh',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='deleteOne',
                model='Lists',
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def find_unique(
        self,
        where: types.ListsWhereUniqueInput,
        include: Optional[types.ListsInclude] = None
    ) -> Optional[BaseModelT]:
        """Find a unique Lists record.

        Parameters
        ----------
        where
            Lists filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Lists model

        Returns
        -------
        prisma.models.Lists
            The found Lists record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        lists = await Lists.prisma().find_unique(
            where={
                'id': 'bdbifjhbbi',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findUnique',
            model='Lists',
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ListsWhereInput] = None,
        cursor: Optional[types.ListsWhereUniqueInput] = None,
        include: Optional[types.ListsInclude] = None,
        order: Optional[Union[types.ListsOrderByInput, List[types.ListsOrderByInput]]] = None,
        distinct: Optional[List[types.ListsScalarFieldKeys]] = None,
    ) -> List[BaseModelT]:
        """Find multiple Lists records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Lists records returned
        skip
            Ignore the first N results
        where
            Lists filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Lists model
        order
            Order the returned Lists records by any field
        distinct
            Filter Lists records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Lists]
            The list of all Lists records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Lists records
        lists = await Lists.prisma().find_many(take=10)

        # find the first 5 Lists records ordered by the bytes field
        lists = await Lists.prisma().find_many(
            take=5,
            order={
                'bytes': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findMany',
            model='Lists',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [self._model.parse_obj(r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ListsWhereInput] = None,
        cursor: Optional[types.ListsWhereUniqueInput] = None,
        include: Optional[types.ListsInclude] = None,
        order: Optional[Union[types.ListsOrderByInput, List[types.ListsOrderByInput]]] = None,
        distinct: Optional[List[types.ListsScalarFieldKeys]] = None,
    ) -> Optional[BaseModelT]:
        """Find a single Lists record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Lists filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Lists model
        order
            Order the returned Lists records by any field
        distinct
            Filter Lists records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Lists
            The first Lists record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Lists record ordered by the dates field
        lists = await Lists.prisma().find_first(
            skip=1,
            order={
                'dates': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findFirst',
            model='Lists',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def update(
        self,
        data: types.ListsUpdateInput,
        where: types.ListsWhereUniqueInput,
        include: Optional[types.ListsInclude] = None
    ) -> Optional[BaseModelT]:
        """Update a single Lists record.

        Parameters
        ----------
        data
            Lists record data specifying what to update
        where
            Lists filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Lists model

        Returns
        -------
        prisma.models.Lists
            The updated Lists record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        lists = await Lists.prisma().update(
            where={
                'id': 'cbccbbcdfb',
            },
            data={
                # data to update the Lists record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='updateOne',
                model='Lists',
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def upsert(
        self,
        where: types.ListsWhereUniqueInput,
        data: types.ListsUpsertInput,
        include: Optional[types.ListsInclude] = None,
    ) -> BaseModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Lists filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Lists model

        Returns
        -------
        prisma.models.Lists
            The created or updated Lists record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        lists = await Lists.prisma().upsert(
            where={
                'id': 'bacejedaca',
            },
            data={
                'create': {
                    'id': 'bacejedaca',
                },
                'update': {
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='upsertOne',
            model='Lists',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def update_many(
        self,
        data: types.ListsUpdateManyMutationInput,
        where: types.ListsWhereInput,
    ) -> int:
        """Update multiple Lists records

        Parameters
        ----------
        data
            Lists data to update the selected Lists records to
        where
            Filter to select the Lists records to update

        Returns
        -------
        int
            The total number of Lists records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Lists records
        total = await Lists.prisma().update_many(
            data={
                'bools': [False]
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='updateMany',
            model='Lists',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ListsWhereInput] = None,
        cursor: Optional[types.ListsWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Lists records present in the database

        Parameters
        ----------
        select
            Select the Lists fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Lists filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ListsCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Lists.prisma().count()

        # results: prisma.types.ListsCountAggregateOutput
        results = await Lists.prisma().count(
            select={
                '_all': True,
                'ints': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.ListsCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ListsWhereInput] = None,
        cursor: Optional[types.ListsWhereUniqueInput] = None,
    ) -> types.ListsCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.ListsCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ListsWhereInput] = None,
        cursor: Optional[types.ListsWhereUniqueInput] = None,
    ) -> Union[int, types.ListsCountAggregateOutput]:
        """Count the number of Lists records present in the database

        Parameters
        ----------
        select
            Select the Lists fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Lists filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ListsCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Lists.prisma().count()

        # results: prisma.types.ListsCountAggregateOutput
        results = await Lists.prisma().count(
            select={
                '_all': True,
                'floats': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            operation='query',
            method='aggregate',
            model='Lists',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.ListsCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.ListsWhereInput] = None
    ) -> int:
        """Delete multiple Lists records.

        Parameters
        ----------
        where
            Optional Lists filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Lists records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Lists records
        total = await Lists.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='deleteMany',
            model='Lists',
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.ListsScalarFieldKeys'],
        *,
        where: Optional['types.ListsWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.ListsAvgAggregateInput'] = None,
        sum: Optional['types.ListsSumAggregateInput'] = None,
        min: Optional['types.ListsMinAggregateInput'] = None,
        max: Optional['types.ListsMaxAggregateInput'] = None,
        having: Optional['types.ListsScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.ListsCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.ListsScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.ListsScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.ListsGroupByOutput']:
        """Group Lists records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Lists fields to group records by
        where
            Lists filter to select records
        take
            Limit the maximum number of Lists records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.ListsGroupByOutput]
            A list of dictionaries representing the Lists record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Lists records by bigints values
        # and count how many records are in each group
        results = await Lists.prisma().group_by(
            ['bigints'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            operation='query',
            method='groupBy',
            model='Lists',
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class AActions(Generic[BaseModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[BaseModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[BaseModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.A]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await A.prisma().query_raw(
            'SELECT * FROM A WHERE email = $1',
            'bfjibceaec',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[BaseModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.A
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await A.prisma().query_first(
            'SELECT * FROM A WHERE name = $1',
            'ibhgcdbgd',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.ACreateInput,
        include: Optional[types.AInclude] = None
    ) -> BaseModelT:
        """Create a new A record.

        Parameters
        ----------
        data
            A record data
        include
            Specifies which relations should be loaded on the returned A model

        Returns
        -------
        prisma.models.A
            The created A record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a A record from just the required fields
        a = await A.prisma().create(
            data={
                # data to create a A record
                'email': 'badaffhddg',
                'int': 1131525873,
                'sInt': 210666198,
                'bInt': 15312695316,
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='createOne',
            model='A',
            arguments={
                'data': data,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def create_many(
        self,
        data: List[types.ACreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple A records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of A record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await A.prisma().create_many(
            data=[
                {
                    # data to create a A record
                    'email': 'heffgjdei',
                    'int': 307876141,
                    'sInt': 1674049122,
                    'bInt': 18322255716,
                },
                {
                    # data to create a A record
                    'email': 'jfiahhbae',
                    'int': 1513050921,
                    'sInt': 204674734,
                    'bInt': 24811819956,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            operation='mutation',
            method='createMany',
            model='A',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.AWhereUniqueInput,
        include: Optional[types.AInclude] = None
    ) -> Optional[BaseModelT]:
        """Delete a single A record.

        Parameters
        ----------
        where
            A filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned A model

        Returns
        -------
        prisma.models.A
            The deleted A record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        a = await A.prisma().delete(
            where={
                'email': 'bbidjbbjaa',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='deleteOne',
                model='A',
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def find_unique(
        self,
        where: types.AWhereUniqueInput,
        include: Optional[types.AInclude] = None
    ) -> Optional[BaseModelT]:
        """Find a unique A record.

        Parameters
        ----------
        where
            A filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned A model

        Returns
        -------
        prisma.models.A
            The found A record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        a = await A.prisma().find_unique(
            where={
                'email': 'bfijhaejdd',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findUnique',
            model='A',
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AWhereInput] = None,
        cursor: Optional[types.AWhereUniqueInput] = None,
        include: Optional[types.AInclude] = None,
        order: Optional[Union[types.AOrderByInput, List[types.AOrderByInput]]] = None,
        distinct: Optional[List[types.AScalarFieldKeys]] = None,
    ) -> List[BaseModelT]:
        """Find multiple A records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of A records returned
        skip
            Ignore the first N results
        where
            A filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned A model
        order
            Order the returned A records by any field
        distinct
            Filter A records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.A]
            The list of all A records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 A records
        as = await A.prisma().find_many(take=10)

        # find the first 5 A records ordered by the int field
        as = await A.prisma().find_many(
            take=5,
            order={
                'int': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findMany',
            model='A',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [self._model.parse_obj(r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.AWhereInput] = None,
        cursor: Optional[types.AWhereUniqueInput] = None,
        include: Optional[types.AInclude] = None,
        order: Optional[Union[types.AOrderByInput, List[types.AOrderByInput]]] = None,
        distinct: Optional[List[types.AScalarFieldKeys]] = None,
    ) -> Optional[BaseModelT]:
        """Find a single A record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            A filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned A model
        order
            Order the returned A records by any field
        distinct
            Filter A records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.A
            The first A record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second A record ordered by the sInt field
        a = await A.prisma().find_first(
            skip=1,
            order={
                'sInt': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findFirst',
            model='A',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def update(
        self,
        data: types.AUpdateInput,
        where: types.AWhereUniqueInput,
        include: Optional[types.AInclude] = None
    ) -> Optional[BaseModelT]:
        """Update a single A record.

        Parameters
        ----------
        data
            A record data specifying what to update
        where
            A filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned A model

        Returns
        -------
        prisma.models.A
            The updated A record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        a = await A.prisma().update(
            where={
                'email': 'bcedehfiji',
            },
            data={
                # data to update the A record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='updateOne',
                model='A',
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def upsert(
        self,
        where: types.AWhereUniqueInput,
        data: types.AUpsertInput,
        include: Optional[types.AInclude] = None,
    ) -> BaseModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            A filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned A model

        Returns
        -------
        prisma.models.A
            The created or updated A record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        a = await A.prisma().upsert(
            where={
                'email': 'bdgjicijhb',
            },
            data={
                'create': {
                    'email': 'bdgjicijhb',
                    'int': 1513050921,
                    'sInt': 204674734,
                    'bInt': 24811819956,
                },
                'update': {
                    'int': 1513050921,
                    'sInt': 204674734,
                    'bInt': 24811819956,
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='upsertOne',
            model='A',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def update_many(
        self,
        data: types.AUpdateManyMutationInput,
        where: types.AWhereInput,
    ) -> int:
        """Update multiple A records

        Parameters
        ----------
        data
            A data to update the selected A records to
        where
            Filter to select the A records to update

        Returns
        -------
        int
            The total number of A records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all A records
        total = await A.prisma().update_many(
            data={
                'inc_int': 1678593480
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='updateMany',
            model='A',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AWhereInput] = None,
        cursor: Optional[types.AWhereUniqueInput] = None,
    ) -> int:
        """Count the number of A records present in the database

        Parameters
        ----------
        select
            Select the A fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            A filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ACountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await A.prisma().count()

        # results: prisma.types.ACountAggregateOutput
        results = await A.prisma().count(
            select={
                '_all': True,
                'inc_sInt': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.ACountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AWhereInput] = None,
        cursor: Optional[types.AWhereUniqueInput] = None,
    ) -> types.ACountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.ACountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AWhereInput] = None,
        cursor: Optional[types.AWhereUniqueInput] = None,
    ) -> Union[int, types.ACountAggregateOutput]:
        """Count the number of A records present in the database

        Parameters
        ----------
        select
            Select the A fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            A filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ACountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await A.prisma().count()

        # results: prisma.types.ACountAggregateOutput
        results = await A.prisma().count(
            select={
                '_all': True,
                'bInt': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            operation='query',
            method='aggregate',
            model='A',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.ACountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.AWhereInput] = None
    ) -> int:
        """Delete multiple A records.

        Parameters
        ----------
        where
            Optional A filter to find the records to be deleted

        Returns
        -------
        int
            The total number of A records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all A records
        total = await A.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='deleteMany',
            model='A',
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.AScalarFieldKeys'],
        *,
        where: Optional['types.AWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.AAvgAggregateInput'] = None,
        sum: Optional['types.ASumAggregateInput'] = None,
        min: Optional['types.AMinAggregateInput'] = None,
        max: Optional['types.AMaxAggregateInput'] = None,
        having: Optional['types.AScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.ACountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.AScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.AScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.AGroupByOutput']:
        """Group A records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar A fields to group records by
        where
            A filter to select records
        take
            Limit the maximum number of A records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.AGroupByOutput]
            A list of dictionaries representing the A record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group A records by inc_bInt values
        # and count how many records are in each group
        results = await A.prisma().group_by(
            ['inc_bInt'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            operation='query',
            method='groupBy',
            model='A',
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class BActions(Generic[BaseModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[BaseModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[BaseModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.B]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await B.prisma().query_raw(
            'SELECT * FROM B WHERE id = $1',
            'eadfcbbcb',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[BaseModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.B
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await B.prisma().query_first(
            'SELECT * FROM B WHERE float = $1',
            648760710.60732,
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.BCreateInput,
        include: Optional[types.BInclude] = None
    ) -> BaseModelT:
        """Create a new B record.

        Parameters
        ----------
        data
            B record data
        include
            Specifies which relations should be loaded on the returned B model

        Returns
        -------
        prisma.models.B
            The created B record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a B record from just the required fields
        b = await B.prisma().create(
            data={
                # data to create a B record
                'float': 1468890740.62903,
                'd_float': 1214168082.89861,
                'decFloat': Decimal('658378208.95462'),
                'numFloat': Decimal('1214809950.104782'),
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='createOne',
            model='B',
            arguments={
                'data': data,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def create_many(
        self,
        data: List[types.BCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple B records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of B record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await B.prisma().create_many(
            data=[
                {
                    # data to create a B record
                    'float': 1302734860.89305,
                    'd_float': 280083306.54966,
                    'decFloat': Decimal('76790008.209829'),
                    'numFloat': Decimal('245900342.81186'),
                },
                {
                    # data to create a B record
                    'float': 1388801188.75257,
                    'd_float': 1187663298.76968,
                    'decFloat': Decimal('1214295824.102141'),
                    'numFloat': Decimal('351503374.132118'),
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            operation='mutation',
            method='createMany',
            model='B',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.BWhereUniqueInput,
        include: Optional[types.BInclude] = None
    ) -> Optional[BaseModelT]:
        """Delete a single B record.

        Parameters
        ----------
        where
            B filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned B model

        Returns
        -------
        prisma.models.B
            The deleted B record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        b = await B.prisma().delete(
            where={
                'id': 'dgjhdcggi',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='deleteOne',
                model='B',
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def find_unique(
        self,
        where: types.BWhereUniqueInput,
        include: Optional[types.BInclude] = None
    ) -> Optional[BaseModelT]:
        """Find a unique B record.

        Parameters
        ----------
        where
            B filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned B model

        Returns
        -------
        prisma.models.B
            The found B record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        b = await B.prisma().find_unique(
            where={
                'id': 'bbjbcdfabd',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findUnique',
            model='B',
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.BWhereInput] = None,
        cursor: Optional[types.BWhereUniqueInput] = None,
        include: Optional[types.BInclude] = None,
        order: Optional[Union[types.BOrderByInput, List[types.BOrderByInput]]] = None,
        distinct: Optional[List[types.BScalarFieldKeys]] = None,
    ) -> List[BaseModelT]:
        """Find multiple B records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of B records returned
        skip
            Ignore the first N results
        where
            B filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned B model
        order
            Order the returned B records by any field
        distinct
            Filter B records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.B]
            The list of all B records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 B records
        bs = await B.prisma().find_many(take=10)

        # find the first 5 B records ordered by the d_float field
        bs = await B.prisma().find_many(
            take=5,
            order={
                'd_float': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findMany',
            model='B',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [self._model.parse_obj(r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.BWhereInput] = None,
        cursor: Optional[types.BWhereUniqueInput] = None,
        include: Optional[types.BInclude] = None,
        order: Optional[Union[types.BOrderByInput, List[types.BOrderByInput]]] = None,
        distinct: Optional[List[types.BScalarFieldKeys]] = None,
    ) -> Optional[BaseModelT]:
        """Find a single B record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            B filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned B model
        order
            Order the returned B records by any field
        distinct
            Filter B records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.B
            The first B record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second B record ordered by the decFloat field
        b = await B.prisma().find_first(
            skip=1,
            order={
                'decFloat': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findFirst',
            model='B',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def update(
        self,
        data: types.BUpdateInput,
        where: types.BWhereUniqueInput,
        include: Optional[types.BInclude] = None
    ) -> Optional[BaseModelT]:
        """Update a single B record.

        Parameters
        ----------
        data
            B record data specifying what to update
        where
            B filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned B model

        Returns
        -------
        prisma.models.B
            The updated B record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        b = await B.prisma().update(
            where={
                'id': 'gchfgbcec',
            },
            data={
                # data to update the B record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='updateOne',
                model='B',
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def upsert(
        self,
        where: types.BWhereUniqueInput,
        data: types.BUpsertInput,
        include: Optional[types.BInclude] = None,
    ) -> BaseModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            B filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned B model

        Returns
        -------
        prisma.models.B
            The created or updated B record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        b = await B.prisma().upsert(
            where={
                'id': 'bihcjfcjah',
            },
            data={
                'create': {
                    'id': 'bihcjfcjah',
                    'float': 1388801188.75257,
                    'd_float': 1187663298.76968,
                    'decFloat': Decimal('1214295824.102141'),
                    'numFloat': Decimal('351503374.132118'),
                },
                'update': {
                    'float': 1388801188.75257,
                    'd_float': 1187663298.76968,
                    'decFloat': Decimal('1214295824.102141'),
                    'numFloat': Decimal('351503374.132118'),
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='upsertOne',
            model='B',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def update_many(
        self,
        data: types.BUpdateManyMutationInput,
        where: types.BWhereInput,
    ) -> int:
        """Update multiple B records

        Parameters
        ----------
        data
            B data to update the selected B records to
        where
            Filter to select the B records to update

        Returns
        -------
        int
            The total number of B records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all B records
        total = await B.prisma().update_many(
            data={
                'numFloat': Decimal('1793282088.181439')
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='updateMany',
            model='B',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.BWhereInput] = None,
        cursor: Optional[types.BWhereUniqueInput] = None,
    ) -> int:
        """Count the number of B records present in the database

        Parameters
        ----------
        select
            Select the B fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            B filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.BCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await B.prisma().count()

        # results: prisma.types.BCountAggregateOutput
        results = await B.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.BCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.BWhereInput] = None,
        cursor: Optional[types.BWhereUniqueInput] = None,
    ) -> types.BCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.BCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.BWhereInput] = None,
        cursor: Optional[types.BWhereUniqueInput] = None,
    ) -> Union[int, types.BCountAggregateOutput]:
        """Count the number of B records present in the database

        Parameters
        ----------
        select
            Select the B fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            B filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.BCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await B.prisma().count()

        # results: prisma.types.BCountAggregateOutput
        results = await B.prisma().count(
            select={
                '_all': True,
                'float': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            operation='query',
            method='aggregate',
            model='B',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.BCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.BWhereInput] = None
    ) -> int:
        """Delete multiple B records.

        Parameters
        ----------
        where
            Optional B filter to find the records to be deleted

        Returns
        -------
        int
            The total number of B records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all B records
        total = await B.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='deleteMany',
            model='B',
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.BScalarFieldKeys'],
        *,
        where: Optional['types.BWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.BAvgAggregateInput'] = None,
        sum: Optional['types.BSumAggregateInput'] = None,
        min: Optional['types.BMinAggregateInput'] = None,
        max: Optional['types.BMaxAggregateInput'] = None,
        having: Optional['types.BScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.BCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.BScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.BScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.BGroupByOutput']:
        """Group B records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar B fields to group records by
        where
            B filter to select records
        take
            Limit the maximum number of B records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.BGroupByOutput]
            A list of dictionaries representing the B record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group B records by d_float values
        # and count how many records are in each group
        results = await B.prisma().group_by(
            ['d_float'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            operation='query',
            method='groupBy',
            model='B',
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class CActions(Generic[BaseModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[BaseModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[BaseModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.C]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await C.prisma().query_raw(
            'SELECT * FROM C WHERE char = $1',
            'bjcdajabfa',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[BaseModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.C
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await C.prisma().query_first(
            'SELECT * FROM C WHERE v_char = $1',
            'bchhceeeff',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.CCreateInput,
        include: Optional[types.CInclude] = None
    ) -> BaseModelT:
        """Create a new C record.

        Parameters
        ----------
        data
            C record data
        include
            Specifies which relations should be loaded on the returned C model

        Returns
        -------
        prisma.models.C
            The created C record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a C record from just the required fields
        c = await C.prisma().create(
            data={
                # data to create a C record
                'char': 'bbgaifhdaa',
                'v_char': 'dgbcdaegb',
                'text': 'beagfbbjig',
                'bit': 'beicihhijb',
                'v_bit': 'fgggcdcjg',
                'uuid': 'ccjbbjigf',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='createOne',
            model='C',
            arguments={
                'data': data,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def create_many(
        self,
        data: List[types.CCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple C records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of C record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await C.prisma().create_many(
            data=[
                {
                    # data to create a C record
                    'char': 'bhfaabbaha',
                    'v_char': 'ebajedhhf',
                    'text': 'jajacedge',
                    'bit': 'hffgbabgf',
                    'v_bit': 'biacbiieja',
                    'uuid': 'cjejbgbff',
                },
                {
                    # data to create a C record
                    'char': 'fgeahddae',
                    'v_char': 'diageigcf',
                    'text': 'badagbgeha',
                    'bit': 'ibgebbjch',
                    'v_bit': 'baieajjiee',
                    'uuid': 'bahjhaccfd',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            operation='mutation',
            method='createMany',
            model='C',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.CWhereUniqueInput,
        include: Optional[types.CInclude] = None
    ) -> Optional[BaseModelT]:
        """Delete a single C record.

        Parameters
        ----------
        where
            C filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned C model

        Returns
        -------
        prisma.models.C
            The deleted C record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        c = await C.prisma().delete(
            where={
                # C where unique filter

            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='deleteOne',
                model='C',
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def find_unique(
        self,
        where: types.CWhereUniqueInput,
        include: Optional[types.CInclude] = None
    ) -> Optional[BaseModelT]:
        """Find a unique C record.

        Parameters
        ----------
        where
            C filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned C model

        Returns
        -------
        prisma.models.C
            The found C record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        c = await C.prisma().find_unique(
            where={
                # C where unique filter

            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findUnique',
            model='C',
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CWhereInput] = None,
        cursor: Optional[types.CWhereUniqueInput] = None,
        include: Optional[types.CInclude] = None,
        order: Optional[Union[types.COrderByInput, List[types.COrderByInput]]] = None,
        distinct: Optional[List[types.CScalarFieldKeys]] = None,
    ) -> List[BaseModelT]:
        """Find multiple C records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of C records returned
        skip
            Ignore the first N results
        where
            C filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned C model
        order
            Order the returned C records by any field
        distinct
            Filter C records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.C]
            The list of all C records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 C records
        cs = await C.prisma().find_many(take=10)

        # find the first 5 C records ordered by the text field
        cs = await C.prisma().find_many(
            take=5,
            order={
                'text': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findMany',
            model='C',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [self._model.parse_obj(r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.CWhereInput] = None,
        cursor: Optional[types.CWhereUniqueInput] = None,
        include: Optional[types.CInclude] = None,
        order: Optional[Union[types.COrderByInput, List[types.COrderByInput]]] = None,
        distinct: Optional[List[types.CScalarFieldKeys]] = None,
    ) -> Optional[BaseModelT]:
        """Find a single C record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            C filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned C model
        order
            Order the returned C records by any field
        distinct
            Filter C records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.C
            The first C record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second C record ordered by the bit field
        c = await C.prisma().find_first(
            skip=1,
            order={
                'bit': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findFirst',
            model='C',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def update(
        self,
        data: types.CUpdateInput,
        where: types.CWhereUniqueInput,
        include: Optional[types.CInclude] = None
    ) -> Optional[BaseModelT]:
        """Update a single C record.

        Parameters
        ----------
        data
            C record data specifying what to update
        where
            C filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned C model

        Returns
        -------
        prisma.models.C
            The updated C record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        c = await C.prisma().update(
            where={
                # C where unique filter

            },
            data={
                # data to update the C record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='updateOne',
                model='C',
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def upsert(
        self,
        where: types.CWhereUniqueInput,
        data: types.CUpsertInput,
        include: Optional[types.CInclude] = None,
    ) -> BaseModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            C filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned C model

        Returns
        -------
        prisma.models.C
            The created or updated C record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        c = await C.prisma().upsert(
            where={
                # C where unique filter
            },
            data={
                'create': {
                    # C data to be set if the record does not exist
                },
                'update': {
                    # C data to be set if the record does exist
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='upsertOne',
            model='C',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def update_many(
        self,
        data: types.CUpdateManyMutationInput,
        where: types.CWhereInput,
    ) -> int:
        """Update multiple C records

        Parameters
        ----------
        data
            C data to update the selected C records to
        where
            Filter to select the C records to update

        Returns
        -------
        int
            The total number of C records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all C records
        total = await C.prisma().update_many(
            data={
                'v_bit': 'hffhfabhi'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='updateMany',
            model='C',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CWhereInput] = None,
        cursor: Optional[types.CWhereUniqueInput] = None,
    ) -> int:
        """Count the number of C records present in the database

        Parameters
        ----------
        select
            Select the C fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            C filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.CCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await C.prisma().count()

        # results: prisma.types.CCountAggregateOutput
        results = await C.prisma().count(
            select={
                '_all': True,
                'uuid': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.CCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CWhereInput] = None,
        cursor: Optional[types.CWhereUniqueInput] = None,
    ) -> types.CCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.CCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CWhereInput] = None,
        cursor: Optional[types.CWhereUniqueInput] = None,
    ) -> Union[int, types.CCountAggregateOutput]:
        """Count the number of C records present in the database

        Parameters
        ----------
        select
            Select the C fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            C filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.CCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await C.prisma().count()

        # results: prisma.types.CCountAggregateOutput
        results = await C.prisma().count(
            select={
                '_all': True,
                'char': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            operation='query',
            method='aggregate',
            model='C',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.CCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.CWhereInput] = None
    ) -> int:
        """Delete multiple C records.

        Parameters
        ----------
        where
            Optional C filter to find the records to be deleted

        Returns
        -------
        int
            The total number of C records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all C records
        total = await C.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='deleteMany',
            model='C',
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.CScalarFieldKeys'],
        *,
        where: Optional['types.CWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.CAvgAggregateInput'] = None,
        sum: Optional['types.CSumAggregateInput'] = None,
        min: Optional['types.CMinAggregateInput'] = None,
        max: Optional['types.CMaxAggregateInput'] = None,
        having: Optional['types.CScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.CCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.CScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.CScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.CGroupByOutput']:
        """Group C records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar C fields to group records by
        where
            C filter to select records
        take
            Limit the maximum number of C records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.CGroupByOutput]
            A list of dictionaries representing the C record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group C records by v_char values
        # and count how many records are in each group
        results = await C.prisma().group_by(
            ['v_char'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            operation='query',
            method='groupBy',
            model='C',
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class DActions(Generic[BaseModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[BaseModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[BaseModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.D]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await D.prisma().query_raw(
            'SELECT * FROM D WHERE id = $1',
            'bbcigiadhb',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[BaseModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.D
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await D.prisma().query_first(
            'SELECT * FROM D WHERE bool = $1',
            True,
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.DCreateInput,
        include: Optional[types.DInclude] = None
    ) -> BaseModelT:
        """Create a new D record.

        Parameters
        ----------
        data
            D record data
        include
            Specifies which relations should be loaded on the returned D model

        Returns
        -------
        prisma.models.D
            The created D record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a D record from just the required fields
        d = await D.prisma().create(
            data={
                # data to create a D record
                'bool': False,
                'xml': 'bdadhibhec',
                'json_': Json({'bfhdjaiejf': True}),
                'jsonb': Json({'bbjfijjadg': True}),
                'binary': Base64.encode(b'hdjacbehh'),
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='createOne',
            model='D',
            arguments={
                'data': data,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def create_many(
        self,
        data: List[types.DCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple D records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of D record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await D.prisma().create_many(
            data=[
                {
                    # data to create a D record
                    'bool': True,
                    'xml': 'bcgjbdgjdj',
                    'json_': Json({'fhdbhifae': True}),
                    'jsonb': Json({'beeacgfcej': True}),
                    'binary': Base64.encode(b'bbifhdiicc'),
                },
                {
                    # data to create a D record
                    'bool': False,
                    'xml': 'bjagdgabbg',
                    'json_': Json({'bjbbcffdij': True}),
                    'jsonb': Json({'begcgchdi': True}),
                    'binary': Base64.encode(b'bhbjceagbb'),
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            operation='mutation',
            method='createMany',
            model='D',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.DWhereUniqueInput,
        include: Optional[types.DInclude] = None
    ) -> Optional[BaseModelT]:
        """Delete a single D record.

        Parameters
        ----------
        where
            D filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned D model

        Returns
        -------
        prisma.models.D
            The deleted D record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        d = await D.prisma().delete(
            where={
                'id': 'bjeifffjdg',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='deleteOne',
                model='D',
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def find_unique(
        self,
        where: types.DWhereUniqueInput,
        include: Optional[types.DInclude] = None
    ) -> Optional[BaseModelT]:
        """Find a unique D record.

        Parameters
        ----------
        where
            D filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned D model

        Returns
        -------
        prisma.models.D
            The found D record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        d = await D.prisma().find_unique(
            where={
                'id': 'bdidcfdfjd',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findUnique',
            model='D',
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DWhereInput] = None,
        cursor: Optional[types.DWhereUniqueInput] = None,
        include: Optional[types.DInclude] = None,
        order: Optional[Union[types.DOrderByInput, List[types.DOrderByInput]]] = None,
        distinct: Optional[List[types.DScalarFieldKeys]] = None,
    ) -> List[BaseModelT]:
        """Find multiple D records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of D records returned
        skip
            Ignore the first N results
        where
            D filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned D model
        order
            Order the returned D records by any field
        distinct
            Filter D records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.D]
            The list of all D records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 D records
        ds = await D.prisma().find_many(take=10)

        # find the first 5 D records ordered by the xml field
        ds = await D.prisma().find_many(
            take=5,
            order={
                'xml': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findMany',
            model='D',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [self._model.parse_obj(r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.DWhereInput] = None,
        cursor: Optional[types.DWhereUniqueInput] = None,
        include: Optional[types.DInclude] = None,
        order: Optional[Union[types.DOrderByInput, List[types.DOrderByInput]]] = None,
        distinct: Optional[List[types.DScalarFieldKeys]] = None,
    ) -> Optional[BaseModelT]:
        """Find a single D record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            D filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned D model
        order
            Order the returned D records by any field
        distinct
            Filter D records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.D
            The first D record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second D record ordered by the json_ field
        d = await D.prisma().find_first(
            skip=1,
            order={
                'json_': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findFirst',
            model='D',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def update(
        self,
        data: types.DUpdateInput,
        where: types.DWhereUniqueInput,
        include: Optional[types.DInclude] = None
    ) -> Optional[BaseModelT]:
        """Update a single D record.

        Parameters
        ----------
        data
            D record data specifying what to update
        where
            D filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned D model

        Returns
        -------
        prisma.models.D
            The updated D record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        d = await D.prisma().update(
            where={
                'id': 'dfeggejja',
            },
            data={
                # data to update the D record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='updateOne',
                model='D',
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def upsert(
        self,
        where: types.DWhereUniqueInput,
        data: types.DUpsertInput,
        include: Optional[types.DInclude] = None,
    ) -> BaseModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            D filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned D model

        Returns
        -------
        prisma.models.D
            The created or updated D record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        d = await D.prisma().upsert(
            where={
                'id': 'gehbgghbj',
            },
            data={
                'create': {
                    'id': 'gehbgghbj',
                    'bool': False,
                    'xml': 'bjagdgabbg',
                    'json_': Json({'bjbbcffdij': True}),
                    'jsonb': Json({'begcgchdi': True}),
                    'binary': Base64.encode(b'bhbjceagbb'),
                },
                'update': {
                    'bool': False,
                    'xml': 'bjagdgabbg',
                    'json_': Json({'bjbbcffdij': True}),
                    'jsonb': Json({'begcgchdi': True}),
                    'binary': Base64.encode(b'bhbjceagbb'),
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='upsertOne',
            model='D',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def update_many(
        self,
        data: types.DUpdateManyMutationInput,
        where: types.DWhereInput,
    ) -> int:
        """Update multiple D records

        Parameters
        ----------
        data
            D data to update the selected D records to
        where
            Filter to select the D records to update

        Returns
        -------
        int
            The total number of D records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all D records
        total = await D.prisma().update_many(
            data={
                'jsonb': Json({'dfhaijeie': True})
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='updateMany',
            model='D',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DWhereInput] = None,
        cursor: Optional[types.DWhereUniqueInput] = None,
    ) -> int:
        """Count the number of D records present in the database

        Parameters
        ----------
        select
            Select the D fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            D filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.DCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await D.prisma().count()

        # results: prisma.types.DCountAggregateOutput
        results = await D.prisma().count(
            select={
                '_all': True,
                'binary': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.DCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DWhereInput] = None,
        cursor: Optional[types.DWhereUniqueInput] = None,
    ) -> types.DCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.DCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DWhereInput] = None,
        cursor: Optional[types.DWhereUniqueInput] = None,
    ) -> Union[int, types.DCountAggregateOutput]:
        """Count the number of D records present in the database

        Parameters
        ----------
        select
            Select the D fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            D filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.DCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await D.prisma().count()

        # results: prisma.types.DCountAggregateOutput
        results = await D.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            operation='query',
            method='aggregate',
            model='D',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.DCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.DWhereInput] = None
    ) -> int:
        """Delete multiple D records.

        Parameters
        ----------
        where
            Optional D filter to find the records to be deleted

        Returns
        -------
        int
            The total number of D records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all D records
        total = await D.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='deleteMany',
            model='D',
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.DScalarFieldKeys'],
        *,
        where: Optional['types.DWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.DAvgAggregateInput'] = None,
        sum: Optional['types.DSumAggregateInput'] = None,
        min: Optional['types.DMinAggregateInput'] = None,
        max: Optional['types.DMaxAggregateInput'] = None,
        having: Optional['types.DScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.DCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.DScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.DScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.DGroupByOutput']:
        """Group D records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar D fields to group records by
        where
            D filter to select records
        take
            Limit the maximum number of D records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.DGroupByOutput]
            A list of dictionaries representing the D record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group D records by bool values
        # and count how many records are in each group
        results = await D.prisma().group_by(
            ['bool'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            operation='query',
            method='groupBy',
            model='D',
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class EActions(Generic[BaseModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[BaseModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[BaseModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.E]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await E.prisma().query_raw(
            'SELECT * FROM E WHERE id = $1',
            'gbcdjgicb',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[BaseModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.E
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await E.prisma().query_first(
            'SELECT * FROM E WHERE date = $1',
            datetime.datetime.utcnow(),
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.ECreateInput,
        include: Optional[types.EInclude] = None
    ) -> BaseModelT:
        """Create a new E record.

        Parameters
        ----------
        data
            E record data
        include
            Specifies which relations should be loaded on the returned E model

        Returns
        -------
        prisma.models.E
            The created E record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a E record from just the required fields
        e = await E.prisma().create(
            data={
                # data to create a E record
                'date': datetime.datetime.utcnow(),
                'time': datetime.datetime.utcnow(),
                'ts': datetime.datetime.utcnow(),
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='createOne',
            model='E',
            arguments={
                'data': data,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def create_many(
        self,
        data: List[types.ECreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple E records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of E record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await E.prisma().create_many(
            data=[
                {
                    # data to create a E record
                    'date': datetime.datetime.utcnow(),
                    'time': datetime.datetime.utcnow(),
                    'ts': datetime.datetime.utcnow(),
                },
                {
                    # data to create a E record
                    'date': datetime.datetime.utcnow(),
                    'time': datetime.datetime.utcnow(),
                    'ts': datetime.datetime.utcnow(),
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            operation='mutation',
            method='createMany',
            model='E',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.EWhereUniqueInput,
        include: Optional[types.EInclude] = None
    ) -> Optional[BaseModelT]:
        """Delete a single E record.

        Parameters
        ----------
        where
            E filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned E model

        Returns
        -------
        prisma.models.E
            The deleted E record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        e = await E.prisma().delete(
            where={
                'id': 'biaibdagac',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='deleteOne',
                model='E',
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def find_unique(
        self,
        where: types.EWhereUniqueInput,
        include: Optional[types.EInclude] = None
    ) -> Optional[BaseModelT]:
        """Find a unique E record.

        Parameters
        ----------
        where
            E filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned E model

        Returns
        -------
        prisma.models.E
            The found E record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        e = await E.prisma().find_unique(
            where={
                'id': 'bbfbheibcd',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findUnique',
            model='E',
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.EWhereInput] = None,
        cursor: Optional[types.EWhereUniqueInput] = None,
        include: Optional[types.EInclude] = None,
        order: Optional[Union[types.EOrderByInput, List[types.EOrderByInput]]] = None,
        distinct: Optional[List[types.EScalarFieldKeys]] = None,
    ) -> List[BaseModelT]:
        """Find multiple E records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of E records returned
        skip
            Ignore the first N results
        where
            E filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned E model
        order
            Order the returned E records by any field
        distinct
            Filter E records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.E]
            The list of all E records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 E records
        es = await E.prisma().find_many(take=10)

        # find the first 5 E records ordered by the time field
        es = await E.prisma().find_many(
            take=5,
            order={
                'time': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findMany',
            model='E',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [self._model.parse_obj(r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.EWhereInput] = None,
        cursor: Optional[types.EWhereUniqueInput] = None,
        include: Optional[types.EInclude] = None,
        order: Optional[Union[types.EOrderByInput, List[types.EOrderByInput]]] = None,
        distinct: Optional[List[types.EScalarFieldKeys]] = None,
    ) -> Optional[BaseModelT]:
        """Find a single E record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            E filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned E model
        order
            Order the returned E records by any field
        distinct
            Filter E records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.E
            The first E record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second E record ordered by the ts field
        e = await E.prisma().find_first(
            skip=1,
            order={
                'ts': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='query',
            method='findFirst',
            model='E',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def update(
        self,
        data: types.EUpdateInput,
        where: types.EWhereUniqueInput,
        include: Optional[types.EInclude] = None
    ) -> Optional[BaseModelT]:
        """Update a single E record.

        Parameters
        ----------
        data
            E record data specifying what to update
        where
            E filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned E model

        Returns
        -------
        prisma.models.E
            The updated E record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        e = await E.prisma().update(
            where={
                'id': 'hiagajie',
            },
            data={
                # data to update the E record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='updateOne',
                model='E',
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def upsert(
        self,
        where: types.EWhereUniqueInput,
        data: types.EUpsertInput,
        include: Optional[types.EInclude] = None,
    ) -> BaseModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            E filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned E model

        Returns
        -------
        prisma.models.E
            The created or updated E record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        e = await E.prisma().upsert(
            where={
                'id': 'eeejidbif',
            },
            data={
                'create': {
                    'id': 'eeejidbif',
                    'date': datetime.datetime.utcnow(),
                    'time': datetime.datetime.utcnow(),
                    'ts': datetime.datetime.utcnow(),
                },
                'update': {
                    'date': datetime.datetime.utcnow(),
                    'time': datetime.datetime.utcnow(),
                    'ts': datetime.datetime.utcnow(),
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='upsertOne',
            model='E',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def update_many(
        self,
        data: types.EUpdateManyMutationInput,
        where: types.EWhereInput,
    ) -> int:
        """Update multiple E records

        Parameters
        ----------
        data
            E data to update the selected E records to
        where
            Filter to select the E records to update

        Returns
        -------
        int
            The total number of E records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all E records
        total = await E.prisma().update_many(
            data={
                'id': 'efgbahec'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='updateMany',
            model='E',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.EWhereInput] = None,
        cursor: Optional[types.EWhereUniqueInput] = None,
    ) -> int:
        """Count the number of E records present in the database

        Parameters
        ----------
        select
            Select the E fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            E filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ECountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await E.prisma().count()

        # results: prisma.types.ECountAggregateOutput
        results = await E.prisma().count(
            select={
                '_all': True,
                'date': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.ECountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.EWhereInput] = None,
        cursor: Optional[types.EWhereUniqueInput] = None,
    ) -> types.ECountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.ECountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.EWhereInput] = None,
        cursor: Optional[types.EWhereUniqueInput] = None,
    ) -> Union[int, types.ECountAggregateOutput]:
        """Count the number of E records present in the database

        Parameters
        ----------
        select
            Select the E fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            E filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ECountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await E.prisma().count()

        # results: prisma.types.ECountAggregateOutput
        results = await E.prisma().count(
            select={
                '_all': True,
                'time': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            operation='query',
            method='aggregate',
            model='E',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.ECountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.EWhereInput] = None
    ) -> int:
        """Delete multiple E records.

        Parameters
        ----------
        where
            Optional E filter to find the records to be deleted

        Returns
        -------
        int
            The total number of E records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all E records
        total = await E.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            operation='mutation',
            method='deleteMany',
            model='E',
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.EScalarFieldKeys'],
        *,
        where: Optional['types.EWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.EAvgAggregateInput'] = None,
        sum: Optional['types.ESumAggregateInput'] = None,
        min: Optional['types.EMinAggregateInput'] = None,
        max: Optional['types.EMaxAggregateInput'] = None,
        having: Optional['types.EScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.ECountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.EScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.EScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.EGroupByOutput']:
        """Group E records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar E fields to group records by
        where
            E filter to select records
        take
            Limit the maximum number of E records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.EGroupByOutput]
            A list of dictionaries representing the E record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group E records by ts values
        # and count how many records are in each group
        results = await E.prisma().group_by(
            ['ts'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            operation='query',
            method='groupBy',
            model='E',
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]



def _select_fields(root: str, select: Mapping[str, Any]) -> str:
    """Helper to build a GraphQL selection string

    This is a work around until field selection is added to the query builder.
    """

    return root + ' {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))


from . import models

'''