datasource db {
  provider = "sqlite"
  url      = "file:dev.db"
}

generator client {
  // ensure all warnings that are reported during generation
  // are raised as errors so we catch them early
  provider                    = "python -W error -m prisma"
  interface                   = "asyncio"
  recursive_type_depth        = 5
  partial_type_generator      = "tests/scripts/partial_type_generator.py"
  enable_experimental_decimal = true
}

model Post {
  id         String     @id @default(cuid())
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  title      String
  published  Boolean
  views      Int        @default(0)
  desc       String?
  author     User?      @relation(fields: [author_id], references: [id])
  author_id  String?
  categories Category[]
}

model User {
  id         String   @id @default(cuid())
  name       String
  email      String?  @unique
  created_at DateTime @default(now())
  posts      Post[]
  profile    Profile?
}

model Category {
  id    Int    @id @default(autoincrement())
  posts Post[]
  name  String
}

/// We need this because of foo bar baz
/// @Python(instance_name: "profile_custom_name")
model Profile {
  id      Int     @id @default(autoincrement())
  user    User    @relation(fields: [user_id], references: [id])
  user_id String  @unique
  bio     String
  city    String?
  country String
  views   Int     @default(0)
}

// model that just exists for testing different schema types
model Types {
  id        Int      @id @default(autoincrement())
  bool_     Boolean  @default(false)
  string    String   @default("")
  bytes     Bytes    @default("")
  bigint    BigInt   @default(0)
  integer   Int      @default(0)
  float_    Float    @default(0)
  datetime_ DateTime @default(now())
  decimal_  Decimal  @default(1)

  optional_int      Int?      @default(0)
  optional_bool     Boolean?  @default(false)
  optional_string   String?   @default("")
  optional_bytes    Bytes?    @default("")
  optional_bigint   BigInt?   @default(0)
  optional_integer  Int?      @default(0)
  optional_float    Float?    @default(0)
  optional_datetime DateTime? @default(now())
  optional_decimal  Decimal?  @default(1)
}
