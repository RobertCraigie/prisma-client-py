[tox]
envlist =
    setup,
    lint,
    py36,
    py37,
    py38,
    py39,
    integrations,
    typesafety-mypy,
    typesafety-pyright,
    report,

skip_missing_interpreters = true
toxworkdir = /tmp/tox/prisma-client-py


[testenv]
deps =
    pytest==6.2.4
    pytest-sugar
    mock==4.0.3
    pytest-mock==3.6.1
    pytest-asyncio==0.14.0
    pytest-subprocess==1.1.2
    coverage==6.1.1
    syrupy==1.3.1

setenv =
    # turn warnings into errors
    PYTEST_ADDOPTS = "-W error"
    PRISMA_PY_DEBUG = 1
    COVERAGE_FILE = {env:COVERAGE_FILE:{toxworkdir}{:}.coverage.{envname}}

passenv =
    DEBUG
    PYTHONPATH
    PRISMA_PY_DEBUG_GENERATOR
    PRISMA_PY_POSTGRES_URL

commands_pre =
    python scripts/cleanup.py
    coverage run -m prisma generate --schema=tests/data/schema.prisma

commands =
    coverage run -m pytest {posargs}

commands_post =
    python scripts/cleanup.py


[testenv:typesafety-mypy]
commands_pre =
    python scripts/cleanup.py
    coverage run -m prisma generate --schema=typesafety/mypy/schema.prisma

# we have to install setuptools and pytest-mypy-plugins here to be able to
# pin the setuptools version and testenv.requires not working.
# we need a specific version of setuptools due to pystache and
# https://github.com/pypa/setuptools/issues/1120
commands =
    pip install -U 'setuptools<58'
    pip install -U pytest-mypy-plugins==1.6.1
    pytest --mypy-ini-file=tests/data/mypy.ini {posargs:typesafety/mypy}


[testenv:typesafety-pyright]
deps =
    {[testenv:setup]deps}
    pytest-pyright

commands_pre =
    python scripts/cleanup.py
    coverage run -m prisma generate --schema=typesafety/pyright/schema.prisma

commands =
    pytest --pyright-dir=typesafety/pyright {posargs:typesafety/pyright}


[testenv:setup]
skip_install = True

deps =
    coverage==5.3.1

setenv =
    COVERAGE_FILE = {env:COVERAGE_FILE:{toxworkdir}{:}.coverage.{envname}}

# override the default
commands_pre =
    python -c 'import sys; sys.exit(0);'

commands =
    coverage erase

commands_post =
    python -c 'import sys; sys.exit(0);'

[testenv:lint]
# run every command even if one of them fails
ignore_errors = true

deps =
    {[testenv]deps}
    interrogate==1.5.0
    black==21.11b1
    pylint==2.6.0
    mypy==0.910
    types-contextvars
    pyright>=0.0.7

commands =
    pylint {envsitepackagesdir}/prisma tests
    black --check .
    pyright {envsitepackagesdir}/prisma tests
    pyright --ignoreexternal --verifytypes prisma
    interrogate -v --omit-covered-files --fail-under 100 --whitelist-regex "test_.*" --exclude */.venv/* tests


[testenv:mypy]
# mypy is in it's own testenv due to the ridiculous amount of time it takes to run
deps =
    {[testenv]deps}
    mypy==0.910
    types-mock
    types-contextvars

commands =
    coverage run -m mypy --show-traceback --namespace-packages --package prisma --package tests


[testenv:report]
skip_install = true
deps =
    coverage==5.3.1

setenv =
    COVERAGE_FILE={toxworkdir}{:}.coverage

# override the default
commands_pre =
    python -c 'import sys; sys.exit(0);'

commands_post =
    python -c 'import sys; sys.exit(0);'

commands =
    coverage combine
    coverage html -i
    coverage xml -i
    coverage report -i --skip-covered


[coverage:run]
branch = True
concurrency = multiprocessing

source =
    tests
    prisma

omit =
    *.py.jinja
    prisma/partial_types.py
    # generated code
    */prisma/types.py
    */prisma/enums.py
    */prisma/client.py
    */prisma/models.py
    */prisma/partials.py
    # we still want to include these
    # */prisma/builder.py
    # */prisma/engine/query.py


[coverage:report]
exclude_lines =
    pragma: no cover
    mark: filedef
    @pytest.mark.skip\(?
    if TYPE_CHECKING
    \.\.\.

[coverage:paths]
prisma =
    src/prisma
    */**/prisma
