{% set annotations = true %}
{% include '_header.py.jinja' %}
{% from '_utils.py.jinja' import maybe_async_def with context %}
# -- template engine/abstract.py.jinja --
from abc import ABC, abstractmethod
from ._types import TransactionId
from ..types import DatasourceOverride
from .._compat import get_running_loop


__all__ = (
    'AbstractEngine',
)


class AbstractEngine(ABC):
    dml: str

    def stop(self, *, timeout: Optional[float] = None) -> None:
        """Wrapper for synchronously calling close() and aclose()

        The `timeout` argument is in seconds.
        """
        self.close(timeout=timeout)
        try:
            loop = get_running_loop()
        except RuntimeError:
            # no event loop in the current thread, we cannot cleanup asynchronously
            return
        else:
            if not loop.is_closed():
                loop.create_task(self.aclose(timeout=timeout))

    @abstractmethod
    def close(self, *, timeout: Optional[float] = None) -> None:
        """Synchronous method for closing the engine, useful if the underlying engine uses a subprocess

        The `timeout` argument is in seconds.
        """
        ...

    @abstractmethod
    async def aclose(self, *, timeout: Optional[float] = None) -> None:
        """Asynchronous method for closing the engine, only used if an
        asynchronous client is generated.

        The `timeout` argument is in seconds.
        """
        ...

    @abstractmethod
    {{ maybe_async_def }}connect(
        self,
        timeout: int = 10,
        datasources: Optional[List[DatasourceOverride]] = None,
    ) -> None:
        """Connect to the engine"""
        ...

    @abstractmethod
    {{ maybe_async_def }}query(self, content: str, *, tx_id: TransactionId | None) -> Any:
        """Execute a GraphQL query.

        This method expects a JSON object matching this structure:

        {
            'variables': {},
            'operation_name': str,
            'query': str,
        }
        """
        ...

    @abstractmethod
    {{ maybe_async_def }}start_transaction(self, *, content: str) -> TransactionId:
        """Start an interactive transaction, returns the transaction ID that can be used to perform subsequent operations"""
        ...

    @abstractmethod
    {{ maybe_async_def }}commit_transaction(self, tx_id: TransactionId) -> None:
        """Commit an interactive transaction, the given transaction will no longer be usable"""
        ...

    @abstractmethod
    {{ maybe_async_def }}rollback_transaction(self, tx_id: TransactionId) -> None:
        """Rollback an interactive transaction, the given transaction will no longer be usable"""
        ...
