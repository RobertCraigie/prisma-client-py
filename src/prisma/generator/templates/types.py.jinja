{% include '_header.py.jinja' %}
{% from '_utils.py.jinja' import recursive_types with context %}
# -- template types.py.jinja --
from .utils import _NoneType


{% set depth = generator.config.recursive_type_depth %}

# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped
{% macro recursive(base) %}
    {% if recursive_types %}
{{ caller(base, base, '') }}
    {% else %}
    {%+ for i in range(depth) -%}
        {% if i == 0 %}
            {% set name = base %}
        {% else %}
            {% set name = base + 'Recursive%s' % i %}
        {% endif %}

        {% if i == depth - 1 %}
            {% set iteration = '' %}
        {% else %}
            {% set iteration = 'Recursive%s' % (i + 1) %}
        {% endif %}

        {% if iteration %}
            {% set next = base + iteration %}
        {% else %}
            {% set next = '' %}
        {% endif %}
{{ caller(name, next, iteration) }}
    {%- endfor %}
    {% endif %}
{% endmacro %}


SortOrder = Literal['asc', 'desc']

# types that can be serialized to json by our query builder
{% if recursive_types %}
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List['Serializable'],
    Dict[None, 'Serializable'],
    Dict[bool, 'Serializable'],
    Dict[float, 'Serializable'],
    Dict[int, 'Serializable'],
    Dict[str, 'Serializable'],
]
{% else %}
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]
{% endif %}


{% call(name, next, iteration) recursive('StringFilter') %}
class {{ name }}(TypedDict, total=False):
    equals: str
    not_in: List[str]
    lt: str
    lte: str
    gt: str
    gte: str
    contains: str
    startswith: str
    endswith: str
    IN: List[str]
    {%+ if next != '' -%}
        NOT: Union[str, '{{ next }}']
    {% endif %}
{% endcall %}

{% call(name, next, iteration) recursive('DateTimeFilter') %}
class {{ name }}(TypedDict, total=False):
    equals: datetime.datetime
    not_in: List[datetime.datetime]
    lt: datetime.datetime
    lte: datetime.datetime
    gt: datetime.datetime
    gte: datetime.datetime
    IN: List[datetime.datetime]
    {%+ if next != '' -%}
        NOT: '{{ next }}'
    {% endif %}
{% endcall %}


{% call(name, next, iteration) recursive('BooleanFilter') %}
class {{ name }}(TypedDict, total=False):
    equals: bool
    {%+ if next != '' -%}
        NOT: Union[bool, '{{ next }}']
    {% endif %}
{% endcall %}


{% call(name, next, iteration) recursive('IntFilter') %}
class {{ name }}(TypedDict, total=False):
    equals: int
    IN: List[int]
    not_in: List[int]
    lt: int
    lte: int
    gt: int
    gte: int
    {%+ if next != '' -%}
        NOT: Union[int, '{{ next }}']
    {% endif %}
{% endcall %}


BigIntFilter = IntFilter
{% call(name, next, iteration) recursive('FloatFilter') %}
class {{ name }}(TypedDict, total=False):
    equals: float
    IN: List[float]
    not_in: List[float]
    lt: float
    lte: float
    gt: float
    gte: float
    {%+ if next != '' -%}
        NOT: Union[float, '{{ next }}']
    {% endif %}
{% endcall %}

# TODO: preview feature for improving JSON filtering
class JsonFilter(TypedDict, total=False):
    equals: 'fields.Json'
    NOT: 'fields.Json'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput


{% for model in dmmf.datamodel.models %}
# {{ model.name }} types

class {{ model.name }}OptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the {{ model.name }} create method"""
    {% for field in model.all_fields %}
        {%- if not field.required_on_create and not field.is_read_only -%}
            {{'    '}}{{ field.name }}: {{ field.maybe_optional(field.create_input_type) }}
        {% endif %}
    {% endfor %}


class {{ model.name }}CreateInput({{ model.name }}OptionalCreateInput):
    """Required arguments to the {{ model.name }} create method"""
    {% for field in model.all_fields %}
        {%- if field.required_on_create and not field.is_read_only -%}
            {{'    '}}{{ field.name }}: {{ field.create_input_type }}
        {% endif %}
    {% endfor %}


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class {{ model.name }}OptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the {{ model.name }} create method, without relations"""
    {% for field in model.all_fields %}
        {%- if not field.required_on_create and not field.is_read_only and not field.relation_name -%}
            {{'    '}}{{ field.name }}: {{ field.maybe_optional(field.create_input_type) }}
        {% endif %}
    {% endfor %}


class {{ model.name }}CreateWithoutRelationsInput({{ model.name }}OptionalCreateWithoutRelationsInput):
    """Required arguments to the {{ model.name }} create method, without relations"""
    {% for field in model.all_fields %}
        {%- if field.required_on_create and not field.is_read_only and not field.relation_name -%}
            {{'    '}}{{ field.name }}: {{ field.python_type }}
        {% endif %}
    {% endfor %}


class {{ model.name }}CreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: '{{ model.name }}CreateWithoutRelationsInput'
    connect: '{{ model.name }}WhereUniqueInput'


class {{ model.name }}CreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['{{ model.name }}CreateWithoutRelationsInput', List['{{ model.name }}CreateWithoutRelationsInput']]
    connect: Union['{{ model.name }}WhereUniqueInput', List['{{ model.name }}WhereUniqueInput']]


class {{ model.name }}WhereUniqueInput(TypedDict, total=False):
    """Unique {{ model.name }} arguments for searching"""
    {% for field in model.all_fields %}
        {%- if field.is_unique or field.is_id -%}
            {{'    '}}{{ field.name }}: {{ field.python_type }}
        {% endif %}
    {% endfor %}


class {{ model.name }}UpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    {% for field in model.all_fields %}
        {%- if not field.is_unique and not field.is_id and not field.is_read_only -%}
            {{'    '}}{{ field.name }}: {{ field.maybe_optional(field.get_update_input_type()) }}
        {% endif %}
    {% endfor %}


class {{ model.name }}UpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    {% for field in model.all_fields %}
        {%- if not field.is_read_only -%}
            {{'    '}}{{ field.name }}: {{ field.maybe_optional(field.get_update_input_type()) }}
        {% endif %}
    {% endfor %}


class {{ model.name }}UpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['{{ model.name }}CreateWithoutRelationsInput']
    connect: List['{{ model.name }}WhereUniqueInput']
    set: List['{{ model.name }}WhereUniqueInput']
    disconnect: List['{{ model.name }}WhereUniqueInput']
    delete: List['{{ model.name }}WhereUniqueInput']

    # TODO
    # update: List['{{ model.name }}UpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['{{ model.name }}UpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['{{ model.name }}ScalarWhereInput']
    # upsert: List['{{ model.name }}UpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['{{ model.name }}CreateOrConnectWithoutRelationsInput']


class {{ model.name }}UpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: '{{ model.name }}CreateWithoutRelationsInput'
    connect: '{{ model.name }}WhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: '{{ model.name }}UpdateInput'
    # upsert: '{{ model.name }}UpsertWithoutRelationsInput'
    # connectOrCreate: '{{ model.name }}CreateOrConnectWithoutRelationsInput'


class {{ model.name }}UpsertInput(TypedDict):
    create: '{{ model.name }}CreateInput'
    update: '{{ model.name }}UpdateInput'  # pyright: reportIncompatibleMethodOverride=false


class {{ model.name }}OrderByInput(TypedDict, total=False):
    {% for field in model.scalar_fields %}
    {{ field.name }}: 'SortOrder'
    {% endfor %}


# recursive {{ model.name }} types
# TODO: cleanup these types


{% if recursive_types %}
    {% set where_input_type = model.name + 'WhereInput' %}
{% else %}
# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/latest/limitations/
    {% set where_input_type = 'Dict[str, Any]' %}
{% endif %}

{{ model.name }}RelationFilter = TypedDict(
    '{{ model.name }}RelationFilter',
    {
        'is': '{{ where_input_type }}',
        'is_not': '{{ where_input_type }}',
    },
    total=False,
)


class {{ model.name }}ListRelationFilter(TypedDict, total=False):
    some: '{{ where_input_type }}'
    none: '{{ where_input_type }}'
    every: '{{ where_input_type }}'


class {{ model.name }}Include(TypedDict, total=False):
    """{{ model.name }} relational arguments"""
    {% for field in model.relational_fields -%}
        {{'    '}}{{ field.name }}: Union[bool, '{{ field.relational_args_type }}From{{ model.name }}']
    {% endfor %}


{% for related in dmmf.datamodel.models %}
{% call(name, next, iteration) recursive('%sIncludeFrom%s' % (related.name, model.name)) %}
class {{ name }}(TypedDict, total=False):
    """Relational arguments for {{model.name }}"""
    {% if next != '' -%}
        {% for field in related.relational_fields -%}
            {{'    '}}{{ field.name }}: Union[bool, '{{ field.relational_args_type }}From{{ model.name + iteration }}']
        {% endfor %}
    {% endif %}
{% endcall %}

{% call(name, next, iteration) recursive('%sArgsFrom%s' % (related.name, model.name)) %}
class {{ name }}(TypedDict, total=False):
    """Arguments for {{model.name }}"""
    {%+ if next != '' -%}
        include: '{{ related.name }}IncludeFrom{{ related.name + iteration}}'
    {% endif %}
{% endcall %}

{% call(name, next, iteration) recursive('FindMany%sArgsFrom%s' % (related.name, model.name)) %}
class {{ name }}(TypedDict, total=False):
    """Arguments for {{model.name }}"""
    take: int
    skip: int
    order_by: Union['{{ model.name }}OrderByInput', List['{{ model.name }}OrderByInput']]
    where: '{{ related.name }}WhereInput'
    cursor: '{{ related.name }}WhereUniqueInput'
    {%+ if next != '' -%}
        include: '{{ related.name }}IncludeFrom{{ related.name + iteration}}'
    {% endif %}
{% endcall %}

{% endfor %}


FindMany{{ model.name }}Args = FindMany{{ model.name }}ArgsFrom{{ model.name }}
FindFirst{{ model.name }}Args = FindMany{{ model.name }}ArgsFrom{{ model.name}}


{% call(current, next, iteration) recursive(model.name + 'WhereInput') %}
class {{ current }}(TypedDict, total=False):
    """{{ model.name }} arguments for searching"""
    {% for field in model.all_fields -%}
        {{'    '}}{{ field.name }}: {{ field.where_input_type }}
    {% endfor %}

    {% if next != '' %}
    AND: List['{{ next }}']
    OR: List['{{ next }}']
    NOT: List['{{ next }}']
    {% endif %}
{% endcall %}


{{ model.name }}Keys = Literal[
    {% for field in model.all_fields %}
    '{{ field.name }}',
    {% endfor %}
]

{% if model.has_relational_fields -%}
    {{ model.name }}RelationalFieldKeys = Literal[
        {% for field in model.relational_fields %}
        '{{ field.name }}',
        {% endfor %}
    ]
{% else -%}
    {{ model.name }}RelationalFieldKeys = _NoneType
{% endif %}

{% endfor %}


# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields
