import pkgutil
from pathlib import Path
from typing import NoReturn
from typing_extensions import Protocol, runtime_checkable


@runtime_checkable
class SourceLoader(Protocol):
    def get_filename(self) -> str:
        ...


def cleanup() -> NoReturn:
    """Remove python files that are auto-generated by Prisma Python

    This function unconditionally raises a SystemExit exception
    """

    # pkgutil.get_loader() can return a loader that doesn't have access to
    # the packages source location. We should provide an easy to understand error
    # for this case even if it is incredibly unlikey (if not impossible)
    # to happen in our use case
    loader = pkgutil.get_loader('prisma')
    if not isinstance(loader, SourceLoader):
        print(f'Received unresolvable import loader: {loader}')
        raise SystemExit(1)

    # as we rely on prisma to cleanup the templates for us
    # we have to make sure that prisma is importable and
    # if any template rendered incorrect syntax or any other
    # kind of error that wasn't automatically cleaned up,
    # prisma will raise an error when imported,
    # removing prisma/client.py fixes this as it is
    # the only default entrypoint to generated code.
    pkg_path = loader.get_filename()
    file = Path(pkg_path).parent / 'client.py'
    if file.exists():
        file.unlink()

    from prisma.generator.generator import BASE_PACKAGE_DIR, cleanup_templates

    cleanup_templates(rootdir=BASE_PACKAGE_DIR)
    print(f'Successfully removed all auto-generated files from {pkg_path}')
    raise SystemExit(0)


if __name__ == '__main__':
    cleanup()
